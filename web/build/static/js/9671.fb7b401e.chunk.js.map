{"version":3,"file":"static/js/9671.fb7b401e.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/progress/progress.scss?tag=calcite-progress&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/progress/progress.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/interfaces.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-message/input-message.scss?tag=calcite-input-message&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/functional/Validation.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-text/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/input-text/input-text.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/input-text/input-text.scss?tag=calcite-input-text&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/input/common/input.ts"],"sourcesContent":["@import \"../../assets/styles/animation\";\n\n:host {\n  @apply relative block w-full;\n}\n\n.track,\n.bar {\n  @apply absolute top-0;\n  block-size: 2px;\n}\n\n.track {\n  @apply z-default w-full overflow-hidden;\n  background: theme(\"borderColor.color.3\");\n}\n\n.bar {\n  @apply bg-brand z-default;\n}\n\n@media (forced-colors: active) {\n  .track {\n    background-color: highlightText;\n  }\n  .bar {\n    background-color: linkText;\n  }\n}\n\n.indeterminate {\n  @apply w-1/5;\n  animation: looping-progress-bar-ani scaleDuration(--calcite-internal-animation-timing-medium, 11) linear infinite;\n  &.calcite--rtl {\n    animation-name: looping-progress-bar-ani-rtl;\n  }\n}\n\n.reversed {\n  animation-direction: reverse;\n}\n\n.text {\n  @apply text-n2h px-0 pt-4 pb-0 text-center font-medium;\n  color: var(--calcite-color-text-2);\n}\n\n@keyframes looping-progress-bar-ani {\n  0% {\n    transform: translate3d(-100%, 0, 0);\n  }\n  50% {\n    inline-size: 40%;\n  }\n  100% {\n    transform: translate3d(600%, 0, 0);\n  }\n}\n\n@keyframes looping-progress-bar-ani-rtl {\n  0% {\n    transform: translate3d(100%, 0, 0);\n  }\n  50% {\n    inline-size: 40%;\n  }\n  100% {\n    transform: translate3d(-600%, 0, 0);\n  }\n}\n\n@include base-component();\n","import { Component, Element, h, Prop, VNode } from \"@stencil/core\";\nimport { getElementDir } from \"../../utils/dom\";\nimport { CSS_UTILITY } from \"../../utils/resources\";\n@Component({\n  tag: \"calcite-progress\",\n  styleUrl: \"progress.scss\",\n  shadow: true,\n})\nexport class Progress {\n  @Element() el: HTMLCalciteProgressElement;\n\n  /**\n   * Specifies the component type.\n   *\n   * Use `\"indeterminate\"` if finding actual progress value is impossible.\n   *\n   */\n  @Prop({ reflect: true }) type: \"indeterminate\" | \"determinate\" = \"determinate\";\n\n  /** When `type` is `\"determinate\"`, the component's progress value with a range of 0.0 - 1.0. */\n  @Prop() value = 0;\n\n  /** Accessible name for the component. */\n  @Prop() label: string;\n\n  /** Text that displays under the component's indicator. */\n  @Prop() text: string;\n\n  /** When `true` and for `\"indeterminate\"` progress bars, reverses the animation direction. */\n  @Prop({ reflect: true }) reversed = false;\n\n  render(): VNode {\n    const isDeterminate = this.type === \"determinate\";\n    const barStyles = isDeterminate ? { width: `${this.value * 100}%` } : {};\n    const dir = getElementDir(this.el);\n    return (\n      <div\n        aria-label={this.label || this.text}\n        aria-valuemax={1}\n        aria-valuemin={0}\n        aria-valuenow={this.value}\n        role=\"progressbar\"\n      >\n        <div class=\"track\">\n          <div\n            class={{\n              bar: true,\n              indeterminate: this.type === \"indeterminate\",\n              [CSS_UTILITY.rtl]: dir === \"rtl\",\n              reversed: this.reversed,\n            }}\n            style={barStyles}\n          />\n        </div>\n        {this.text ? <div class=\"text\">{this.text}</div> : null}\n      </div>\n    );\n  }\n}\n","export const StatusIconDefaults = {\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n  idle: \"information\",\n} as const;\n","import { Component, Element, h, Host, Prop, VNode, Watch } from \"@stencil/core\";\nimport { setRequestedIcon } from \"../../utils/dom\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { StatusIconDefaults } from \"./interfaces\";\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-input-message\",\n  styleUrl: \"input-message.scss\",\n  shadow: true,\n})\nexport class InputMessage {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies an icon to display. */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  @Watch(\"status\")\n  @Watch(\"icon\")\n  handleIconEl(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.requestedIcon = setRequestedIcon(StatusIconDefaults, this.icon, this.status);\n  }\n\n  render(): VNode {\n    const hidden = this.el.hidden;\n    return (\n      <Host calcite-hydrated-hidden={hidden}>\n        {this.renderIcon(this.requestedIcon)}\n        <slot />\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputMessageElement;\n\n  /** the computed icon to render */\n  private requestedIcon?: IconNameOrString;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private renderIcon(iconName: IconNameOrString): VNode {\n    if (iconName) {\n      return (\n        <calcite-icon\n          class=\"calcite-input-message-icon\"\n          flipRtl={this.iconFlipRtl}\n          icon={iconName}\n          scale=\"s\"\n        />\n      );\n    }\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-input-message-spacing-value: The top margin spacing above the component.\n */\n\n:host {\n  @apply text-color-1 transition-default box-border flex h-auto w-full items-center font-medium opacity-100;\n  --calcite-input-message-spacing-value: theme(\"spacing.1\");\n  margin-block-start: var(--calcite-input-message-spacing-value);\n}\n\n.calcite-input-message-icon {\n  @apply transition-default pointer-events-none inline-flex flex-shrink-0;\n  margin-inline-end: theme(\"margin.2\");\n}\n\n:host([status=\"invalid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-danger);\n}\n\n:host([status=\"warning\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-warning);\n}\n\n:host([status=\"valid\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-status-success);\n}\n\n:host([status=\"idle\"]) .calcite-input-message-icon {\n  color: var(--calcite-color-brand);\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n3h;\n}\n\n:host([scale=\"m\"]) {\n  @apply text-n2h;\n}\n\n:host([scale=\"l\"]) {\n  @apply text-n1h;\n}\n\n@include base-component();\n","import { FunctionalComponent, h } from \"@stencil/core\";\nimport { JSXBase } from \"@stencil/core/internal\";\nimport { Scale, Status } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\n\ninterface ValidationProps extends JSXBase.HTMLAttributes {\n  scale: Scale;\n  status: Status;\n  icon?: IconNameOrString | boolean;\n  message: string;\n}\n\nexport const CSS = {\n  validationContainer: \"validation-container\",\n};\n\nexport const Validation: FunctionalComponent<ValidationProps> = ({\n  scale,\n  status,\n  icon,\n  message,\n}) => (\n  <div class={CSS.validationContainer}>\n    <calcite-input-message icon={icon} scale={scale} status={status}>\n      {message}\n    </calcite-input-message>\n  </div>\n);\n","export const CSS = {\n  loader: \"loader\",\n  clearButton: \"clear-button\",\n  editingEnabled: \"editing-enabled\",\n  inlineChild: \"inline-child\",\n  inputIcon: \"icon\",\n  prefix: \"prefix\",\n  suffix: \"suffix\",\n  wrapper: \"element-wrapper\",\n  inputWrapper: \"wrapper\",\n  actionWrapper: \"action-wrapper\",\n  resizeIconWrapper: \"resize-icon-wrapper\",\n};\n\nexport const SLOTS = {\n  action: \"action\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { getElementDir, getSlotted, setRequestedIcon } from \"../../utils/dom\";\nimport {\n  connectForm,\n  disconnectForm,\n  FormComponent,\n  HiddenFormInputSlot,\n  internalHiddenInputInputEvent,\n  MutableValidityState,\n  submitForm,\n} from \"../../utils/form\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLabel, disconnectLabel, getLabelText, LabelableComponent } from \"../../utils/label\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport { CSS_UTILITY } from \"../../utils/resources\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { SetValueOrigin } from \"../input/interfaces\";\nimport { Alignment, Scale, Status } from \"../interfaces\";\nimport { getIconScale } from \"../../utils/component\";\nimport { Validation } from \"../functional/Validation\";\nimport { syncHiddenFormInput, TextualInputComponent } from \"../input/common/input\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS, SLOTS } from \"./resources\";\nimport { InputTextMessages } from \"./assets/input-text/t9n\";\n\n/**\n * @slot action - A slot for positioning a button next to the component.\n */\n@Component({\n  tag: \"calcite-input-text\",\n  styleUrl: \"input-text.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class InputText\n  implements\n    LabelableComponent,\n    FormComponent,\n    InteractiveComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    TextualInputComponent,\n    T9nComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Global attributes\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"autofocus\")\n  @Watch(\"enterkeyhint\")\n  @Watch(\"inputmode\")\n  handleGlobalAttributesChanged(): void {\n    forceUpdate(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the text alignment of the component's value. */\n  @Prop({ reflect: true }) alignment: Extract<\"start\" | \"end\", Alignment> = \"start\";\n\n  /**\n   * Adds global prop, missing from Stencil's `HTMLElement` type, see https://github.com/ionic-team/stencil/issues/5726\n   *\n   * @ignore\n   */\n  // eslint-disable-next-line @stencil-community/reserved-member-names\n  @Prop() autofocus: boolean;\n\n  /**\n   * When `true`, a clear button is displayed when the component has a value.\n   */\n  @Prop({ reflect: true }) clearable = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   *\n   * @mdn [disabled](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled)\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  @Watch(\"disabled\")\n  disabledWatcher(): void {\n    this.setDisabledAction();\n  }\n\n  /**\n   * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123\n   *\n   * @futureBreaking kebab-cased attribute will not be supported in a future release\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/reserved-member-names\n  @Prop() enterKeyHint: string;\n\n  /**\n   * The `id` of the form that will be associated with the component.\n   *\n   * When not set, the component will be associated with its ancestor form element, if any.\n   */\n  @Prop({ reflect: true })\n  form: string;\n\n  /**\n   * Specifies an icon to display.\n   *\n   * @futureBreaking Remove boolean type as it is not supported.\n   */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /**\n   * Adds support for kebab-cased attribute, removed in https://github.com/Esri/calcite-design-system/pull/9123\n   *\n   * @futureBreaking kebab-cased attribute will not be supported in a future release\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/reserved-member-names\n  @Prop() inputMode: string;\n\n  /** Accessible name for the component's button or hyperlink. */\n  @Prop() label: string;\n\n  /** When `true`, the component is in the loading state and `calcite-progress` is displayed. */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Specifies the maximum length of text for the component's value.\n   *\n   * @mdn [maxlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#maxlength)\n   */\n  @Prop({ reflect: true }) maxLength: number;\n\n  /**\n   * Specifies the minimum length of text for the component's value.\n   *\n   * @mdn [minlength](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#minlength)\n   */\n  @Prop({ reflect: true }) minLength: number;\n\n  /** Specifies the validation message to display under the component. */\n  @Prop() validationMessage: string;\n\n  /** Specifies the validation icon to display under the component. */\n  @Prop({ reflect: true }) validationIcon: IconNameOrString | boolean;\n\n  /**\n   * The current validation state of the component.\n   *\n   * @readonly\n   * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated in form util when syncing hidden input\n  @Prop({ mutable: true }) validity: MutableValidityState = {\n    valid: false,\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valueMissing: false,\n  };\n\n  /**\n   * Specifies the name of the component.\n   *\n   * Required to pass the component's `value` on form submission.\n   *\n   * @mdn [name](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name)\n   */\n  @Prop({ reflect: true }) name: string;\n\n  /**\n   * Specifies placeholder text for the component.\n   *\n   * @mdn [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder)\n   */\n  @Prop() placeholder: string;\n\n  /** Adds text to the start of the component. */\n  @Prop() prefixText: string;\n\n  /**\n   * When `true`, the component's value can be read, but cannot be modified.\n   *\n   * @mdn [readOnly](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly)\n   */\n  @Prop({ reflect: true }) readOnly = false;\n\n  /** When `true`, the component must have a value in order for the form to submit. */\n  @Prop({ reflect: true }) required = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the status of the input field, which determines message and icons. */\n  @Prop({ reflect: true }) status: Status = \"idle\";\n\n  /**\n   * Specifies the type of content to autocomplete, for use in forms.\n   * Read the native attribute's documentation on MDN for more info.\n   *\n   * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n   */\n  @Prop() autocomplete: string;\n\n  /**\n   * Specifies a regex pattern the component's `value` must match for validation.\n   * Read the native attribute's documentation on MDN for more info.\n   *\n   * @mdn [step](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern)\n   */\n  @Prop() pattern: string;\n\n  /** Adds text to the end of the component.  */\n  @Prop() suffixText: string;\n\n  /**\n   * @internal\n   */\n  @Prop({ mutable: true, reflect: true }) editingEnabled = false;\n\n  /** The component's value. */\n  @Prop({ mutable: true }) value = \"\";\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: InputTextMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<InputTextMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  @Watch(\"value\")\n  valueWatcher(newValue: string, previousValue: string): void {\n    if (!this.userChangedValue) {\n      this.setValue({\n        origin: \"direct\",\n        previousValue,\n        value: !newValue ? \"\" : newValue,\n      });\n    }\n    this.userChangedValue = false;\n  }\n\n  @Watch(\"icon\")\n  updateRequestedIcon(): void {\n    this.requestedIcon = setRequestedIcon({}, this.icon, \"text\");\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteInputTextElement;\n\n  labelEl: HTMLCalciteLabelElement;\n\n  formEl: HTMLFormElement;\n\n  defaultValue: InputText[\"value\"];\n\n  inlineEditableEl: HTMLCalciteInlineEditableElement;\n\n  /** keep track of the rendered child */\n  private childEl?: HTMLInputElement;\n\n  get isClearable(): boolean {\n    return this.clearable && this.value.length > 0;\n  }\n\n  private previousEmittedValue: string;\n\n  private previousValue: string;\n\n  private previousValueOrigin: SetValueOrigin = \"initial\";\n\n  /** the computed icon to render */\n  private requestedIcon?: IconNameOrString;\n\n  mutationObserver = createObserver(\"mutation\", () => this.setDisabledAction());\n\n  private userChangedValue = false;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: InputTextMessages;\n\n  @State() slottedActionElDisabledInternally = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLocalized(this);\n    connectMessages(this);\n\n    this.inlineEditableEl = this.el.closest(\"calcite-inline-editable\");\n    if (this.inlineEditableEl) {\n      this.editingEnabled = this.inlineEditableEl.editingEnabled || false;\n    }\n\n    connectLabel(this);\n    connectForm(this);\n    this.mutationObserver?.observe(this.el, { childList: true });\n    this.setDisabledAction();\n    this.el.addEventListener(internalHiddenInputInputEvent, this.onHiddenFormInputInput);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectLabel(this);\n    disconnectForm(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n\n    this.mutationObserver?.disconnect();\n    this.el.removeEventListener(internalHiddenInputInputEvent, this.onHiddenFormInputInput);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    this.requestedIcon = setRequestedIcon({}, this.icon, \"text\");\n    await setUpMessages(this);\n\n    this.setPreviousEmittedValue(this.value);\n    this.setPreviousValue(this.value);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * @internal\n   */\n  @Event() calciteInternalInputTextFocus: EventEmitter<{\n    element: HTMLInputElement;\n    value: string;\n  }>;\n\n  /**\n   * @internal\n   */\n  @Event() calciteInternalInputTextBlur: EventEmitter<{ element: HTMLInputElement; value: string }>;\n\n  /**\n   * Fires each time a new value is typed.\n   */\n  @Event({ cancelable: true }) calciteInputTextInput: EventEmitter<void>;\n\n  /**\n   * Fires each time a new value is typed and committed.\n   */\n  @Event() calciteInputTextChange: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.childEl?.focus();\n  }\n\n  /** Selects the text of the component's `value`. */\n  @Method()\n  async selectText(): Promise<void> {\n    this.childEl?.select();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  keyDownHandler = (event: KeyboardEvent): void => {\n    if (this.readOnly || this.disabled || event.defaultPrevented) {\n      return;\n    }\n\n    if (this.isClearable && event.key === \"Escape\") {\n      this.clearInputTextValue(event);\n      event.preventDefault();\n    }\n    if (event.key === \"Enter\") {\n      if (submitForm(this)) {\n        event.preventDefault();\n      }\n    }\n  };\n\n  onLabelClick(): void {\n    this.setFocus();\n  }\n\n  private clearInputTextValue = (nativeEvent: KeyboardEvent | MouseEvent): void => {\n    this.setValue({\n      committing: true,\n      nativeEvent,\n      origin: \"user\",\n      value: \"\",\n    });\n  };\n\n  private emitChangeIfUserModified = (): void => {\n    if (this.previousValueOrigin === \"user\" && this.value !== this.previousEmittedValue) {\n      this.calciteInputTextChange.emit();\n      this.setPreviousEmittedValue(this.value);\n    }\n  };\n\n  private inputTextBlurHandler = () => {\n    this.calciteInternalInputTextBlur.emit({\n      element: this.childEl,\n      value: this.value,\n    });\n\n    this.emitChangeIfUserModified();\n  };\n\n  private clickHandler = (event: MouseEvent): void => {\n    if (this.disabled) {\n      return;\n    }\n\n    const slottedActionEl = getSlotted(this.el, \"action\");\n    if (event.target !== slottedActionEl) {\n      this.setFocus();\n    }\n  };\n\n  private inputTextFocusHandler = (): void => {\n    this.calciteInternalInputTextFocus.emit({\n      element: this.childEl,\n      value: this.value,\n    });\n  };\n\n  private inputTextInputHandler = (nativeEvent: InputEvent): void => {\n    if (this.disabled || this.readOnly) {\n      return;\n    }\n    this.setValue({\n      nativeEvent,\n      origin: \"user\",\n      value: (nativeEvent.target as HTMLInputElement).value,\n    });\n  };\n\n  private inputTextKeyDownHandler = (event: KeyboardEvent): void => {\n    if (this.disabled || this.readOnly) {\n      return;\n    }\n    if (event.key === \"Enter\") {\n      this.emitChangeIfUserModified();\n    }\n  };\n\n  syncHiddenFormInput(input: HTMLInputElement): void {\n    syncHiddenFormInput(\"text\", this, input);\n  }\n\n  private onHiddenFormInputInput = (event: Event): void => {\n    if ((event.target as HTMLInputElement).name === this.name) {\n      this.setValue({\n        value: (event.target as HTMLInputElement).value,\n        origin: \"direct\",\n      });\n    }\n    this.setFocus();\n    event.stopPropagation();\n  };\n\n  private setChildElRef = (el) => {\n    this.childEl = el;\n  };\n\n  private setDisabledAction(): void {\n    const slottedActionEl = getSlotted(this.el, \"action\");\n\n    if (!slottedActionEl) {\n      return;\n    }\n\n    if (this.disabled) {\n      if (slottedActionEl.getAttribute(\"disabled\") == null) {\n        this.slottedActionElDisabledInternally = true;\n      }\n      slottedActionEl.setAttribute(\"disabled\", \"\");\n    } else if (this.slottedActionElDisabledInternally) {\n      slottedActionEl.removeAttribute(\"disabled\");\n      this.slottedActionElDisabledInternally = false;\n    }\n  }\n\n  private setInputValue = (newInputValue: string): void => {\n    if (!this.childEl) {\n      return;\n    }\n    this.childEl.value = newInputValue;\n  };\n\n  private setPreviousEmittedValue = (value: string): void => {\n    this.previousEmittedValue = value;\n  };\n\n  private setPreviousValue = (value: string): void => {\n    this.previousValue = value;\n  };\n\n  private setValue = ({\n    committing = false,\n    nativeEvent,\n    origin,\n    previousValue,\n    value,\n  }: {\n    committing?: boolean;\n    nativeEvent?: MouseEvent | KeyboardEvent | InputEvent;\n    origin: SetValueOrigin;\n    previousValue?: string;\n    value: string;\n  }): void => {\n    this.setPreviousValue(previousValue ?? this.value);\n    this.previousValueOrigin = origin;\n    this.userChangedValue = origin === \"user\" && value !== this.value;\n    this.value = value;\n\n    if (origin === \"direct\") {\n      this.setInputValue(value);\n      this.setPreviousEmittedValue(value);\n    }\n\n    if (nativeEvent) {\n      const calciteInputTextInputEvent = this.calciteInputTextInput.emit();\n\n      if (calciteInputTextInputEvent.defaultPrevented) {\n        this.value = this.previousValue;\n      } else if (committing) {\n        this.emitChangeIfUserModified();\n      }\n    }\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const dir = getElementDir(this.el);\n    const loader = (\n      <div class={CSS.loader}>\n        <calcite-progress label={this.messages.loading} type=\"indeterminate\" />\n      </div>\n    );\n\n    const inputClearButton = (\n      <button\n        aria-label={this.messages.clear}\n        class={CSS.clearButton}\n        disabled={this.disabled || this.readOnly}\n        onClick={this.clearInputTextValue}\n        tabIndex={-1}\n        type=\"button\"\n      >\n        <calcite-icon icon=\"x\" scale={getIconScale(this.scale)} />\n      </button>\n    );\n    const iconEl = (\n      <calcite-icon\n        class={CSS.inputIcon}\n        flipRtl={this.iconFlipRtl}\n        icon={this.requestedIcon}\n        scale={getIconScale(this.scale)}\n      />\n    );\n    const prefixText = <div class={CSS.prefix}>{this.prefixText}</div>;\n    const suffixText = <div class={CSS.suffix}>{this.suffixText}</div>;\n\n    const childEl = (\n      <input\n        aria-label={getLabelText(this)}\n        autocomplete={this.autocomplete}\n        autofocus={this.el.autofocus ? true : null}\n        class={{\n          [CSS.editingEnabled]: this.editingEnabled,\n          [CSS.inlineChild]: !!this.inlineEditableEl,\n        }}\n        defaultValue={this.defaultValue}\n        disabled={this.disabled ? true : null}\n        enterKeyHint={this.el.enterKeyHint || this.el.getAttribute(\"enterkeyhint\")}\n        inputMode={this.el.inputMode || this.el.getAttribute(\"inputmode\")}\n        maxLength={this.maxLength}\n        minLength={this.minLength}\n        name={this.name}\n        onBlur={this.inputTextBlurHandler}\n        onFocus={this.inputTextFocusHandler}\n        onInput={this.inputTextInputHandler}\n        onKeyDown={this.inputTextKeyDownHandler}\n        pattern={this.pattern}\n        placeholder={this.placeholder || \"\"}\n        readOnly={this.readOnly}\n        ref={this.setChildElRef}\n        required={this.required ? true : null}\n        tabIndex={this.disabled || (this.inlineEditableEl && !this.editingEnabled) ? -1 : null}\n        type=\"text\"\n        value={this.value}\n      />\n    );\n\n    return (\n      <Host onClick={this.clickHandler} onKeyDown={this.keyDownHandler}>\n        <InteractiveContainer disabled={this.disabled}>\n          <div class={{ [CSS.inputWrapper]: true, [CSS_UTILITY.rtl]: dir === \"rtl\" }}>\n            {this.prefixText ? prefixText : null}\n            <div class={CSS.wrapper}>\n              {childEl}\n              {this.isClearable ? inputClearButton : null}\n              {this.requestedIcon ? iconEl : null}\n              {this.loading ? loader : null}\n            </div>\n            <div class={CSS.actionWrapper}>\n              <slot name={SLOTS.action} />\n            </div>\n            {this.suffixText ? suffixText : null}\n            <HiddenFormInputSlot component={this} />\n          </div>\n          {this.validationMessage && this.status === \"invalid\" ? (\n            <Validation\n              icon={this.validationIcon}\n              message={this.validationMessage}\n              scale={this.scale}\n              status={this.status}\n            />\n          ) : null}\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n",":host {\n  @apply block;\n}\n\n// scales\n:host([scale=\"s\"]) {\n  & input {\n    padding-inline-start: theme(\"spacing.2\");\n    padding-inline-end: var(--calcite-internal-input-text-input-padding-inline-end, theme(\"spacing.2\"));\n  }\n\n  & input,\n  & .prefix,\n  & .suffix {\n    @apply text-n2h h-6;\n  }\n\n  & .prefix,\n  & .suffix {\n    @apply px-2;\n  }\n\n  & .action-wrapper calcite-button,\n  & .action-wrapper calcite-button button {\n    @apply h-6;\n  }\n\n  & .clear-button {\n    min-block-size: theme(\"spacing.6\");\n    min-inline-size: theme(\"spacing.6\");\n  }\n}\n\n:host([scale=\"m\"]) {\n  & input {\n    padding-inline-start: theme(\"spacing.3\");\n    padding-inline-end: var(--calcite-internal-input-text-input-padding-inline-end, theme(\"spacing.3\"));\n  }\n\n  & input,\n  & .prefix,\n  & .suffix {\n    @apply text-n1h h-8;\n  }\n\n  & .prefix,\n  & .suffix {\n    @apply px-3;\n  }\n\n  & .action-wrapper calcite-button,\n  & .action-wrapper calcite-button button {\n    @apply h-8;\n  }\n\n  & .clear-button {\n    min-block-size: theme(\"spacing.8\");\n    min-inline-size: theme(\"spacing.8\");\n  }\n}\n\n:host([scale=\"l\"]) {\n  & input {\n    padding-inline-start: theme(\"spacing.4\");\n    padding-inline-end: var(--calcite-internal-input-text-input-padding-inline-end, theme(\"spacing.4\"));\n  }\n\n  & input,\n  & .prefix,\n  & .suffix {\n    @apply text-0h h-11;\n  }\n\n  & .prefix,\n  & .suffix {\n    @apply px-4;\n  }\n\n  & .action-wrapper calcite-button,\n  & .action-wrapper calcite-button button {\n    @apply h-11;\n  }\n\n  & .clear-button {\n    min-block-size: theme(\"spacing.11\");\n    min-inline-size: theme(\"spacing.11\");\n  }\n}\n\n@include disabled();\n\ninput {\n  transition:\n    var(--calcite-animation-timing),\n    block-size 0,\n    outline-offset 0s;\n  -webkit-appearance: none;\n  @apply bg-foreground-1\n    box-border\n    flex\n    flex-1\n    font-inherit\n    font-normal\n    m-0\n    max-h-full\n    max-w-full\n    relative\n    rounded-none\n    text-color-1\n    text-ellipsis\n    w-full;\n\n  &:placeholder-shown {\n    @apply text-ellipsis;\n  }\n}\n\n// states\ninput {\n  @apply text-color-1\n    border-color-input\n    border\n    border-solid;\n  &::placeholder,\n  &:-ms-input-placeholder,\n  &::-ms-input-placeholder {\n    @apply text-color-3 font-normal;\n  }\n}\ninput:focus {\n  @apply border-color-brand text-color-1;\n}\ninput[readonly] {\n  @apply bg-background font-medium;\n}\ninput[readonly]:focus {\n  @apply text-color-1;\n}\ncalcite-icon {\n  @apply text-color-3;\n}\n\n//focus\n\ninput {\n  @apply focus-base;\n}\ninput:focus {\n  @apply focus-inset;\n}\n\n:host([status=\"invalid\"]) {\n  & input {\n    @apply border-color-danger;\n  }\n  & input:focus {\n    @apply focus-inset-danger;\n  }\n}\n\n// ICONS\n\n// position icons\n\n:host([scale=\"s\"]) .icon {\n  inset-inline-start: theme(\"spacing.2\");\n}\n\n:host([scale=\"m\"]) .icon {\n  inset-inline-start: theme(\"spacing.3\");\n}\n\n:host([scale=\"l\"]) .icon {\n  inset-inline-start: theme(\"spacing.4\");\n}\n\n// position placeholder/value text in relation to icons\n\n:host([icon][scale=\"s\"]) input {\n  padding-inline-start: theme(\"padding.8\");\n}\n\n:host([icon][scale=\"m\"]) input {\n  padding-inline-start: theme(\"padding.10\");\n}\n\n:host([icon][scale=\"l\"]) input {\n  padding-inline-start: theme(\"padding.14\");\n}\n\n// positioning wrapper for icon and loader\n\n.element-wrapper {\n  @apply relative\n    order-3\n    inline-flex\n    flex-1\n    items-center;\n}\n\n.icon {\n  @apply transition-default\n    pointer-events-none\n    absolute\n    block\n\n    z-default; // needed for firefox to display the icon properly\n}\n\n// hide browser default clear\n\ninput[type=\"text\"]::-ms-clear,\ninput[type=\"text\"]::-ms-reveal {\n  @apply hidden\n    h-0\n    w-0;\n}\n\n.clear-button {\n  pointer-events: initial;\n  @apply focus-base\n    border-color-input\n    bg-foreground-1\n    order-4\n    m-0\n    box-border\n    flex\n    min-h-full\n    cursor-pointer\n    items-center\n    justify-center\n    self-stretch\n    border\n    border-solid;\n\n  border-inline-start-width: theme(\"borderWidth.0\");\n\n  &:hover {\n    @apply bg-foreground-2 transition-default;\n    calcite-icon {\n      @apply text-color-1 transition-default;\n    }\n  }\n  &:active {\n    @apply bg-foreground-3;\n    calcite-icon {\n      @apply text-color-1;\n    }\n  }\n  &:focus {\n    @apply focus-inset;\n  }\n  &:disabled {\n    @apply opacity-disabled;\n  }\n}\n\n// loading\n.loader {\n  inset-block-start: 1px;\n  inset-inline: 1px;\n  @apply pointer-events-none\n    absolute\n    block;\n}\n\n// slotted action\n.action-wrapper {\n  @apply order-7 flex;\n}\n\n// prefix and suffix\n.prefix,\n.suffix {\n  @apply border-color-input\n    bg-background\n    text-color-2\n    box-border\n    flex\n    h-auto\n    min-h-full\n    select-none\n    content-center\n    items-center\n    break-words\n    border\n    border-solid\n    font-medium\n    leading-none;\n}\n\n.prefix {\n  @apply order-2;\n  border-inline-end-width: theme(\"borderWidth.0\");\n}\n.suffix {\n  @apply order-5;\n  border-inline-start-width: theme(\"borderWidth.0\");\n}\n\n// alignment type\n:host([alignment=\"start\"]) {\n  & input {\n    text-align: start;\n  }\n}\n\n:host([alignment=\"end\"]) {\n  & input {\n    text-align: end;\n  }\n}\n\n.wrapper {\n  @apply relative\n    flex\n    flex-row\n    items-center;\n}\n\n:host(.no-bottom-border) input {\n  @apply border-b-0;\n}\n\n:host(.border-top-color-one) input {\n  @apply border-t-color-1;\n}\n\n// input needed for higher specificity of these overrides\ninput {\n  &.inline-child {\n    @apply transition-default bg-transparent;\n    .editing-enabled {\n      background-color: inherit;\n    }\n  }\n\n  &.inline-child:not(.editing-enabled) {\n    @apply border-color-transparent\n    flex\n    cursor-pointer text-ellipsis;\n    padding-inline-start: 0;\n  }\n}\n\n@include form-validation-message();\n@include hidden-form-input();\n@include base-component();\n","export type InputComponent = NumericInputComponent | TextualInputComponent | DateTimeInputComponent;\n\nexport interface DateTimeInputComponent {\n  min: string;\n  max: string;\n}\n\nexport interface NumericInputComponent {\n  min: number;\n  max: number;\n  step: number | \"any\";\n}\n\nexport interface TextualInputComponent {\n  pattern?: string;\n  minLength: number;\n  maxLength: number;\n}\n\n/**\n * Exported for testing purposes only\n */\nexport const minMaxStepTypes = [\"date\", \"datetime-local\", \"month\", \"number\", \"range\", \"time\", \"week\"];\n\n/**\n * Exported for testing purposes only\n */\nexport const patternTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"url\"];\n\n/**\n * Exported for testing purposes only\n */\nexport const minMaxLengthTypes = [\"email\", \"password\", \"search\", \"tel\", \"text\", \"textarea\", \"url\"];\n\nfunction updateConstraintValidation(\n  inputComponent: InputComponent,\n  input: HTMLInputElement,\n  propName: string,\n  matchesType: boolean,\n): void {\n  const attributeName = propName.toLowerCase();\n  const value = inputComponent[propName];\n\n  if (matchesType && value != null) {\n    input.setAttribute(attributeName, `${value}`);\n  } else {\n    // we remove the attribute to ensure validation-constraints are properly reset\n    input.removeAttribute(attributeName);\n  }\n}\n\n/**\n * Synchronizes the hidden form input with the validation-related input properties.\n *\n * Note: loss of precision is expected due to the hidden input's value and validation-constraint props being strings.\n *\n * @param type - The input type.\n * @param inputComponent\n * @param hiddenFormInput\n */\nexport function syncHiddenFormInput(\n  type: HTMLInputElement[\"type\"] | \"textarea\",\n  inputComponent: InputComponent,\n  hiddenFormInput: HTMLInputElement,\n): void {\n  hiddenFormInput.type = type === \"textarea\" ? \"text\" : type;\n\n  const isMinMaxStepType = minMaxStepTypes.includes(type);\n  const numericInputComponent = inputComponent as NumericInputComponent;\n\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"min\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"max\", isMinMaxStepType);\n  updateConstraintValidation(numericInputComponent, hiddenFormInput, \"step\", isMinMaxStepType);\n\n  const isMinMaxLengthType = minMaxLengthTypes.includes(type);\n\n  const textualInputComponent = inputComponent as TextualInputComponent;\n\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"minLength\", isMinMaxLengthType);\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"maxLength\", isMinMaxLengthType);\n\n  const isPatternType = patternTypes.includes(type);\n\n  updateConstraintValidation(textualInputComponent, hiddenFormInput, \"pattern\", isPatternType);\n}\n"],"names":["Progress","proxyCustomElement","HTMLElement","render","barStyles","this","type","width","value","dir","getElementDir","el","h","key","label","text","role","class","bar","indeterminate","CSS_UTILITY","rtl","reversed","style","StatusIconDefaults","valid","invalid","idle","InputMessage","handleIconEl","requestedIcon","setRequestedIcon","icon","status","connectedCallback","hidden","Host","renderIcon","iconName","flipRtl","iconFlipRtl","scale","CSS","Validation","_ref","message","SLOTS","InputText","previousValueOrigin","mutationObserver","createObserver","setDisabledAction","userChangedValue","keyDownHandler","event","readOnly","disabled","defaultPrevented","isClearable","clearInputTextValue","preventDefault","submitForm","nativeEvent","setValue","committing","origin","emitChangeIfUserModified","previousEmittedValue","calciteInputTextChange","emit","setPreviousEmittedValue","inputTextBlurHandler","calciteInternalInputTextBlur","element","childEl","clickHandler","slottedActionEl","getSlotted","target","setFocus","inputTextFocusHandler","calciteInternalInputTextFocus","inputTextInputHandler","inputTextKeyDownHandler","onHiddenFormInputInput","name","stopPropagation","setChildElRef","setInputValue","newInputValue","setPreviousValue","previousValue","calciteInputTextInput","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","handleGlobalAttributesChanged","forceUpdate","disabledWatcher","onMessagesChange","valueWatcher","newValue","updateRequestedIcon","clearable","length","effectiveLocaleChange","updateMessages","effectiveLocale","connectInteractive","connectLocalized","connectMessages","inlineEditableEl","closest","editingEnabled","connectLabel","connectForm","observe","childList","addEventListener","internalHiddenInputInputEvent","disconnectedCallback","disconnectInteractive","disconnectLabel","disconnectForm","disconnectLocalized","disconnectMessages","disconnect","removeEventListener","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","componentFocusable","focus","selectText","select","onLabelClick","syncHiddenFormInput","input","getAttribute","slottedActionElDisabledInternally","setAttribute","removeAttribute","loader","messages","loading","inputClearButton","clear","onClick","tabIndex","getIconScale","iconEl","prefixText","suffixText","getLabelText","autocomplete","autofocus","defaultValue","enterKeyHint","inputMode","maxLength","minLength","onBlur","onFocus","onInput","onKeyDown","pattern","placeholder","ref","required","InteractiveContainer","HiddenFormInputSlot","component","validationMessage","validationIcon","minMaxStepTypes","patternTypes","minMaxLengthTypes","updateConstraintValidation","inputComponent","propName","matchesType","attributeName","toLowerCase","hiddenFormInput","isMinMaxStepType","includes","numericInputComponent","isMinMaxLengthType","textualInputComponent"],"sourceRoot":""}