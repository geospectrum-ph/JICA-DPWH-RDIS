{"version":3,"file":"static/js/6201.13a9bda5.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/core/views/2d/engine/webgl/VertexStream.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushOverlay.js","../node_modules/@arcgis/core/views/2d/engine/brushes.js","../node_modules/@arcgis/core/views/2d/engine/webgl/collisions/LabelMetric.js","../node_modules/@arcgis/core/views/webgl/ProgramTemplate.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/utils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/DisplayEntity.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js","../node_modules/@arcgis/core/views/2d/engine/webgl/Mesh2D.js","../node_modules/@arcgis/core/views/2d/engine/webgl/ClippingInfo.js","../node_modules/@arcgis/core/views/2d/engine/webgl/WGLContainer.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushBitmap.js","../node_modules/@arcgis/core/views/2d/engine/webgl/PooledUint32Array.js","../node_modules/@arcgis/core/views/2d/engine/webgl/DisplayRecord.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushTileDebugInfo.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/FreeList.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js","../node_modules/@arcgis/core/views/2d/engine/webgl/util/serializationUtils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/mesh/dataViewUtils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js","../node_modules/@arcgis/core/views/2d/engine/webgl/AFeatureTile.js","../node_modules/@arcgis/core/views/2d/engine/webgl/Utils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js","../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureDisplayList.js","../node_modules/@arcgis/core/views/2d/engine/webgl/ReshufflePlan.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/Buffer.js","../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/MappedMesh.js","../node_modules/@arcgis/core/views/2d/engine/webgl/util/Reader.js","../node_modules/@arcgis/core/views/2d/engine/webgl/mesh/meshDebugUtils.js","../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureTile.js","../node_modules/@arcgis/core/views/2d/engine/webgl/number.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{vertexLayoutHash as t}from\"./shaderGraph/techniques/mesh/utils.js\";import{BufferObject as e}from\"../../../webgl/BufferObject.js\";import{DataType as r,Usage as s,PrimitiveType as i}from\"../../../webgl/enums.js\";import{VertexArrayObject as o}from\"../../../webgl/VertexArrayObject.js\";import{VertexElementDescriptor as a}from\"../../../webgl/VertexElementDescriptor.js\";class h{constructor(i,h){this._rctx=i,this._attributes=[{name:\"position\",offset:0,type:r.SHORT,count:2}],this.layout={hash:t(this._attributes),attributes:this._attributes,stride:4},this._vertexBuffer=e.createVertex(i,s.STATIC_DRAW,new Uint16Array(h)),this._vao=new o(i,new Map([[\"a_position\",0]]),{geometry:[new a(\"a_position\",2,r.SHORT,0,4)]},{geometry:this._vertexBuffer}),this._count=h.length/2}bind(){this._rctx.bindVAO(this._vao)}unbind(){this._rctx.bindVAO(null)}dispose(){this._vao.dispose()}draw(){this._rctx.bindVAO(this._vao),this._rctx.drawArrays(i.TRIANGLE_STRIP,0,this._count)}}export{h as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{createProgramDescriptor as e}from\"../Utils.js\";import t from\"./WGLBrush.js\";import{background as s}from\"../shaders/BackgroundPrograms.js\";import{StencilOperation as o,CompareFunction as i,PrimitiveType as a,DataType as n}from\"../../../../webgl/enums.js\";import{createProgram as l}from\"../../../../webgl/ProgramTemplate.js\";const m=()=>e(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:n.SHORT}]});class p extends t{constructor(){super(...arguments),this._color=r(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:r}){r.setStencilTestEnabled(!0),r.setBlendingEnabled(!1),r.setFaceCullingEnabled(!1),r.setColorMask(!1,!1,!1,!1),r.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),r.setStencilWriteMask(255),r.setStencilFunction(i.ALWAYS,0,255)}draw(r,e){const{context:t,state:o,requestRender:i,allowDelayedRender:p}=r,c=m(),d=e.getVAO(t,o,c.attributes,c.bufferLayouts);null!=d.indexBuffer&&(this._program||(this._program=l(t,s)),!p||null==i||this._program.compiled?(t.useProgram(this._program),this._program.setUniform2fv(\"u_coord_range\",[1,1]),this._program.setUniform4fv(\"u_color\",this._color),this._program.setUniformMatrix3fv(\"u_dvsMat3\",o.displayMat3),t.bindVAO(d),t.drawElements(a.TRIANGLES,d.indexBuffer.size,n.UNSIGNED_INT,0),t.bindVAO()):i())}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{textureBindingBitmap as e}from\"../definitions.js\";import{createProgramDescriptor as t}from\"../Utils.js\";import r from\"./WGLBrush.js\";import{BlendFactor as n,CompareFunction as o,DataType as s}from\"../../../../webgl/enums.js\";const i=()=>t(\"overlay\",{geometry:[{location:0,name:\"a_pos\",count:2,type:s.FLOAT}],tex:[{location:1,name:\"a_uv\",count:2,type:s.UNSIGNED_SHORT}]});class a extends r{constructor(){super(...arguments),this._desc={vsPath:\"overlay/overlay\",fsPath:\"overlay/overlay\",attributes:new Map([[\"a_pos\",0],[\"a_uv\",1]])}}dispose(){}prepareState({context:e}){e.setBlendingEnabled(!0),e.setColorMask(!0,!0,!0,!0),e.setBlendFunctionSeparate(n.ONE,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0),e.setStencilFunction(o.GREATER,255,255)}draw(t,r){const{context:n,painter:o,requestRender:s,allowDelayedRender:a}=t;if(!r.isReady)return;const{computedOpacity:u,dvsMat3:d,isWrapAround:c,perspectiveTransform:m,texture:f,wrapAroundShift:l}=r;t.timeline.begin(this.name);const p=o.materialManager.getProgram(this._desc);if(a&&null!=s&&!p.compiled)return void s();const _=i(),v=r.getVAO(n,_.bufferLayouts,_.attributes);v&&(n.bindVAO(v),n.useProgram(p),n.bindTexture(f,e),p.setUniformMatrix3fv(\"u_dvsMat3\",d),p.setUniform1i(\"u_texture\",e),p.setUniform1f(\"u_opacity\",u),p.setUniform2fv(\"u_perspective\",m),p.setUniform2fv(\"u_texSize\",r.textureSize),p.setUniform1f(\"u_wrapAroundShift\",0),r.draw(t.context),c&&(p.setUniform1f(\"u_wrapAroundShift\",l),r.draw(t.context)),n.bindVAO(),t.timeline.end(this.name))}}export{a as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport r from\"./webgl/brushes/BrushBitmap.js\";import s from\"./webgl/brushes/BrushClip.js\";import e from\"./webgl/brushes/BrushOverlay.js\";import l from\"./webgl/brushes/WGLBrushStencil.js\";import o from\"./webgl/brushes/WGLBrushTileDebugInfo.js\";import{WGLBrushVTLBackground as b}from\"./webgl/brushes/WGLBrushVTLBackground.js\";import{WGLBrushVTLCircle as i}from\"./webgl/brushes/WGLBrushVTLCircle.js\";import{WGLBrushVTLFill as m}from\"./webgl/brushes/WGLBrushVTLFill.js\";import{WGLBrushVTLLine as u}from\"./webgl/brushes/WGLBrushVTLLine.js\";import{WGLBrushVTLSymbol as t}from\"./webgl/brushes/WGLBrushVTLSymbol.js\";const h={clip:s,stencil:l,bitmap:r,overlay:e,tileDebugInfo:o,vtlBackground:b,vtlFill:m,vtlLine:u,vtlCircle:i,vtlSymbol:t};export{h as brushes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from\"./BoundingBox.js\";import{serializeList as i,deserializeList as t}from\"../util/serializationUtils.js\";class r{constructor(e,i,t,r,s,n,o,a,h=[]){this.entityTexel=e,this.anchorX=i,this.anchorY=t,this.directionX=r,this.directionY=s,this.maxScale=n,this.minScale=o,this.referenceBounds=a,this.bounds=h}serialize(e){e.push(this.entityTexel),e.writeF32(this.anchorX),e.writeF32(this.anchorY),e.writeF32(this.directionX),e.writeF32(this.directionY),e.writeF32(this.maxScale),e.writeF32(this.minScale),null===this.referenceBounds?(e.writeF32(0),e.writeF32(0),e.writeF32(0)):(e.writeF32(this.referenceBounds.size),e.writeF32(this.referenceBounds.offsetX),e.writeF32(this.referenceBounds.offsetY)),i(e,this.bounds)}static deserialize(i){const s=i.readInt32(),n=i.readF32(),o=i.readF32(),a=i.readF32(),h=i.readF32(),d=i.readF32(),c=i.readF32(),F=i.readF32(),f=i.readF32(),l=i.readF32(),u=t(i,e)??[];return new r(s,n,o,a,h,d,c,{size:F,offsetX:f,offsetY:l},u)}}export{r as LabelMetric};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{Program as r}from\"./Program.js\";function e(e,t,a=\"\"){return new r(e,a+t.shaders.vertexShader,a+t.shaders.fragmentShader,t.attributes)}export{e as createProgram};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{numericHash as e}from\"../../../../../../../core/string.js\";function t(t){const o=t.map((({name:e,count:t,type:o})=>`${e}.${t}.${o}`)).join(\",\");return e(o)}function o(e,t,r,i,n,a,c){if(e.primitiveName===t)for(const o in e)if(o===r){let t=i?.readWithDefault(n,a,e[o]&&c);return\"text\"===e.type&&(t=t.toString()),void(e[o]=t)}if(\"type\"in e&&null!=e.type)switch(e.type){case\"CIMPointSymbol\":case\"CIMLineSymbol\":case\"CIMPolygonSymbol\":if(e.symbolLayers)for(const s of e.symbolLayers)o(s,t,r,i,n,a,c);break;case\"CIMHatchFill\":e.lineSymbol&&o(e.lineSymbol,t,r,i,n,a,c);break;case\"CIMSolidStroke\":case\"CIMSolidFill\":case\"CIMVectorMarker\":if(\"CIMVectorMarker\"===e.type&&e.markerGraphics)for(const s of e.markerGraphics)o(s,t,r,i,n,a,c),o(s.symbol,t,r,i,n,a,c)}}const r=400;function i(e){const t=e.width;return null!=e.effects?r:Math.max(1.25*t,8)}export{o as applyComputedValue,i as getLineClippingMargin,t as vertexLayoutHash};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport t from\"./DisplayRecord.js\";import{serializeList as r,deserializeList as i}from\"./util/serializationUtils.js\";class s{constructor(t,r){this.id=t,this.sortKey=r,this.records=[]}serialize(t){return t.push(this.id),t.writeF32(this.sortKey),r(t,this.records),t}static deserialize(r){const e=r.readInt32(),o=r.readF32(),a=new s(e,o);return a.records=i(r,t)??[],a}}s.byteSizeHint=2*Uint32Array.BYTES_PER_ELEMENT+t.byteSizeHint;export{s as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport r from\"./shaderRepository.js\";import{ShaderCompiler as e}from\"../../../../../webgl/ShaderCompiler.js\";function o(r){return function(e){let o=r;return e.split(\"/\").forEach((r=>{o&&(o=o[r])})),o}}const t=new e(o(r));function n(r){return t.resolveIncludes(r)}export{n as resolveIncludes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nconst e={background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\ngl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nlowp vec4 color = texture2D(u_tex, v_uv);\\ngl_FragColor = color * u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_pos , 0.0, 1.0);\\nv_uv = a_tex;\\n}\"},blend:{\"blend.frag\":\"precision mediump float;\\nuniform sampler2D u_layerTexture;\\nuniform lowp float u_opacity;\\nuniform lowp float u_inFadeOpacity;\\n#ifndef NORMAL\\nuniform sampler2D u_backbufferTexture;\\n#endif\\nvarying mediump vec2 v_uv;\\nfloat rgb2v(in vec3 c) {\\nreturn max(c.x, max(c.y, c.z));\\n}\\nvec3 rgb2hsv(in vec3 c) {\\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\nfloat d = q.x - min(q.w, q.y);\\nfloat e = 1.0e-10;\\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(in vec3 c) {\\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec3 tint(in vec3 Cb, in vec3 Cs) {\\nfloat vIn = rgb2v(Cb);\\nvec3 hsvTint = rgb2hsv(Cs);\\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\\nreturn hsv2rgb(hsvOut);\\n}\\nfloat overlay(in float Cb, in float Cs) {\\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\\n}\\nfloat colorDodge(in float Cb, in float Cs) {\\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\\n}\\nfloat colorBurn(in float Cb, in float Cs) {\\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\\n}\\nfloat hardLight(in float Cb, in float Cs) {\\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\\n}\\nfloat reflectBlend(in float Cb, in float Cs) {\\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\\n}\\nfloat softLight(in float Cb, in float Cs) {\\nif (Cs <= 0.5) {\\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\\n}\\nif (Cb <= 0.25) {\\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\\n}\\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\\n}\\nfloat vividLight(in float Cb, in float Cs) {\\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\\n}\\nfloat minv3(in vec3 c) {\\nreturn min(min(c.r, c.g), c.b);\\n}\\nfloat maxv3(in vec3 c) {\\nreturn max(max(c.r, c.g), c.b);\\n}\\nfloat lumv3(in vec3 c) {\\nreturn dot(c, vec3(0.3, 0.59, 0.11));\\n}\\nfloat satv3(vec3 c) {\\nreturn maxv3(c) - minv3(c);\\n}\\nvec3 clipColor(vec3 color) {\\nfloat lum = lumv3(color);\\nfloat mincol = minv3(color);\\nfloat maxcol = maxv3(color);\\nif (mincol < 0.0) {\\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\\n}\\nif (maxcol > 1.0) {\\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\\n}\\nreturn color;\\n}\\nvec3 setLum(vec3 cbase, vec3 clum) {\\nfloat lbase = lumv3(cbase);\\nfloat llum = lumv3(clum);\\nfloat ldiff = llum - lbase;\\nvec3 color = cbase + vec3(ldiff);\\nreturn clipColor(color);\\n}\\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\\n{\\nfloat minbase = minv3(cbase);\\nfloat sbase = satv3(cbase);\\nfloat ssat = satv3(csat);\\nvec3 color;\\nif (sbase > 0.0) {\\ncolor = (cbase - minbase) * ssat / sbase;\\n} else {\\ncolor = vec3(0.0);\\n}\\nreturn setLum(color, clum);\\n}\\nvoid main() {\\nvec4 src = texture2D(u_layerTexture, v_uv);\\n#ifdef NORMAL\\ngl_FragColor = src *  u_opacity;\\n#else\\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\\nfloat as = u_opacity * src.a;\\nfloat ab = dst.a;\\n#ifdef DESTINATION_OVER\\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\\n#endif\\n#ifdef SOURCE_IN\\nvec4 color = vec4(as * Cs * ab, as * ab);\\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\\ngl_FragColor = color + fadeColor;\\n#endif\\n#ifdef DESTINATION_IN\\nvec4 color = vec4(ab * Cb * as, ab * as);\\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\\ngl_FragColor = color + fadeColor;\\n#endif\\n#ifdef SOURCE_OUT\\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\\n#endif\\n#ifdef DESTINATION_OUT\\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\\n#endif\\n#ifdef SOURCE_ATOP\\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\\n#endif\\n#ifdef DESTINATION_ATOP\\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\\n#endif\\n#ifdef XOR\\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\\nas * (1.0 - ab) + ab * (1.0 - as));\\n#endif\\n#ifdef MULTIPLY\\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef SCREEN\\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef OVERLAY\\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef DARKEN\\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef LIGHTER\\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\\n#endif\\n#ifdef LIGHTEN\\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef COLOR_DODGE\\nvec3 f = clamp(vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef COLOR_BURN\\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef HARD_LIGHT\\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef SOFT_LIGHT\\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef DIFFERENCE\\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef EXCLUSION\\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef INVERT\\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\\n#endif\\n#ifdef VIVID_LIGHT\\nvec3 f = vec3(clamp(vividLight(Cb.r, Cs.r), 0.0, 1.0),\\nclamp(vividLight(Cb.g, Cs.g), 0.0, 1.0),\\nclamp(vividLight(Cb.b, Cs.b), 0.0, 1.0));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef HUE\\nvec3 f = setLumSat(Cs,Cb,Cb);\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef SATURATION\\nvec3 f = setLumSat(Cb,Cs,Cb);\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef COLOR\\nvec3 f = setLum(Cs,Cb);\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef LUMINOSITY\\nvec3 f = setLum(Cb,Cs);\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef PLUS\\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\\n#endif\\n#ifdef MINUS\\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\\n#endif\\n#ifdef AVERAGE\\nvec3 f = (Cb + Cs) / 2.0;\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#ifdef REFLECT\\nvec3 f = clamp(vec3(reflectBlend(Cb.r, Cs.r),\\nreflectBlend(Cb.g, Cs.g),\\nreflectBlend(Cb.b, Cs.b)), vec3(0.0), vec3(1.0));\\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\\nas + ab * (1.0 - as));\\n#endif\\n#endif\\n}\",\"blend.vert\":\"attribute vec2 a_position;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_position , 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"},debug:{overlay:{\"overlay.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvoid main(void) {\\ngl_FragColor = v_color;\\n}\",\"overlay.vert\":\"attribute vec3 a_PositionAndFlags;\\nuniform mat3 u_dvsMat3;\\nuniform vec4 u_colors[4];\\nuniform float u_opacities[4];\\nvarying vec4 v_color;\\nvoid main(void) {\\nvec2 position = a_PositionAndFlags.xy;\\nfloat flags = a_PositionAndFlags.z;\\nint colorIndex = int(mod(flags, 4.0));\\nvec4 color;\\nfor (int i = 0; i < 4; i++) {\\ncolor = u_colors[i];\\nif (i == colorIndex) {\\nbreak;\\n}\\n}\\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\\nfloat opacity;\\nfor (int i = 0; i < 4; i++) {\\nopacity = u_opacities[i];\\nif (i == opacityIndex) {\\nbreak;\\n}\\n}\\nv_color = color * opacity;\\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\"}},dot:{dot:{\"dot.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nuniform highp float u_tileZoomFactor;\\nvoid main()\\n{\\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\\ngl_FragColor = v_color * alpha;\\n}\",\"dot.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nuniform sampler2D u_texture;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp float u_tileZoomFactor;\\nuniform highp float u_dotSize;\\nuniform highp float u_pixelRatio;\\nvarying vec2 v_pos;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nconst float EPSILON = 0.000001;\\nvoid main()\\n{\\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\\n0., -1., 0.,\\n0., 1., 1.  );\\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\\nv_color = texture2D(u_texture, texCoords.xy);\\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\\nfloat z = 0.;\\nz += 2.0 * step(v_color.a, EPSILON);\\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\\nv_dotRatio = u_dotSize / gl_PointSize;\\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\\n}\"}},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\nfloat b = 1.0 / 6.0;\\nfloat v2 = v * v;\\nfloat v3 = v2 * v;\\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\nfloat w3 = b * v3;\\nreturn vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\nvec4 w = computeWeights(v);\\nfloat g0 = w.x + w.y;\\nfloat g1 = w.z + w.w;\\nfloat h0 = 1.0 - (w.y / g0) + v;\\nfloat h1 = 1.0 + (w.w / g1) - v;\\nreturn vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\\nvec2 texel = coords * texSize - 0.5;\\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\nvec2 coords10 = coords + hgX.x * eX;\\nvec2 coords00 = coords - hgX.y * eX;\\nvec2 coords11 = coords10 + hgY.x * eY;\\nvec2 coords01 = coords00 + hgY.x * eY;\\ncoords10 = coords10 - hgY.y * eY;\\ncoords00 = coords00 - hgY.y * eY;\\nvec4 color00 = texture2D(sampler, coords00);\\nvec4 color10 = texture2D(sampler, coords10);\\nvec4 color01 = texture2D(sampler, coords01);\\nvec4 color11 = texture2D(sampler, coords11);\\ncolor00 = mix(color00, color01, hgY.z);\\ncolor10 = mix(color10, color11, hgY.z);\\ncolor00 = mix(color00, color10, hgX.z);\\nreturn color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 texelStart = floor(coords * texSize);\\nvec2 coord0 = texelStart / texSize;\\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\nvec4 color0 = texture2D(sampler, coord0);\\nvec4 color1 = texture2D(sampler, coord1);\\nvec4 color2 = texture2D(sampler, coord2);\\nvec4 color3 = texture2D(sampler, coord3);\\nvec2 blend = fract(coords * texSize);\\nvec4 color01 = mix(color0, color1, blend.x);\\nvec4 color23 = mix(color2, color3, blend.x);\\nvec4 color = mix(color01, color23, blend.y);\\n#ifdef NNEDGE\\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\\n#endif\\nreturn color;\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\nvec2 invSize = 1.0 / texSize;\\nvec2 texel = coords * texSize;\\nvec2 texel_i = floor(texel);\\nvec2 texel_frac = fract(texel);\\nvec4 colorP = texture2D(sampler, texel_i * invSize);\\nvec4 colorP1 = vec4(colorP);\\nvec4 colorP2 = vec4(colorP);\\nvec4 colorP3 = vec4(colorP);\\nvec4 colorP4 = vec4(colorP);\\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\\ncolorP1 = colorA;\\n}\\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\\ncolorP2 = colorB;\\n}\\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\\ncolorP3 = colorC;\\n}\\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\\ncolorP4 = colorD;\\n}\\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\nreturn mix(colorP12, colorP34, texel_frac.y);\\n}\"},fx:{integrate:{\"integrate.frag\":\"precision mediump float;\\nuniform lowp sampler2D u_sourceTexture;\\nuniform lowp sampler2D u_maskTexture;\\nuniform mediump float u_zoomLevel;\\nuniform highp float u_timeDelta;\\nuniform highp float u_animationTime;\\nvarying highp vec2 v_texcoord;\\n#include <materials/utils.glsl>\\nvoid main()\\n{\\n#ifdef DELTA\\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\\nfloat flags = data0.r * 255.0;\\nfloat groupMinZoom = data0.g * 255.0;\\nfloat epsilon = 5.;\\nfloat wouldClip = float(groupMinZoom < epsilon);\\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\\nvec4 nextState = vec4(texel + direction * dt);\\ngl_FragColor =  vec4(nextState);\\n#elif defined(UPDATE)\\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\\ngl_FragColor = texel;\\n#endif\\n}\",\"integrate.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\\n}\"}},heatmap:{heatmapResolve:{\"heatmapResolve.frag\":\"precision highp float;\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 4.0\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform sampler2D u_texture;\\nuniform sampler2D u_gradient;\\nuniform vec2 u_densityMinAndInvRange;\\nuniform float u_densityNormalization;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 data = texture2D(u_texture, v_uv);\\nfloat density = data.r * COMPRESSION_FACTOR;\\ndensity *= u_densityNormalization;\\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\\ngl_FragColor = vec4(color.rgb * color.a, color.a);\\n}\",\"heatmapResolve.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nvarying vec2 v_uv;\\nvoid main() {\\nv_uv = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_texture;\\nmediump float gauss1(mediump vec2 dir) {\\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\nreturn u_channelSelector * sample;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\nmediump float w = gauss1(i * u_direction.xy);\\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\nweight += w;\\n}\\nvoid main(void) {\\nmediump float tot = 0.0;\\nmediump float weight = 0.0;\\naccumGauss1(-5.0, tot, weight);\\naccumGauss1(-4.0, tot, weight);\\naccumGauss1(-3.0, tot, weight);\\naccumGauss1(-2.0, tot, weight);\\naccumGauss1(-1.0, tot, weight);\\naccumGauss1(0.0, tot, weight);\\naccumGauss1(1.0, tot, weight);\\naccumGauss1(2.0, tot, weight);\\naccumGauss1(3.0, tot, weight);\\naccumGauss1(4.0, tot, weight);\\naccumGauss1(5.0, tot, weight);\\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\nmediump float y = texture2D(u_texture, v_texcoord)[3];\\nconst mediump float y0 = 0.5;\\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\\nmediump float d = (y - y0) / m0;\\nreturn d;\\n}\\nmediump vec4 shade(mediump float d) {\\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\nmediump float d = estimateDistance();\\ngl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},magnifier:{\"magnifier.frag\":\"uniform lowp vec4 u_background;\\nuniform mediump sampler2D u_readbackTexture;\\nuniform mediump sampler2D u_maskTexture;\\nuniform mediump sampler2D u_overlayTexture;\\nuniform bool u_maskEnabled;\\nuniform bool u_overlayEnabled;\\nvarying mediump vec2 v_texCoord;\\nconst lowp float barrelFactor = 1.1;\\nlowp vec2 barrel(lowp vec2 uv) {\\nlowp vec2 uvn = uv * 2.0 - 1.0;\\nif (uvn.x == 0.0 && uvn.y == 0.0) {\\nreturn vec2(0.5, 0.5);\\n}\\nlowp float theta = atan(uvn.y, uvn.x);\\nlowp float r = pow(length(uvn), barrelFactor);\\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\\n}\\nvoid main(void)\\n{\\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\\ncolor = (color + (1.0 - color.a) * u_background);\\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\\ncolor *= mask;\\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\\n}\",\"magnifier.vert\":\"precision mediump float;\\nattribute mediump vec2 a_pos;\\nuniform mediump vec4 u_drawPos;\\nvarying mediump vec2 v_texCoord;\\nvoid main(void)\\n{\\nv_texCoord = a_pos;\\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D filterFlags;\\nuniform highp sampler2D animation;\\nuniform highp sampler2D gpgpu;\\nuniform highp sampler2D visualVariableData;\\nuniform highp sampler2D dataDriven0;\\nuniform highp sampler2D dataDriven1;\\nuniform highp sampler2D dataDriven2;\\nuniform float size;\\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\\nhighp vec3  texel = unpackDisplayIdTexel(id);\\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\\nhighp float col = mod(u32, size);\\nhighp float row = (u32 - col) / size;\\nhighp float u = col / size;\\nhighp float v = row / size;\\nreturn vec2(u, v);\\n}\\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\\n}\\nhighp vec4 getFilterData(in highp vec3 id) {\\nvec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(filterFlags, coords);\\n}\\nhighp vec4 getAnimation(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(animation, coords);\\n}\\nhighp vec4 getVisualVariableData(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(visualVariableData, coords);\\n}\\nhighp vec4 getDataDriven0(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven0, coords);\\n}\\nhighp vec4 getDataDriven1(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven1, coords);\\n}\\nhighp vec4 getGPGPU(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(gpgpu, coords);\\n}\\nhighp vec4 getDataDriven2(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven2, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\nbool isMagic = v.x == 255.0 && v.y == 255.0;\\nif (isMagic) {\\nreturn NAN_MAGIC_NUMBER;\\n}\\nreturn (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"barycentric.glsl\":\"float inTriangle(vec3 bary) {\\nvec3 absBary = abs(bary);\\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\\n}\\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\\nmat3 xyToBarycentricMat3 = mat3(\\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\\n);\\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.00001;\\nconst float EPSILON_HITTEST = 0.05;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\\nconst int BITSET_LINE_SCALE_DASH = 2;\",fill:{\"common.glsl\":\"#include <materials/symbologyTypeUtils.glsl>\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying highp vec3 v_id;\\nvarying lowp vec4 v_color;\\nvarying lowp float v_opacity;\\nvarying mediump vec4 v_aux1;\\n#ifdef PATTERN\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvarying lowp float v_isOutline;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\nlowp vec4 drawLine() {\\nfloat v_lineWidth = v_aux1.x;\\nvec2  v_normal    = v_aux1.yz;\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineWidth,\\nv_opacity,\\nv_id\\n);\\nreturn shadeLine(inputs);\\n}\\n#endif\\nlowp vec4 drawFill() {\\nlowp vec4 out_color = vec4(0.);\\n#ifdef HITTEST\\nout_color = v_color;\\n#elif defined(PATTERN)\\nmediump vec4 v_tlbr = v_aux1;\\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\nout_color = v_opacity * v_color * color;\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\nvec4 isPositive0 = step(0.0, difference0);\\nvec4 isPositive1 = step(0.0, difference1);\\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\nfloat lessThanEqZero = step(weightSum, 0.0);\\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\\nfloat divisor = (weightSum + lessThanEqZero);\\nvec4 weights0 = difference0 * isPositive0 / divisor;\\nvec4 weights1 = difference1 * isPositive1 / divisor;\\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\nfloat diffMax = max(max4(difference0), max4(difference1));\\nfloat lessThanZero = step(diffMax, 0.0);\\nfloat greaterOrEqZero = 1.0 - lessThanZero;\\nvec4 isMax0 = step(diffMax, difference0);\\nvec4 isMax1 = step(diffMax, difference1);\\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\nout_color = preEffectColor;\\n#else\\nout_color = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\nout_color.a = 1.0;\\n#endif\\nreturn out_color;\\n}\\nvoid main() {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (v_isOutline > 0.5) {\\ngl_FragColor = drawLine();\\n} else {\\ngl_FragColor = drawFill();\\n}\\n#else\\ngl_FragColor = drawFill();\\n#endif\\n}\",\"fill.vert\":\"#include <materials/symbologyTypeUtils.glsl>\\n#define PACKED_LINE\\nprecision highp float;\\nattribute float a_bitset;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_aux2;\\nattribute vec4 a_aux3;\\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\nattribute vec4 a_aux1;\\nattribute vec2 a_zoomRange;\\n#else\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#endif\\n#endif\\nuniform vec2 u_tileOffset;\\nuniform vec2 u_maxIntNumOfCrossing;\\n#include <util/encoding.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#include <materials/fill/hittest.glsl>\\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\\nLineData outputs = buildLine(\\nout_pos,\\na_id,\\na_pos,\\na_color,\\n(a_aux3.xy - 128.) / 16.,\\n(a_aux3.zw - 128.) / 16.,\\n0.,\\na_aux2.z / 16.,\\na_bitset,\\nvec4(0.),\\nvec2(0.),\\na_aux2.w / 16.\\n);\\nv_id      = outputs.id;\\nv_opacity = outputs.opacity;\\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\\nout_color = outputs.color;\\n}\\n#endif\\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\\nfloat a_bitSet = a_bitset;\\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\\n0., -2. / 512.,  0.,\\n-1.,  1.,  1.  );\\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\\n#else\\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n#endif\\n#ifdef PATTERN\\nvec4  a_tlbr   = a_aux1;\\nfloat a_width  = a_aux2.x;\\nfloat a_height = a_aux2.y;\\nvec2  a_offset = a_aux2.zw;\\nvec2  a_scale  = a_aux3.xy;\\nfloat a_angle  = a_aux3.z;\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\\na_width *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\\na_height *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\\nfloat width = u_zoomFactor * a_width * scale.x;\\nfloat height = u_zoomFactor * a_height * scale.y;\\nfloat angle = C_256_TO_RAD * a_angle;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nfloat dx = 0.0;\\nfloat dy = 0.0;\\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\\nfloat id = rgba2float(vec4(a_id, 0.0));\\ndx = rand(vec2(id, 0.0));\\ndy = rand(vec2(0.0, id));\\n}\\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n-sinA / width, cosA / height, 0,\\ndx,            dy,           1);\\nvec2 patternSize = vec2(a_width, a_height);\\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\\ntileOffset = mod(tileOffset, patternSize);\\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\\n#ifdef VV_COLOR\\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\\n#else\\nv_sampleAlphaOnly = 0.0;\\n#endif\\n}\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n}\\n#ifdef HITTEST\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\\nout_pos = vec3(0., 0., 2.);\\nreturn;\\n}\\n#endif\\nhittestFill(out_color, out_pos);\\ngl_PointSize = 1.0;\\n}\\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\\nif (v_isOutline > 0.5) {\\ndrawLine(out_color, out_pos);\\n} else {\\ndrawFill(out_color, out_pos);\\n}\\n}\\n#else\\n#define draw drawFill\\n#endif\\nvoid main()\\n{\\nINIT;\\nhighp vec3 pos  = vec3(0.);\\nhighp vec4 color  = vec4(0.);\\ndraw(color, pos);\\nv_color = color;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\",\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestFill(\\nout lowp vec4 out_color,\\nout highp vec3 out_pos\\n) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\\nfloat hittestDist = u_hittestDist;\\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist < 0. || dist >= hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\\n}\\n#endif\"},hittest:{\"common.glsl\":\"#ifdef HITTEST\\nuniform float hittestDist;\\nuniform highp vec2 hittestPos;\\nfloat projectScalar(vec2 a, vec2 b) {\\nreturn dot(a, normalize(b));\\n}\\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\\nvec2 L = p2 - p1;\\nvec2 A = p0 - p1;\\nfloat projAL = projectScalar(A, L);\\nfloat t = clamp(projAL / length(L), 0., 1.);\\nreturn distance(p0, p1 + t * (p2 - p1));\\n}\\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\\nfloat dist = distance(pos, vec3(hittestPos, 1.));\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif ((dist - size) > hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\\n}\\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\\nreturn inTriangle(xyToBarycentric(p, a, b, c));\\n}\\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\\nvec2 ba = b - a;\\nvec2 ca = c - a;\\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\\nif (isParallel) {\\nreturn -1.;\\n}\\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\\nreturn 0.;\\n}\\nfloat distAB = distPointSegment(p, a, b);\\nfloat distBC = distPointSegment(p, b, c);\\nfloat distCA = distPointSegment(p, c, a);\\nreturn min(min(distAB, distBC), distCA);\\n}\\n#endif\"},icon:{\"common.glsl\":\"#include <util/encoding.glsl>\\nuniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\\n#ifdef SDF\\nvec4 getColor(vec2 v_size, vec2 v_tex) {\\n#ifdef HITTEST\\nlowp vec4 fillPixelColor = vec4(1.0);\\n#else\\nlowp vec4 fillPixelColor = v_color;\\n#endif\\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\nfloat size = max(v_size.x, v_size.y);\\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\nfloat outlineWidth = v_outlineWidth;\\n#ifdef HIGHLIGHT\\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n#endif\\nif (outlineWidth > 0.25) {\\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\nfloat clampedOutlineSize = min(outlineWidth, size);\\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n}\\nreturn v_opacity * fillPixelColor;\\n}\\n#else\\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\\nlowp vec4 texColor = texture2D(u_texture, v_tex);\\nreturn v_opacity * texColor * v_color;\\n}\\n#endif\",heatmapAccumulate:{\"common.glsl\":\"varying lowp vec4 v_hittestResult;\\nvarying mediump vec2 v_offsetFromCenter;\\nvarying highp float v_fieldValue;\",\"heatmapAccumulate.frag\":\"precision mediump float;\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 0.25\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform lowp sampler2D u_texture;\\nvoid main() {\\n#ifdef HITTEST\\ngl_FragColor = v_hittestResult;\\n#else\\nfloat radius = length(v_offsetFromCenter);\\nfloat shapeWeight = step(radius, 1.0);\\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\\n#endif\\n}\",\"heatmapAccumulate.vert\":\"precision highp float;\\nattribute vec2 a_vertexOffset;\\nvec4 a_color = vec4(0.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\nuniform float u_radius;\\nuniform float u_isFieldActive;\\n#include <materials/vcommon.glsl>\\n#include <materials/hittest/common.glsl>\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\nvoid main() {\\nfloat filterFlags = getFilterFlags();\\n#ifdef HITTEST\\nhighp vec4 out_hittestResult = vec4(0.);\\nhighp vec3 out_pos = vec3(0.);\\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\\nv_hittestResult = out_hittestResult;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\nv_offsetFromCenter = sign(a_vertexOffset);\\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_vertexOffset1;\\nattribute vec2 a_vertexOffset2;\\nattribute vec2 a_texCoords1;\\nattribute vec2 a_texCoords2;\\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\\n}\\nvoid hittestIcon(\\ninout lowp vec4 out_color,\\nout highp vec3 out_pos,\\nin vec3 pos,\\nin vec3 offset,\\nin vec2 size,\\nin float scaleFactor,\\nin float isMapAligned\\n) {\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec2 tex0 = a_texCoords  / u_mosaicSize;\\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\\nfloat alphaSum = 0.;\\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\\nout_pos.z += step(alphaSum, .05) * 2.0;\\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\\n}\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/icon/common.glsl>\\nvoid main()\\n{\\n#ifdef HITTEST\\nvec4 color = v_color;\\n#else\\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\\n#endif\\n#ifdef HIGHLIGHT\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec2 a_bitSetAndDistRatio;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\n#include <materials/icon/hittest.glsl>\\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat f = getSize(size.y) / size.y;\\nfloat sizeFactor = size.y / referenceSize;\\nreturn getSize(referenceSize) / referenceSize;\\n#else\\nreturn 1.;\\n#endif\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_bitSet = a_bitSetAndDistRatio.x;\\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\\nsize.xy     *= scaleFactor;\\noffset.xy   *= scaleFactor;\\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\\nvec2 v_tex   = a_texCoords / u_mosaicSize;\\nfloat filterFlags = getFilterFlags();\\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity  = getOpacity();\\nv_id       = norm(a_id);\\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\\nv_sizeTex  = vec4(size.xy, v_tex.xy);\\n#ifdef SDF\\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\\n#ifdef VV_COLOR\\nv_overridingOutlineColor = v_isThin;\\n#else\\nv_overridingOutlineColor = 0.0;\\n#endif\\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\\nv_outlineColor = a_outlineColor;\\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\\n#endif\\n#ifdef HITTEST\\nhighp vec4 out_color = vec4(0.);\\nhighp vec3 out_pos   = vec3(0.);\\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\\nv_color = out_color;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\nfloat glyphAngle = angle * 360.0 / 254.0;\\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\nfloat z = 0.0;\\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\\nreturn z;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat groupMinZoom    = getMinZoom();\\nfloat glyphMinZoom    = a_glyphData.x;\\nfloat glyphMaxZoom    = a_glyphData.y;\\nfloat glyphAngle      = a_glyphData.z;\\nfloat a_isBackground  = a_glyphData.w;\\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\nfloat fontSize           = a_texAndSize.z;\\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor = (isBackground + isText) * a_color;\\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\\nv_opacity   = 1.0;\\nv_tex       = a_texCoords / u_mosaicSize;\\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\ngl_Position = vec4(v_pos, 1.0);\\n#ifdef DEBUG\\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\\n#ifdef SDF\\nvarying mediump float v_lineWidthRatio;\\n#endif\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\\n#ifdef HITTEST\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist >= u_hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\\n}\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\n#ifdef HITTEST\\nvoid main() {\\ngl_FragColor = v_color;\\n}\\n#else\\nvoid main() {\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineHalfWidth,\\nv_opacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr,\\nv_patternSize,\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance,\\n#endif\\n#endif\\nv_id\\n);\\ngl_FragColor = shadeLine(inputs);\\n}\\n#endif\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/line/hittest.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\n#ifdef HITTEST\\nvoid draw() {\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\\nfloat a_cimHalfWidth = a_aux.x / 16. ;\\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nhighp vec3 pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestLine(v_color, pos, halfWidth);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#else\\nvoid draw()\\n{\\nhighp vec3 pos = vec3(0.);\\nLineData outputs = buildLine(\\npos,\\na_id,\\na_pos,\\na_color,\\na_offsetAndNormal.xy / 16.,\\na_offsetAndNormal.zw / 16.,\\na_accumulatedDistanceAndHalfWidth.x,\\na_accumulatedDistanceAndHalfWidth.y / 16.,\\na_segmentDirection.w,\\na_tlbr,\\na_segmentDirection.xy / 16.,\\na_aux.x / 16.\\n);\\nv_id              = outputs.id;\\nv_color           = outputs.color;\\nv_normal          = outputs.normal;\\nv_lineHalfWidth   = outputs.lineHalfWidth;\\nv_opacity         = outputs.opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr          = outputs.tlbr;\\nv_patternSize   = outputs.patternSize;\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio = outputs.lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance = outputs.accumulatedDistance;\\n#endif\\n#endif\\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#endif\\nvoid main() {\\nINIT;\\ndraw();\\n}\"},pie:{\"pie.common.glsl\":\"uniform float outlineWidth;\\nuniform mediump float sectorThreshold;\\nvarying vec3  v_id;\\nvarying vec3  v_pos;\\nvarying vec2  v_offset;\\nvarying vec4  v_color;\\nvarying float v_size;\\nvarying float v_numOfEntries;\\nvarying float v_maxSectorAngle;\\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\\nvarying vec2  v_texCoords;\\nvarying float v_outlineWidth;\\nvarying float v_opacity;\\nstruct FilteredChartInfo {\\nfloat endSectorAngle;\\nint colorId;\\n};\",\"pie.frag\":\"precision highp float;\\n#include <util/atan2.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/pie/pie.common.glsl>\\nuniform lowp vec4 colors[numberOfFields];\\nuniform lowp vec4 defaultColor;\\nuniform lowp vec4 othersColor;\\nuniform lowp vec4 outlineColor;\\nuniform float donutRatio;\\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\\nreturn colors[colorIndex];\\n}\\nconst int OTHER_SECTOR_ID = 255;\\n#ifdef HITTEST\\nvec4 getColor() {\\nfloat distanceSize = length(v_offset) * v_size;\\nfloat donutSize = donutRatio * v_size;\\nfloat alpha = step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\\nreturn v_color;\\n}\\n#else\\nvec4 getColor() {\\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\\nif (angle < 0.0) {\\nangle += 360.0;\\n} else if (angle > 360.0) {\\nangle = mod(angle, 360.0);\\n}\\nint numOfEntries = int(v_numOfEntries);\\nfloat maxSectorAngle = v_maxSectorAngle;\\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || sectorThreshold > 0.0) ? othersColor : defaultColor;\\nlowp vec4 prevColor = vec4(0.0);\\nlowp vec4 nextColor = vec4(0.0);\\nfloat startSectorAngle = 0.0;\\nfloat endSectorAngle = 0.0;\\nif (angle < maxSectorAngle) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nstartSectorAngle = endSectorAngle;\\nendSectorAngle = v_filteredSectorToColorId[index].x;\\nif (endSectorAngle > angle) {\\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\\nprevColor = sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\\nbreak;\\n}\\nif (index == numOfEntries - 1) {\\nbreak;\\n}\\n}\\n} else {\\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\\nstartSectorAngle = maxSectorAngle;\\nendSectorAngle = 360.0;\\n}\\nlowp vec4 outlineColor = outlineColor;\\nfloat offset = length(v_offset);\\nfloat distanceSize = offset * v_size;\\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\\nfloat distanceToStartSector = (angle - startSectorAngle);\\nfloat distanceToEndSector = (endSectorAngle - angle);\\nfloat sectorThreshold = 0.6;\\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\\nif (endSectorAlpha > 0.0) {\\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\\n} else if (beginSectorAlpha > 0.0) {\\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\\n}\\n}\\nfloat donutSize = donutRatio * (v_size - v_outlineWidth);\\nfloat endOfDonut = donutSize - v_outlineWidth;\\nfloat aaThreshold = 0.75;\\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\\nfloat startOfOutline = v_size - v_outlineWidth;\\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\\n}\\nreturn v_opacity * circleAlpha * fillColor;\\n}\\n#endif\\nvoid main()\\n{\\nvec4 color = getColor();\\n#ifdef highlight\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"pie.vert\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/barycentric.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/pie/pie.common.glsl>\\n#include <materials/hittest/common.glsl>\\nattribute float a_bitSet;\\nattribute vec2  a_offset;\\nattribute vec2  a_texCoords;\\nattribute vec2  a_size;\\nattribute float a_referenceSize;\\nattribute vec2  a_zoomRange;\\nint filterValue(in float sectorAngle,\\nin int currentIndex,\\ninout FilteredChartInfo filteredInfo,\\ninout vec2 filteredSectorToColorId[numberOfFields]) {\\nif (sectorAngle > sectorThreshold * 360.0) {\\nfilteredInfo.endSectorAngle += sectorAngle;\\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\\n++filteredInfo.colorId;\\n}\\nreturn 0;\\n}\\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\\ninout FilteredChartInfo filteredInfo,\\nin float sectorAngles[numberOfFields]) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nfloat sectorValue = sectorAngles[index];\\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\\n}\\nreturn filteredInfo.colorId;\\n}\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\\nvec2 outSize = baseSize;\\n#ifdef VV_SIZE\\nfloat r = getSize(a_referenceSize, currentScale) / a_referenceSize;\\noutSize.xy *= r;\\noffset.xy *= r;\\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\nreturn outSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nvec3  offset       = vec3(in_offset, 0.0);\\nreturn getMatrix(isMapAligned) * offset;\\n}\\nfloat filterNaNValues(in float value) {\\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\\n}\\nvoid main()\\n{\\nINIT;\\nvec2  a_size   = a_size;\\nvec2  a_offset = a_offset / 16.0;\\nfloat outlineSize = outlineWidth;\\nfloat a_bitSet = a_bitSet;\\nfloat a_referenceSize = a_referenceSize;\\nvec2 a_texCoords = a_texCoords / 4.0;\\nvec2 markerSize = getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\\nfloat filterFlags = getFilterFlags();\\nvec3  pos         = vec3(a_pos / 10.0, 1.0);\\nv_opacity      = getOpacity();\\nv_id           = norm(a_id);\\nv_pos          = displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\\nv_offset       = sign(a_texCoords - 0.5);\\nv_size         = max(markerSize.x, markerSize.y);\\nv_outlineWidth = outlineSize;\\nfloat attributeData[10];\\nvec4 attributeData3 = getDataDriven0(a_id);\\nattributeData[0] = filterNaNValues(attributeData3.x);\\nattributeData[1] = filterNaNValues(attributeData3.y);\\nattributeData[2] = filterNaNValues(attributeData3.z);\\nattributeData[3] = filterNaNValues(attributeData3.w);\\n#if (numberOfFields > 4)\\nvec4 attributeData4 = getDataDriven1(a_id);\\nattributeData[4] = filterNaNValues(attributeData4.x);\\nattributeData[5] = filterNaNValues(attributeData4.y);\\nattributeData[6] = filterNaNValues(attributeData4.z);\\nattributeData[7] = filterNaNValues(attributeData4.w);\\n#endif\\n#if (numberOfFields > 8)\\nvec4 attributeData5 = getDataDriven2(a_id);\\nattributeData[8] = filterNaNValues(attributeData5.x);\\nattributeData[9] = filterNaNValues(attributeData5.y);\\n#endif\\nfloat sum = 0.0;\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsum += attributeData[i];\\n}\\nfloat sectorAngles[numberOfFields];\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\\n}\\nvec2 filteredSectorToColorId[numberOfFields];\\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\\nv_numOfEntries = float(numOfEntries);\\nv_maxSectorAngle = filteredInfo.endSectorAngle;\\nv_filteredSectorToColorId = filteredSectorToColorId;\\n#ifdef HITTEST\\nhighp vec3 out_pos = vec3(0.0);\\nv_color            = vec4(0.0);\\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\\ngl_PointSize = 1.0;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},shared:{line:{\"common.glsl\":\"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\nstruct LineData {\\nlowp vec4 color;\\nmediump vec2 normal;\\nmediump float lineHalfWidth;\\nlowp float opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nmediump vec4 tlbr;\\nmediump vec2 patternSize;\\n#endif\\n#ifdef SDF\\nmediump float lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nhighp float accumulatedDistance;\\n#endif\\n#endif\\nhighp vec3 id;\\n};\",\"line.frag\":\"uniform lowp float u_blur;\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\nuniform highp float u_pixelRatio;\\n#endif\\n#endif\\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\nfloat dist = d * line.lineHalfWidth;\\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\\n}\\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float lineHalfWidth = line.lineHalfWidth;\\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nlowp vec4 color = texture2D(u_texture, texCoord);\\n#ifdef VV_COLOR\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\n#endif\\nreturn line.opacity * line.color * color;\\n}\\n#else\\nlowp vec4 getLineColor(LineData line) {\\nreturn line.opacity * line.color;\\n}\\n#endif\\nvec4 shadeLine(LineData line)\\n{\\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\nlowp vec4 out_color = getLineColor(line) * alpha;\\n#ifdef HIGHLIGHT\\nout_color.a = step(1.0 / 255.0, out_color.a);\\n#endif\\n#ifdef ID\\nif (out_color.a < 1.0 / 255.0) {\\ndiscard;\\n}\\nout_color = vec4(line.id, 0.0);\\n#endif\\nreturn out_color;\\n}\",\"line.vert\":\"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\\n#ifdef VV_SIZE\\nfloat refLineWidth = 2.0 * referenceHalfWidth;\\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\\n#else\\nreturn lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\nhalfWidth = max(halfWidth, 2.0);\\n#endif\\nreturn halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nreturn thinLineFactor * halfWidth * offset;\\n}\\nLineData buildLine(\\nout vec3 out_pos,\\nin vec3 in_id,\\nin vec2 in_pos,\\nin vec4 in_color,\\nin vec2 in_offset,\\nin vec2 in_normal,\\nin float in_accumulatedDist,\\nin float in_lineHalfWidth,\\nin float in_bitSet,\\nin vec4 in_tlbr,\\nin vec2 in_segmentDirection,\\nin float in_referenceHalfWidth\\n)\\n{\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nfloat z         = 2.0 * step(baseWidth, 0.0);\\nvec2  dist      = getDist(in_offset, halfWidth);\\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvec4  color     = in_color;\\nfloat opacity   = 1.0;\\n#else\\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nfloat opacity   = getOpacity();\\n#ifdef SDF\\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\\n#endif\\n#endif\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\n#endif\\nout_pos = vec3(pos.xy, z);\\nreturn LineData(\\ncolor,\\nin_normal,\\nhalfWidth,\\nopacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nin_tlbr / u_mosaicSize.xyxy,\\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\\n#endif\\n#ifdef SDF\\nlineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\\n#endif\\n#endif\\nnorm(in_id)\\n);\\n}\"}},\"symbologyTypeUtils.glsl\":\"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\n#endif\",text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec3 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\n#ifdef HITTEST\\nvec4 getColor() {\\nreturn v_color;\\n}\\n#else\\nvec4 getColor()\\n{\\nfloat SDF_CUTOFF = (2.0 / 8.0);\\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\nlowp float dist = texture2D(u_texture, v_tex).a;\\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\nedge /= 2.0;\\n#endif\\nlowp float aa = v_antialiasingWidth;\\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\nreturn alpha * v_color * v_opacity;\\n}\\n#endif\\nvoid main()\\n{\\ngl_FragColor = getColor();\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\n#include <materials/text/hittest.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_zoomRange;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat r = getSize(referenceSize) / referenceSize;\\nbaseSize *= r;\\noffset.xy *= r;\\nreturn baseSize;\\n#endif\\nreturn baseSize;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_isBackground  = a_aux.y;\\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\\nfloat a_bitSet        = a_aux.w;\\nfloat a_fontSize      = a_texFontSize.z;\\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\nv_tex     = a_texCoords / u_mosaicSize;\\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n#ifdef HITTEST\\nhighp vec3 out_pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\\n+ u_tileMat3 * offset, fontSize / 2.);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#else\\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#endif\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\nreturn floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\nfloat offset = pow(2.0, float(bitIndex));\\nreturn mod(floor(bitset / offset), 2.0);\\n}\\nconst int highlightReasonsLength = 3;\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex + highlightReasonsLength);\\n}\\nfloat getHighlightBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex);\\n}\\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\\nfloat isAggregate = getBit(bitset.b, 7);\\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\nfloat r = mod(rshift(u32, 0), 255.0);\\nfloat g = mod(rshift(u32, 8), 255.0);\\nfloat b = mod(rshift(u32, 16), 255.0);\\nfloat a = mod(rshift(u32, 24), 255.0);\\nreturn vec4(r, g, b, a);\\n}\\nvec3 norm(in vec3 v) {\\nreturn v /= 255.0;\\n}\\nvec4 norm(in vec4 v) {\\nreturn v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\nreturn max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\nreturn (bytes - 127.0) / 127.0;\\n}\\nhighp float rand(in vec2 co) {\\nhighp float a = 12.9898;\\nhighp float b = 78.233;\\nhighp float c = 43758.5453;\\nhighp float dt = dot(co, vec2(a,b));\\nhighp float sn = mod(dt, 3.14);\\nreturn fract(sin(sn) * c);\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/barycentric.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec3 a_id;\\nuniform highp mat3 displayViewScreenMat3;\\nuniform highp mat3 displayViewMat3;\\nuniform highp mat3 displayMat3;\\nuniform highp mat3 tileMat3;\\nuniform highp mat3 viewMat3;\\nuniform highp float pixelRatio;\\nuniform mediump float zoomFactor;\\nuniform mediump float antialiasing;\\nuniform mediump float currentScale;\\nuniform mediump float currentZoom;\\nuniform mediump float metersPerSRUnit;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\ntarget.rgba = getVisualVariableData(a_id);\\n}\\n#ifdef VV\\n#define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n#define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\nfloat isColorLocked   = getBit(a_bitSet, index);\\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\nreturn a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\nreturn 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size, in float currentScale) {\\n#ifdef VV_SIZE\\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\\n#else\\nreturn in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\nreturn mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\nreturn ceil(getFilterData(a_id).x * 255.0);\\n#else\\nreturn getFilterData(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\nreturn getAnimation(a_id);\\n}\\nfloat getMinZoom() {\\nvec4 data0 = getFilterData(a_id) * 255.0;\\nreturn data0.g;\\n}\\nmat3 getMatrixNoDisplay(float isMapAligned) {\\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\\n}\\nmat3 getMatrix(float isMapAligned) {\\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\\n}\\nfloat checkHighlightBit(float filterFlags, int index) {\\nreturn getHighlightBit(filterFlags, index);\\n}\\nfloat checkHighlight(float filterFlags) {\\nfloat result = checkHighlightBit(filterFlags, 0);\\nfor (int i = 1; i < highlightReasonsLength; i++) {\\nresult = result + checkHighlightBit(filterFlags, i);\\n}\\nreturn step(0.1, result);\\n}\\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef inside\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(outside)\\npos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(highlight)\\n#if !defined(highlight_all)\\npos.z += 2.0 * (1.0 - checkHighlight(filterFlags));\\n#endif\\n#endif\\npos.z += 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\\nreturn pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n#define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n#define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float colorValues[8];\\nuniform vec4 colors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 minMaxValueAndSize;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float unitMeterRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float opacityValues[8];\\nuniform float opacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float rotationType;\\n#endif\\nbool isNan(float val) {\\nreturn (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nfloat interpolationRatio = (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\\n}\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nfloat getVVScaleStopsSize(float currentScale) {\\nfloat outSize;\\nif (currentScale <= values[0]) {\\noutSize = sizes[0];\\n} else {\\nif (currentScale >= values[7]) {\\noutSize = sizes[7];\\n} else {\\nint index;\\nindex = -1;\\nfor (int i = 0; i < 8; i++) {\\nif (values[i] > currentScale) {\\nindex = i;\\nbreak;\\n}\\n}\\nint prevIndex = index - 1;\\nfloat a = currentScale - values[prevIndex];\\nfloat b = values[index] - values[prevIndex];\\noutSize = mix(sizes[prevIndex], sizes[index], a / b);\\n}\\n}\\nreturn outSize;\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 8;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nif (sizeValue <= values[0]) {\\nreturn sizes[0];\\n}\\nfor (int i = 1; i < VV_SIZE_N; ++i) {\\nif (values[i] >= sizeValue) {\\nfloat f = (sizeValue - values[i-1]) / (values[i] - values[i-1]);\\nreturn mix(sizes[i-1], sizes[i], f);\\n}\\n}\\nreturn sizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\nif (isNan(opacityValue)) {\\nreturn 1.0;\\n}\\nif (opacityValue <= opacityValues[0]) {\\nreturn opacities[0];\\n}\\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\\nif (opacityValues[i] >= opacityValue) {\\nfloat f = (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\\nreturn mix(opacities[i-1], opacities[i], f);\\n}\\n}\\nreturn opacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat4(1, 0, 0, 0,\\n0, 1, 0, 0,\\n0, 0, 1, 0,\\n0, 0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat4(cosA, sinA, 0, 0,\\n-sinA,  cosA, 0, 0,\\n0,     0, 1, 0,\\n0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat3(1, 0, 0,\\n0, 1, 0,\\n0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * -rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat3(cosA, -sinA, 0,\\nsinA, cosA, 0,\\n0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\nif (isNan(colorValue) || isColorLocked == 1.0) {\\nreturn fallback;\\n}\\nif (colorValue <= colorValues[0]) {\\nreturn colors[0];\\n}\\nfor (int i = 1; i < VV_COLOR_N; ++i) {\\nif (colorValues[i] >= colorValue) {\\nfloat f = (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\\nreturn mix(colors[i-1], colors[i], f);\\n}\\n}\\nreturn colors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nreturn getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\nfloat outSize = getVVScaleStopsSize(currentScale);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\nfloat outSize = getVVStopsSize(vvSize, size);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\nreturn getVVUnitValue(vvSize, size);\\n#else\\nreturn size;\\n#endif\\n}\"},overlay:{overlay:{\"overlay.frag\":\"precision lowp float;\\nuniform lowp sampler2D u_texture;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_texture, v_uv);\\ngl_FragColor = color *  u_opacity;\\n}\",\"overlay.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_uv;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_perspective;\\nuniform highp float u_wrapAroundShift;\\nuniform mediump vec2 u_texSize;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\nv_uv = a_uv / u_texSize;\\nfloat w = 1.0 + dot(a_uv, u_perspective);\\nvec3 pos = u_dvsMat3 * vec3(a_pos + vec2(u_wrapAroundShift, 0.0), 1.0);\\ngl_Position = vec4(w * pos.xy, 0.0, w);\\n}\"}},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\nfloat mirrorFactor = 1.2 - factor;\\nreturn mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\nvec4 color = u_bloomStrength * (\\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n);\\ngl_FragColor = clamp(color, 0.0, 1.0);\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = float(SIGMA);\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 texel = texture2D(u_texture, v_uv);\\nvec3 luma = vec3(0.299, 0.587, 0.114);\\nfloat v = dot(texel.xyz, luma);\\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\ngl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = u_sigma;\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\nfloat samples[10];\\nsamples[0] = -0.08;\\nsamples[1] = -0.05;\\nsamples[2] = -0.03;\\nsamples[3] = -0.02;\\nsamples[4] = -0.01;\\nsamples[5] =  0.01;\\nsamples[6] =  0.02;\\nsamples[7] =  0.03;\\nsamples[8] =  0.05;\\nsamples[9] =  0.08;\\nvec2 dir = 0.5 - v_uv;\\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\ndir = dir / dist;\\nvec4 color = texture2D(u_colorTexture,v_uv);\\nvec4 sum = color;\\nfor (int i = 0; i < 10; i++) {\\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n}\\nsum *= 1.0 / 11.0;\\nfloat t = dist * sampleStrength;\\nt = clamp(t, 0.0, 1.0);\\ngl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\nvec4 color = texture2D(u_texture, v_uv);\\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\nvec3 colorUnpremultiply = color.rgb / color.a;\\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\nvec2 onePixel = vec2(1.0) / u_srcResolution;\\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\\nvec4 minColor = vec4(1.0);\\nvec4 maxColor = vec4(0.0);\\nfor (int y = 0; y < CELL_SIZE; ++y) {\\nfor (int x = 0; x < CELL_SIZE; ++x) {\\nvec2 offset = uv + vec2(x, y) * onePixel;\\nminColor = min(minColor, texture2D(u_minTexture, offset));\\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n}\\n}\\ngl_FragData[0] = minColor;\\ngl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nuniform vec2 u_shadowOffset;\\nuniform highp mat3 u_displayViewMat3;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"}},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\nG[0] = g0,\\nG[1] = g1,\\nG[2] = g2,\\nG[3] = g3,\\nG[4] = g4,\\nG[5] = g5,\\nG[6] = g6,\\nG[7] = g7,\\nG[8] = g8;\\nmat3 I;\\nfloat cnv[9];\\nvec3 sample;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 9; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nvec4 color = texture2D(u_colorTexture, v_uv);\\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_colorTexture, v_uv);\\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\nfloat a = color.a;\\ngl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{bitmap:{\"bitmap.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform highp vec2 u_coordScale;\\nuniform lowp float u_opacity;\\n#include <filtering/bicubic.glsl>\\nvoid main() {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\\n#else\\nvec4 color = texture2D(u_texture, v_texcoord);\\n#endif\\ngl_FragColor = vec4(color.rgb * u_opacity, color.a * u_opacity);\\n}\",\"bitmap.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"},common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\ntargetLocation = projectPixelLocation(targetLocation);\\n#endif\\nreturn targetLocation;\\n}\\nbool isOutside(vec2 coords){\\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\nvec4 color = texture2D(u_image, pixelLocation);\\n#endif\\nreturn color;\\n}\",\"common.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos * u_scale + u_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\",\"contrastBrightness.glsl\":\"uniform float u_contrastOffset;\\nuniform float u_brightnessOffset;\\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\\nfloat maxI = 255.0;\\nfloat mid = 128.0;\\nfloat c = u_contrastOffset;\\nfloat b = u_brightnessOffset;\\nvec4 v;\\nif (c > 0.0 && c < 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\\n} else if (c <= 0.0 && c > -100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\\n} else if (c == 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\\nv = (sign(v) + 1.0) / 2.0;\\n} else if (c == -100.0) {\\nv = vec4(mid, mid, mid, currentPixel.a);\\n}\\nvec3 rgb = clamp(v.rgb / 255.0, 0.0, 1.0);\\nreturn vec4(rgb, currentPixel.a);\\n}\",\"getSurfaceValues.glsl\":\"#include <raster/common/mirror.glsl>\\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\\nvec2 onePixel = 1.0 / srcImageSize;\\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\\nvalues[0] = va.r;\\nvalues[1] = vb.r;\\nvalues[2] = vc.r;\\nvalues[3] = vd.r;\\nvalues[4] = ve.r;\\nvalues[5] = vf.r;\\nvalues[6] = vg.r;\\nvalues[7] = vh.r;\\nvalues[8] = vi.r;\\nvalues[9] = alpha;\\n}\",\"inverse.glsl\":\"float invertValue(float value) {\\nfloat s = sign(value);\\nreturn (s * s) / (value + abs(s) - 1.0);\\n}\",\"mirror.glsl\":\"vec2 mirror(vec2 pos) {\\nvec2 pos1 = abs(pos);\\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n#ifdef LOOKUP_PROJECTION\\nvec4 pv = texture2D(u_transformGrid, coords);\\nreturn vec2(pv.r, pv.g);\\n#endif\\nvec2 index_image = floor(coords * u_targetImageSize);\\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\nvec2 srcLocation;\\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\\nif (pos.s <= pos.t) {\\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n} else {\\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n}\\nreturn srcLocation;\\n}\"},flow:{\"getFadeOpacity.glsl\":\"uniform float u_decayRate;\\nuniform float u_fadeToZero;\\nfloat getFadeOpacity(float x) {\\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\\n}\",\"getFragmentColor.glsl\":\"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\\nif (dist > featheringStart) {\\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\\n}\\nreturn color;\\n}\",imagery:{\"imagery.frag\":\"precision highp float;\\nvarying vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform float u_Min;\\nuniform float u_Max;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nfloat getIntensity(float v) {\\nreturn u_Min + v * (u_Max - u_Min);\\n}\\nvoid main(void) {\\nvec4 sampled = texture2D(u_texture, v_texcoord);\\nfloat intensity = getIntensity(sampled.r);\\ngl_FragColor = getColor(intensity);\\ngl_FragColor.a *= getOpacity(sampled.r);\\ngl_FragColor.a *= sampled.a;\\ngl_FragColor.rgb *= gl_FragColor.a;\\n}\",\"imagery.vert\":\"attribute vec2 a_position;\\nattribute vec2 a_texcoord;\\nuniform mat3 u_dvsMat3;\\nvarying vec2 v_texcoord;\\nvoid main(void) {\\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},particles:{\"particles.frag\":\"precision highp float;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/getFragmentColor.glsl>\\nvoid main(void) {\\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\\n}\",\"particles.vert\":\"attribute vec4 a_xyts0;\\nattribute vec4 a_xyts1;\\nattribute vec4 a_typeIdDurationSeed;\\nattribute vec4 a_extrudeInfo;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/vv.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nvec2 position0 = a_xyts0.xy;\\nfloat t0 = a_xyts0.z;\\nfloat speed0 = a_xyts0.w;\\nvec2 position1 = a_xyts1.xy;\\nfloat t1 = a_xyts1.z;\\nfloat speed1 = a_xyts1.w;\\nfloat type = a_typeIdDurationSeed.x;\\nfloat id = a_typeIdDurationSeed.y;\\nfloat duration = a_typeIdDurationSeed.z;\\nfloat seed = a_typeIdDurationSeed.w;\\nvec2 e0 = a_extrudeInfo.xy;\\nvec2 e1 = a_extrudeInfo.zw;\\nfloat animationPeriod = duration + u_trailLength;\\nfloat scaledTime = u_time * u_flowSpeed;\\nfloat randomizedTime = scaledTime + seed * animationPeriod;\\nfloat t = mod(randomizedTime, animationPeriod);\\nfloat fUnclamped = (t - t0) / (t1 - t0);\\nfloat f = clamp(fUnclamped, 0.0, 1.0);\\nfloat clampedTime = mix(t0, t1, f);\\nfloat speed = mix(speed0, speed1, f);\\nvec2 extrude;\\nvec2 position;\\nfloat fadeOpacity;\\nfloat introOpacity;\\nif (type == 2.0) {\\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nvec2 ortho = mix(e0, e1, f);\\nvec2 parallel;\\nparallel = normalize(position1 - position0) * 0.5;\\nif (id == 1.0) {\\nextrude = ortho;\\nv_texcoord = vec2(0.5, 0.0);\\n} else if (id == 2.0) {\\nextrude = -ortho;\\nv_texcoord = vec2(0.5, 1.0);\\n} else if (id == 3.0) {\\nextrude = ortho + parallel;\\nv_texcoord = vec2(1.0, 0.0);\\n} else if (id == 4.0) {\\nextrude = -ortho + parallel;\\nv_texcoord = vec2(1.0, 1.0);\\n}\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else {\\nif (fUnclamped < 0.0) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nif (id == 1.0) {\\nextrude = e0;\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 2.0) {\\nextrude = -e0;\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 3.0) {\\nextrude = mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else if (id == 4.0) {\\nextrude = -mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n}\\n}\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_color.a *= fadeOpacity;\\nv_color.a *= mix(1.0, introOpacity, u_introFade);\\nv_color.rgb *= v_color.a;\\n}\"},streamlines:{\"streamlines.frag\":\"precision highp float;\\nvarying float v_side;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_size;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/getFragmentColor.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\\n}\",\"streamlines.vert\":\"attribute vec3 a_positionAndSide;\\nattribute vec3 a_timeInfo;\\nattribute vec2 a_extrude;\\nattribute float a_speed;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_side;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nvoid main(void) {\\nvec4 lineColor = getColor(a_speed);\\nfloat lineOpacity = getOpacity(a_speed);\\nfloat lineSize = getSize(a_speed);\\nvec2 position = a_positionAndSide.xy;\\nv_side = a_positionAndSide.z;\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_time = a_timeInfo.x;\\nv_totalTime = a_timeInfo.y;\\nv_timeSeed = a_timeInfo.z;\\nv_color = lineColor;\\nv_color.a *= lineOpacity;\\nv_color.rgb *= v_color.a;\\nv_size = lineSize;\\n}\"},\"vv.glsl\":\"#define MAX_STOPS 8\\n#ifdef VV_COLOR\\nuniform float u_color_stops[MAX_STOPS];\\nuniform vec4 u_color_values[MAX_STOPS];\\nuniform int u_color_count;\\n#else\\nuniform vec4 u_color;\\n#endif\\n#ifdef VV_OPACITY\\nuniform float u_opacity_stops[MAX_STOPS];\\nuniform float u_opacity_values[MAX_STOPS];\\nuniform int u_opacity_count;\\n#else\\nuniform float u_opacity;\\n#endif\\n#ifdef VV_SIZE\\nuniform float u_size_stops[MAX_STOPS];\\nuniform float u_size_values[MAX_STOPS];\\nuniform int u_size_count;\\n#else\\nuniform float u_size;\\n#endif\\nuniform float u_featheringOffset;\\nvec4 getColor(float x) {\\n#ifdef VV_COLOR\\nvec4 color = u_color_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_color_count) {\\nbreak;\\n}\\nfloat x1 = u_color_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_color_stops[i];\\nvec4 y2 = u_color_values[i];\\nif (x < x2) {\\nvec4 y1 = u_color_values[i - 1];\\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\ncolor = y2;\\n}\\n}\\n}\\n#else\\nvec4 color = u_color;\\n#endif\\nreturn color;\\n}\\nfloat getOpacity(float x) {\\n#ifdef VV_OPACITY\\nfloat opacity = u_opacity_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_opacity_count) {\\nbreak;\\n}\\nfloat x1 = u_opacity_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_opacity_stops[i];\\nfloat y2 = u_opacity_values[i];\\nif (x < x2) {\\nfloat y1 = u_opacity_values[i - 1];\\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nopacity = y2;\\n}\\n}\\n}\\n#else\\nfloat opacity = u_opacity;\\n#endif\\nreturn opacity;\\n}\\nfloat getSize(float x) {\\n#ifdef VV_SIZE\\nfloat size = u_size_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_size_count) {\\nbreak;\\n}\\nfloat x1 = u_size_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_size_stops[i];\\nfloat y2 = u_size_values[i];\\nif (x < x2) {\\nfloat y1 = u_size_values[i - 1];\\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nsize = y2;\\n}\\n}\\n}\\n#else\\nfloat size = u_size;\\n#endif\\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\\n}\"},hillshade:{\"hillshade.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform int u_hillshadeType;\\nuniform float u_sinZcosAs[6];\\nuniform float u_sinZsinAs[6];\\nuniform float u_cosZs[6];\\nuniform float u_weights[6];\\nuniform vec2 u_factor;\\nuniform float u_minValue;\\nuniform float u_maxValue;\\n#include <raster/lut/colorize.glsl>\\n#include <raster/common/getSurfaceValues.glsl>\\nvec3 rgb2hsv(vec3 c) {\\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\nfloat d = q.x - min(q.w, q.y);\\nfloat e = 1.0e-10;\\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(vec3 c) {\\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\\nvec3 hsv = rgb2hsv(rgb.xyz);\\nhsv.z = hillshade;\\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nif (currentPixel.a == 0.0) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nfloat pv[10];\\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\\nfloat hillshade = 0.0;\\nif (u_hillshadeType == 0){\\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\\nif (z < 0.0)  z = 0.0;\\nhillshade = z;\\n} else {\\nfor (int k = 0; k < 6; k++) {\\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\\nif (z < 0.0) z = 0.0;\\nhillshade = hillshade + z * u_weights[k];\\nif (k == 5) break;\\n}\\n}\\n#ifdef APPLY_COLORMAP\\ngl_FragColor = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\\n#else\\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\\n#endif\\n}\"},lut:{\"colorize.glsl\":\"uniform sampler2D u_colormap;\\nuniform float u_colormapOffset;\\nuniform float u_colormapMaxIndex;\\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\\nvec4 color = texture2D(u_colormap, clrPosition);\\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\\nreturn result;\\n}\",\"lut.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nvec4 result = colorize(currentPixel, 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\\n}\"},magdir:{\"magdir.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nuniform lowp float u_opacity;\\nvoid main() {\\ngl_FragColor = v_color * u_opacity;\\n}\",\"magdir.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nuniform float u_rotation;\\nuniform vec4 u_colors[12];\\nvarying vec4 v_color;\\nvoid main()\\n{\\nfloat angle = a_offset.y + u_rotation;\\n#ifndef ROTATION_GEOGRAPHIC\\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\\n#endif\\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\\nv_color = u_colors[int(a_vv.x)];\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},reproject:{\"reproject.frag\":\"precision mediump float;\\nvarying vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n}\",\"reproject.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_position;\\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\\n}\"},rfx:{aspect:{\"aspect.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nconst float pi = 3.14159265359;\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\\nalpha *= sign(abs(dzx) + abs(dzy));\\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\\nfloat aspect = aspect_rad * 180.0 / pi;\\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\\n}\"},bandarithmetic:{\"bandarithmetic.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nuniform float u_adjustments[3];\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index;\\n#ifdef NDXI\\nindex = (nir - red) * invertValue(nir + red);\\n#elif defined(SR)\\nindex = nir * invertValue(red);\\n#elif defined(CI)\\nindex = nir * invertValue(red) - 1.0;\\n#elif defined(SAVI)\\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\\n#elif defined(TSAVI)\\nfloat s = u_adjustments[0];\\nfloat a = u_adjustments[1];\\nfloat x = u_adjustments[2];\\nfloat y = -a * s + x * (1.0 + s * s);\\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\\n#elif defined(MSAVI)\\nfloat nir2 = 2.0 * nir + 1.0;\\nindex = 0.5 * (nir2 - sqrt(nir2 * nir2 - 8.0 * (nir - red)));\\n#elif defined(GEMI)\\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\\n#elif defined(PVI)\\nfloat a = u_adjustments[0];\\nfloat b = u_adjustments[1];\\nfloat y = sqrt(1.0 + a * a);\\nindex = (nir - a * red - b) * invertValue(y);\\n#elif defined(VARI)\\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\\n#elif defined(MTVI)\\nfloat green = pv2.b;\\nfloat v = sqrt(pow((2.0 * nir + 1.0), 2.0) - (6.0 * nir - 5.0 * sqrt(red)) - 0.5);\\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * invertValue(v);\\n#elif defined(RTVICORE)\\nfloat green = pv2.b;\\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\\n#elif defined(EVI)\\nfloat blue = pv2.b;\\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\\nindex =  (2.5 * (nir - red)) * invertValue(denom);\\n#elif defined(WNDWI)\\nfloat g = pv2.r;\\nfloat n = pv2.g;\\nfloat s = pv2.s;\\nfloat a = u_adjustments[0];\\nfloat denom = g + a * n + (1.0 - a) * s;\\nindex = (g - a * n - (1 - a) * s) * invertValue(denom);\\n#elif defined(BAI)\\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\\n#else\\ngl_FragColor = pv;\\nreturn;\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},compositeband:{\"compositeband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\nuniform sampler2D u_image2;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\nfloat alpha = pv0.a;\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\nalpha *= pv1.a;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\nalpha = alpha * pv1.a * pv2.a;\\n#endif\\ngl_FragColor = vec4(a, b, c, alpha);\\n}\"},computechange:{\"computechange.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef DIFFERENCE\\nresult = a - b;\\n#elif defined(RELATIVE)\\nresult = (a - b) * invertValue(max(abs(a), abs(b)));\\n#endif\\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\\nresult = isInvalid ? 0.0 : result;\\nalpha *= float(!isInvalid);\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},contrast:{\"contrast.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/common/contrastBrightness.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = adjustContrastBrightness(pv, false) ;\\ngl_FragColor = vec4(result.rgb * 255.0, result.a);\\n}\"},convolution:{\"convolution.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\nuniform float u_kernel[25];\\n#include <raster/common/mirror.glsl>\\nvoid main() {\\nvec3 rgb = vec3(0.0, 0.0, 0.0);\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat alpha = 1.0;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\\nalpha *= pv.a;\\n}\\n}\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},curvature:{\"curvature.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform float u_zlFactor;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\\nfloat curvature = 0.0;\\n#ifdef STANDARD\\ncurvature = -u_zlFactor * (d + e);\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n#else\\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\\nfloat g = (-pv[3] + pv[5]) / 2.0;\\nfloat h = (pv[1] - pv[7]) / 2.0;\\nfloat g2 = g * g;\\nfloat h2 = h * h;\\n#ifdef PROFILE\\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\\n#else\\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\\n#endif\\n#endif\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n}\"},extractband:{\"extractband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\ngl_FragColor = vec4(pv2, pv.a);\\n}\"},focalstatistics:{\"focalstatistics.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\n#include <raster/common/mirror.glsl>\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat count = 0.0;\\n#ifdef STDDEV\\nvec3 sum = vec3(0.0, 0.0, 0.0);\\nvec3 sum2 = vec3(0.0, 0.0, 0.0);\\n#endif\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nvec3 rgb = currentPixel.rgb;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\ncount += pv.a;\\n#ifdef MIN\\nrgb = min(rgb, pv.rgb);\\n#elif defined(MAX)\\nrgb = max(rgb, pv.rgb);\\n#elif defined(MEAN)\\nrgb += pv.rgb;\\n#elif defined(STDDEV)\\nsum += pv.rgb;\\nsum2 += (pv.rgb * pv.rgb);\\n#endif\\n}\\n}\\n#ifdef MEAN\\nrgb *= invertValue(count);\\n#elif defined(STDDEV)\\nrgb = sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\\n#endif\\nfloat alpha = step(0.9999, count);\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\n#ifdef FILL\\nrgb = (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\\n#endif\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},grayscale:{\"grayscale.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec3 u_weights;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat value = dot(u_weights, pv.rgb);\\ngl_FragColor = vec4(value, value, value, pv.a);\\n}\"},local:{\"local.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef TWO_IMAGES\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\n#elif defined(CONDITIONAL)\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\n#endif\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef PLUS\\nresult = a + b;\\n#elif defined(MINUS)\\nresult = a - b;\\n#elif defined(TIMES)\\nresult = a * b;\\n#elif defined(DIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOATDIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOORDIVIDE)\\nresult = floor(a * invertValue(b));\\nalpha *= float(abs(sign(b)));\\n#elif defined(SQUARE)\\nresult = a * a;\\n#elif defined(SQRT)\\nresult = sqrt(a);\\n#elif defined(POWER)\\nresult = pow(a, b);\\n#elif defined(LN)\\nresult = a <= 0.0 ? 0.0: log(a);\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_1_0)\\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_2)\\nresult = a <= 0.0 ? 0.0: log2(a);\\nalpha *= float(a > 0.0);\\n#elif defined(EXP)\\nresult = exp(a);\\n#elif defined(EXP_1_0)\\nresult = pow(10.0, a);\\n#elif defined(EXP_2)\\nresult = pow(2.0, a);\\n#elif defined(ROUNDDOWN)\\nresult = floor(a);\\n#elif defined(ROUNDUP)\\nresult = ceil(a);\\n#elif defined(INT)\\nresult = float(sign(a)) * floor(abs(a));\\n#elif defined(MOD)\\nresult = mod(a, b);\\n#elif defined(NEGATE)\\nresult = -a;\\n#elif defined(ABS)\\nresult = abs(a);\\n#elif defined(ACOS)\\nresult = abs(a) > 1.0 ? 0.0: acos(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ACOSH)\\nresult = acosh(a);\\n#elif defined(ASIN)\\nresult = abs(a) > 1.0 ? 0.0: asin(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ASINH)\\nresult = asinh(a);\\n#elif defined(ATAN)\\nresult = atan(a);\\n#elif defined(ATANH)\\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\\nalpha *= step(abs(a), 1.0);\\n#elif defined(ATAN_2)\\nresult = atan(a, b);\\n#elif defined(COS)\\nresult = cos(a);\\n#elif defined(COSH)\\nresult = cosh(a);\\n#elif defined(SIN)\\nresult = sin(a);\\n#elif defined(SINH)\\nresult = sinh(a);\\n#elif defined(TAN)\\nresult = tan(a);\\n#elif defined(TANH)\\nresult = tanh(a);\\n#elif defined(BITWISEAND)\\nresult = a & b;\\n#elif defined(BITWISEOR)\\nresult = a | b;\\n#elif defined(BITWISELEFTSHIFT)\\nresult = a << b;\\n#elif defined(BITWISERIGHTSHIFT)\\nresult = a >> b;\\n#elif defined(BITWISENOT)\\nresult = ~a;\\n#elif defined(BITWISEXOR)\\nresult = a ^ b;\\n#elif defined(BOOLEANAND)\\nresult = float((a != 0.0) && (b != 0.0));\\n#elif defined(BOOLEANNOT)\\nresult = float(a == 0.0);\\n#elif defined(BOOLEANOR)\\nresult = float((a != 0.0) || (b != 0.0));\\n#elif defined(BOOLEANXOR)\\nresult = float((a != 0.0) ^^ (b != 0.0));\\n#elif defined(GREATERTHAN)\\nresult = float(a > b);\\n#elif defined(GREATERTHANEQUAL)\\nresult = float(a >= b);\\n#elif defined(LESSTHAN)\\nresult = float(a < b);\\n#elif defined(LESSTHANEQUAL)\\nresult = float(a <= b);\\n#elif defined(EQUALTO)\\nresult = float(a == b);\\n#elif defined(NOTEQUAL)\\nresult = float(a != b);\\n#elif defined(ISNULL)\\nresult = float(alpha == 0.0);\\nalpha = 1.0;\\n#elif defined(SETNULL)\\nfloat maskValue = float(a == 0.0);\\nresult = maskValue * b;\\nalpha *= maskValue;\\n#elif defined(CONDITIONAL)\\nfloat weight = float(abs(sign(a)));\\nresult = weight * b + (1.0 - weight) * c;\\n#endif\\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\\nresult = isInvalid ? 0.0 : result;\\nalpha *= float(!isInvalid);\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},mask:{\"mask.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_INCLUDED_RANGES 6\\n#define LEN_NODATA_VALUES 6\\nuniform highp float u_includedRanges[6];\\nuniform highp float u_noDataValues[6];\\nfloat maskFactor(float bandValue, float fromValue, float to) {\\nfloat factor = 1.0;\\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\\nfactor *= float(u_noDataValues[i] != bandValue);\\n}\\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\\nreturn factor;\\n}\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\\n#ifdef MULTI_BAND\\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\\nfloat maskFactor = redFactor * greenFactor * blueFactor;\\ngl_FragColor = pv * maskFactor;\\n#else\\ngl_FragColor = pv * redFactor;\\n#endif\\n}\"},ndvi:{\"ndvi.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index = (nir - red) * invertValue(nir + red);\\n#ifdef SCALED\\nindex = floor((index + 1.0) * 100.0 + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},remap:{\"remap.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_REMAP_RANGES 18\\n#define LEN_NODATA_RANGES 12\\nuniform highp float u_rangeMaps[18];\\nuniform highp float u_noDataRanges[12];\\nuniform highp float u_unmatchMask;\\nuniform vec2 u_clampRange;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat factor = 1.0;\\nfloat bandValue = pv.r;\\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\\nfactor *= inside;\\n}\\nfloat mapValue = 0.0;\\nfloat includeMask = 0.0;\\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\\n}\\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\\n}\"},slope:{\"slope.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform float u_zFactor;\\nuniform vec2 u_srcImageSize;\\nuniform float u_pixelSizePower;\\nuniform float u_pixelSizeFactor;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\\n#ifdef PERCENT_RISE\\nfloat percentRise = rise2run * 100.0;\\ngl_FragColor = vec4(percentRise, percentRise, percentRise, alpha);\\n#else\\nfloat degree = atan(rise2run) * 57.2957795;\\ngl_FragColor = vec4(degree, degree, degree, alpha);\\n#endif\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying highp vec2 v_texcoord;\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\\nval = clamp(val, minCutOff, maxCutOff);\\nfloat stretchedVal;\\n#ifdef USE_GAMMA\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\\n#else\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n#endif\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\\n#ifdef MULTI_BAND\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\\n#else\\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\\n#endif\\n}\"},vs:{\"vs.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"}},scalar:{\"scalar.frag\":\"precision mediump float;\\nuniform lowp float u_opacity;\\nvarying vec2 v_pos;\\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\\nconst float outlineSize = 0.02;\\nconst float innerRadius = 0.25;\\nconst float outerRadius = 0.42;\\nconst float innerSquareLength = 0.15;\\nvoid main() {\\nmediump float dist = length(v_pos);\\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\\n#ifdef INNER_CIRCLE\\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\\n#else\\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\\n#endif\\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\\n}\",\"scalar.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nvarying vec2 v_pos;\\nvoid main()\\n{\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 size = u_symbolSize * sizePercentage;\\nvec2 pos = a_pos + a_offset * size;\\nv_pos = a_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform bool u_useGamma;\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\n#include <raster/lut/colorize.glsl>\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\\nif (val >= maxCutOff) {\\nreturn maxOutput;\\n} else if (val <= minCutOff) {\\nreturn minOutput;\\n}\\nfloat stretchedVal;\\nif (useGamma) {\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\nif (gamma > 1.0) {\\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\\n}\\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\\n} else {\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n}\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\n#ifdef NOOP\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\nreturn;\\n#endif\\nif (u_bandCount == 1) {\\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n#ifdef APPLY_COLORMAP\\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\\n#else\\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\\n#endif\\n} else {\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\\n}\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nuniform mat3 u_worldExtent;\\nvoid main() {\\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\\n}\"},test:{\"TestShader.common.glsl\":\"#ifndef RETURN_RED\\nvarying    vec4      v_color;\\n#endif\\nvarying    vec2      v_offset;\",\"TestShader.frag\":\"precision highp float;\\n#include <test/TestShader.common.glsl>\\nvoid main() {\\nif (v_offset.x > -.5 && v_offset.y > -.5 && v_offset.x < .5 && v_offset.y < .5) {\\ndiscard;\\n}\\n#ifdef RETURN_RED\\ngl_FragColor = vec4(1., 0., 0., 1.);\\n#else\\ngl_FragColor = v_color;\\n#endif\\n}\",\"TestShader.vert\":\"const float POS_PRECISION_FACTOR = 10.;\\nconst float OFFSET_PRECISION_FACTOR = 10.;\\nconst float SIZE_PRECISION_FACTOR = 10.;\\nattribute  vec2      a_pos_packed;\\nattribute  vec2      a_offset_packed;\\nattribute  float     a_size_packed;\\n#ifdef DATA_DRIVEN_COLOR\\nconst float u_dataDrivenColor_validValues[4] = float[4](0., 0., 1., 0.);\\nuniform    vec4      u_dataDrivenColor_colorFallback;\\nuniform    vec4      u_dataDrivenColor_color;\\n#endif\\nuniform    float     u_view_zoomLevel;\\n#include <test/TestShader.common.glsl>\\n#ifdef DATA_DRIVEN_COLOR\\nvec4 getColor(float value) {\\nint index = -1;\\nfor (int i = 0; i < 4; i++) {\\nif (u_dataDrivenColor_validValues[i] == value) {\\nindex = i;\\nbreak;\\n}\\n}\\nif (index == -1) {\\nreturn u_dataDrivenColor_colorFallback;\\n}\\nreturn u_dataDrivenColor_color;\\n}\\n#endif\\nvoid main() {\\nvec2  a_pos = a_pos_packed / POS_PRECISION_FACTOR;\\nvec2  a_offset = a_offset_packed / OFFSET_PRECISION_FACTOR;\\nfloat a_size = a_size_packed / SIZE_PRECISION_FACTOR;\\nvec4 color = vec4(1., 0., 0., 1.);\\n#ifdef DATA_DRIVEN_COLOR\\ncolor = getColor(1.);\\n#endif\\nvec2 offsetScaled = a_offset * a_size;\\nvec4 pos = vec4(a_pos.xy + offsetScaled, 0., 1.);\\ngl_Position = pos;\\n#ifndef RETURN_RED\\nv_color = color;\\n#endif\\nv_offset = a_offset;\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\nlowp vec4 color = texture2D(u_texture, v_tex);\\ncolor.rgb *= color.a;\\ngl_FragColor = color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\nv_tex = a_pos;\\n}\"},util:{\"atan2.glsl\":\"float atan2(in float y, in float x) {\\nfloat t0, t1, t2, t3, t4;\\nt3 = abs(x);\\nt1 = abs(y);\\nt0 = max(t3, t1);\\nt1 = min(t3, t1);\\nt3 = 1.0 / t0;\\nt3 = t1 * t3;\\nt4 = t3 * t3;\\nt0 =         - 0.013480470;\\nt0 = t0 * t4 + 0.057477314;\\nt0 = t0 * t4 - 0.121239071;\\nt0 = t0 * t4 + 0.195635925;\\nt0 = t0 * t4 - 0.332994597;\\nt0 = t0 * t4 + 0.999995630;\\nt3 = t0 * t3;\\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\\nt3 = y < 0.0 ? -t3 : t3;\\nreturn t3;\\n}\",\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, rgba2float_factors);\\n}\"}};export{e as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import r from\"../../../../core/Logger.js\";import{e as t}from\"../../../../chunks/earcut.js\";import{set as n}from\"../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as o}from\"../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{convertFromNestedArray as s,convertFromPolygon as i}from\"../../../../layers/graphics/featureConversionUtils.js\";import c from\"../../../../layers/graphics/OptimizedGeometry.js\";import{i1616to32 as a}from\"./number.js\";import{BufferObject as f}from\"../../../webgl/BufferObject.js\";import{PrimitiveType as m,Usage as h,DataType as u}from\"../../../webgl/enums.js\";const l=r=>{switch(r.BYTES_PER_ELEMENT){case 1:return u.UNSIGNED_BYTE;case 2:return u.UNSIGNED_SHORT;case 4:return u.UNSIGNED_INT;default:throw new e(\"Cannot get DataType of array\")}},y=(e,r,t,n)=>{let o=0;for(let s=1;s<t;s++){const t=e[2*(r+s-1)],n=e[2*(r+s-1)+1];o+=(e[2*(r+s)]-t)*(e[2*(r+s)+1]+n)}return n?o>0:o<0},x=({coords:e,lengths:r},n)=>{const o=[];for(let s=0,i=0;s<r.length;i+=r[s],s+=1){const c=i,a=[];for(;s<r.length-1&&y(e,i+r[s],r[s+1],n);s+=1,i+=r[s])a.push(i+r[s]-c);const f=e.slice(2*c,2*(i+r[s])),m=t(f,a,2);for(const e of m)o.push(e+c)}return o};class g{constructor(e,r,t,n=!1){this._cache={},this.vertices=e,this.indices=r,this.primitiveType=t,this.isMapSpace=n}static fromPath(e){const r=s(new c,e.path,!1,!1),t=r.coords,n=new Uint32Array(x(r,!0)),o=new Uint32Array(t.length/2);for(let s=0;s<o.length;s++)o[s]=a(Math.floor(t[2*s]),Math.floor(t[2*s+1]));return new g({geometry:o},n,m.TRIANGLES)}static fromGeometry(t,n){const o=n.geometry?.type;switch(o){case\"polygon\":return g.fromPolygon(t,n.geometry);case\"extent\":return g.fromMapExtent(t,n.geometry);default:return r.getLogger(\"esri.views.2d.engine.webgl.Mesh2D\").error(new e(\"mapview-bad-type\",`Unable to create a mesh from type ${o}`,n)),g.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}static fromPolygon(e,r){const t=i(new c,r,!1,!1),s=t.coords,f=new Uint32Array(x(t,!1)),h=new Uint32Array(s.length/2),u=o(),l=o();for(let o=0;o<h.length;o++)n(u,s[2*o],s[2*o+1]),e.toScreen(l,u),h[o]=a(Math.floor(l[0]),Math.floor(l[1]));return new g({geometry:h},f,m.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:r,ymin:t,ymax:n}){const o={geometry:new Uint32Array([a(e,t),a(r,t),a(e,n),a(e,n),a(r,t),a(r,n)])},s=new Uint32Array([0,1,2,3,4,5]);return new g(o,s,m.TRIANGLES)}static fromMapExtent(e,r){const[t,n]=e.toScreen([0,0],[r.xmin,r.ymin]),[o,s]=e.toScreen([0,0],[r.xmax,r.ymax]),i={geometry:new Uint32Array([a(t,n),a(o,n),a(t,s),a(t,s),a(o,n),a(o,s)])},c=new Uint32Array([0,1,2,3,4,5]);return new g(i,c,m.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose();for(const e in this._cache.vertexBuffers)null!=this._cache.vertexBuffers[e]&&this._cache.vertexBuffers[e].dispose()}get elementType(){return l(this.indices)}getIndexBuffer(e,r=h.STATIC_DRAW){return this._cache.indexBuffer||(this._cache.indexBuffer=f.createIndex(e,r,this.indices)),this._cache.indexBuffer}getVertexBuffers(e,r=h.STATIC_DRAW){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce(((t,n)=>({...t,[n]:f.createVertex(e,r,this.vertices[n])})),{})),this._cache.vertexBuffers}}export{g as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{watch as r}from\"../../../../core/reactiveUtils.js\";import{create as s}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import a from\"./Mesh2D.js\";import{createScreenExtent as o}from\"../../support/clippingUtils.js\";import{VertexArrayObject as h}from\"../../../webgl/VertexArrayObject.js\";class c extends i{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=r((()=>t.version),(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new c(e,t)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,r,s){const[i,a]=t.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===i&&this._lastHeight===a||(this._lastWidth=i,this._lastHeight=a,this._destroyGL()),null==this._cache.vao){const i=this._createMesh(t,this._clip),a=i.getIndexBuffer(e),o=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new h(e,r,s,o,a)}return this._cache.vao}_createTransforms(){return{displayViewScreenMat3:s()}}_invalidate(){this._destroyGL(),this.requestRender()}_createMesh(r,s){switch(s.type){case\"rect\":return a.fromScreenExtent(o(s,r.size[0],r.size[1]));case\"path\":return a.fromPath(s);case\"geometry\":return a.fromGeometry(r,s);default:return t.getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\").error(new e(\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),a.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}}export{c as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{brushes as s}from\"../brushes.js\";import{Container as e}from\"../Container.js\";import r from\"./ClippingInfo.js\";import{WGLDrawPhase as i}from\"./enums.js\";class n extends e{set clips(s){super.clips=s,this._updateClippingInfo(s)}renderChildren(s){s.painter.setPipelineState(null),null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(s.painter));for(const r of this._renderPasses)try{r.render(s)}catch(e){}}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[s.clip],target:()=>this._clippingInfos,drawPhase:i.MAP|i.LABEL|i.LABEL_ALPHA|i.DEBUG|i.HIGHLIGHT})]}_updateClippingInfo(s){null!=this._clippingInfos&&(this._clippingInfos.forEach((s=>s.destroy())),this._clippingInfos=null),null!=s&&s.length&&(this._clippingInfos=s.items.map((s=>r.fromClipArea(this.stage,s)))),this.requestRender()}}export{n as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{textureBindingBitmap as e}from\"../definitions.js\";import t from\"../VertexStream.js\";import i from\"./WGLBrush.js\";import{TextureSamplingMode as s,BlendFactor as n,CompareFunction as a}from\"../../../../webgl/enums.js\";const r={nearest:{defines:[],samplingMode:s.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:s.LINEAR,mips:!1},bicubic:{defines:[\"bicubic\"],samplingMode:s.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:s.LINEAR_MIPMAP_LINEAR,mips:!0}},o=(e,t,i)=>{if(\"dynamic\"===i.samplingMode){const{state:i}=e,s=t.resolution/t.pixelRatio/i.resolution,n=Math.round(e.pixelRatio)!==e.pixelRatio,a=s>1.05||s<.95;return i.rotation||a||n||t.isSourceScaled||t.rotation?r.bilinear:r.nearest}return r[i.samplingMode]};class d extends i{constructor(){super(...arguments),this._desc={vsPath:\"raster/bitmap\",fsPath:\"raster/bitmap\",attributes:new Map([[\"a_pos\",0]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e}){e.setBlendingEnabled(!0),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0)}draw(i,s){const{context:r,renderingOptions:d,painter:l,requestRender:c,allowDelayedRender:m}=i;if(!s.source||!s.isReady)return;const p=o(i,s,d),u=l.materialManager.getProgram(this._desc,p.defines);if(m&&null!=c&&!u.compiled)return void c();i.timeline.begin(this.name),\"additive\"===s.blendFunction?r.setBlendFunctionSeparate(n.ONE,n.ONE,n.ONE,n.ONE):r.setBlendFunctionSeparate(n.ONE,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA),r.setStencilFunction(a.EQUAL,s.stencilRef,255),this._quad||(this._quad=new t(r,[0,0,1,0,0,1,1,1]));const{coordScale:f,computedOpacity:_,transforms:M}=s;s.setSamplingProfile(p),s.bind(i.context,e),r.useProgram(u),u.setUniformMatrix3fv(\"u_dvsMat3\",M.displayViewScreenMat3),u.setUniform1i(\"u_texture\",e),u.setUniform2fv(\"u_coordScale\",f),u.setUniform1f(\"u_opacity\",_),this._quad.draw(),i.timeline.end(this.name)}}export{d as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import{assertIsSome as t}from\"../../../../core/maybe.js\";import{FreeList as e}from\"./cpuMapped/FreeList.js\";const r=has(\"esri-2d-log-allocations\");class s{static create(t,e){const r=e.acquireUint32Array(t);return new s(r,e)}constructor(t,e){this._array=t,this._pool=e}get array(){return this._array}get length(){return this._array.length}getUint32View(t,e){return new Uint32Array(this._array.buffer,t+this._array.byteOffset,e)}expand(t){if(t<=this._array.byteLength)return;const e=this._pool.acquireUint32Array(t);e.set(this._array),this._pool.releaseUint32Array(this._array),this._array=e}destroy(){this._pool.releaseUint32Array(this._array)}}class a{constructor(){this._data=new ArrayBuffer(a.BYTE_LENGTH),this._freeList=new e({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(t){const e=this._freeList.firstFit(t);return null==e?null:new Uint32Array(this._data,e,t/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(t){this._freeList.free(t.byteOffset,t.byteLength)}}class i{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*a.BYTE_LENGTH}acquireUint32Array(e){if(this._bytesAllocated+=e,r&&console.log(`Allocating ${e}, (${this._bytesAllocated} / ${this._bytesTotal})`),e>=a.BYTE_LENGTH)return new Uint32Array(e/Uint32Array.BYTES_PER_ELEMENT);for(const t of this._pages){const r=t.acquireUint32Array(e);if(null!=r)return r}const s=this._addPage().acquireUint32Array(e);return t(s,\"Expected to allocate page\"),s}releaseUint32Array(t){this._bytesAllocated-=t.byteLength,r&&console.log(`Freeing ${t.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const e=this._pagesByBuffer.get(t.buffer);e&&e.releaseUint32Array(t)}_addPage(){const t=new a;return this._pages.push(t),this._pagesByBuffer.set(t.buffer,t),t}}export{i as ArrayBufferPool,s as PooledUint32Array};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass t{constructor(t,e,s,r,i,h,n){this.instanceId=t,this.textureKey=e,this.indexStart=s,this.indexCount=r,this.vertexStart=i,this.vertexCount=h,this.overlaps=n}updateBaseOffsets(t){this.vertexStart+=t.vertexFrom,this.indexStart+=t.indexFrom}clone(){return new t(this.instanceId,this.textureKey,this.indexStart,this.indexCount,this.vertexStart,this.vertexCount,this.overlaps)}static write(t,e,s,r,i,h,n,a){t.push(e),t.push(s),t.push(r),t.push(i),t.push(h),t.push(n),t.push(a)}serialize(t){return t.push(this.instanceId),t.push(this.textureKey),t.push(this.indexStart),t.push(this.indexCount),t.push(this.vertexStart),t.push(this.vertexCount),t.push(this.overlaps),t}static deserialize(e){const s=e.readInt32(),r=e.readInt32(),i=e.readInt32(),h=e.readInt32(),n=e.readInt32(),a=e.readInt32(),u=e.readInt32();return new t(s,r,i,h,n,a,u)}}t.byteSizeHint=7*Uint32Array.BYTES_PER_ELEMENT;export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as t}from\"../DefaultVertexAttributeLayouts.js\";import{FeatureTile as r}from\"../FeatureTile.js\";import o from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{tileInfo as s}from\"../shaders/TileInfoPrograms.js\";import{BufferObject as n}from\"../../../../webgl/BufferObject.js\";import{BlendFactor as l,PrimitiveType as a,Usage as f,TextureWrapMode as m,TextureSamplingMode as u}from\"../../../../webgl/enums.js\";import{createProgram as c}from\"../../../../webgl/ProgramTemplate.js\";import{Texture as d}from\"../../../../webgl/Texture.js\";import{TextureDescriptor as h}from\"../../../../webgl/TextureDescriptor.js\";import{VertexArrayObject as g}from\"../../../../webgl/VertexArrayObject.js\";const _=512,x=512,b=16,p=8,T=(x-2*p)/5;class y extends o{constructor(){super(...arguments),this._color=e(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(l.ONE,l.ONE_MINUS_SRC_ALPHA,l.ONE,l.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:o,requestRender:i,allowDelayedRender:s}=e;if(!t.isReady&&t instanceof r&&t.hasData)return;if(this._loadWGLResources(o),s&&null!=i&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void i();o.bindVAO(this._outlineVertexArrayObject),o.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f(\"u_coord_range\",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),o.drawArrays(a.LINE_STRIP,0,4);const n=this._getTexture(o,t);n?(o.bindVAO(this._tileInfoVertexArrayObject),o.useProgram(this._tileInfoProgram),o.bindTexture(n,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f(\"u_delta\",0,0),this._tileInfoProgram.setUniform2f(\"u_dimensions\",n.descriptor.width,n.descriptor.height),o.drawArrays(a.TRIANGLE_STRIP,0,4),o.bindVAO()):o.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const r=c(e,i),o=c(e,s),l=new Int8Array([0,0,1,0,1,1,0,1]),a=n.createVertex(e,f.STATIC_DRAW,l),m=new g(e,i.attributes,t,{geometry:a}),u=new Int8Array([0,0,1,0,0,1,1,1]),d=n.createVertex(e,f.STATIC_DRAW,u),h=new g(e,s.attributes,t,{geometry:d});this._outlineProgram=r,this._tileInfoProgram=o,this._outlineVertexArrayObject=m,this._tileInfoVertexArrayObject=h}_getTexture(e,t){if(!this._ctx){const e=document.createElement(\"canvas\");e.width=_,e.height=x,this._ctx=e.getContext(\"2d\")}if(!t.tileDebugInfoTexture){const r=new h;r.wrapMode=m.CLAMP_TO_EDGE,r.samplingMode=u.LINEAR,r.isImmutable=!0,r.width=_,r.height=x,t.tileDebugInfoTexture=new d(e,r)}const r=this._ctx;r.clearRect(0,0,r.canvas.width,r.canvas.height),r.textAlign=\"left\",r.textBaseline=\"top\",r.font=b-2+\"px sans-serif\",r.lineWidth=2,r.fillStyle=\"white\",r.strokeStyle=\"black\";const{debugSlot:o}=t;let i=p+T*o;const s=`${o}) ${t.key.id} (${t.constructor.name})`;r.strokeText(s,p,i),r.fillText(s,p,i),i+=b;const{debugInfo:n}=t;if(n){const{length:e,minOrderedLength:t,minUnorderedLength:o,triangleCount:s}=n.display;if(e>0){const t=`Length: ${e}`;r.strokeText(t,p,i),r.fillText(t,p,i),i+=b}if(t){const e=`Min ordered length: ${t}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(o){const e=`Min unordered length: ${o}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(s>0){s>1e5&&(r.fillStyle=\"red\",r.strokeStyle=\"white\");const e=`Triangle count: ${s}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}const{bytesUsed:l,bytesReserved:a}=n.memory;if(r.fillStyle=\"white\",r.strokeStyle=\"black\",l>0||a>0){const e=`Memory usage: ${l} of ${a} bytes`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}}return t.tileDebugInfoTexture.setData(r.canvas),t.tileDebugInfoTexture}}export{y as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass t{constructor(a){if(this.next=null,!Array.isArray(a))return void(this.data=a);this.data=a[0];let e=this;for(let n=1;n<a.length;n++)e.next=new t([a[n]]),e=e.next}*values(){let t=this;for(;t;)yield t.data,t=t.next}forEach(t){let a=this;for(;a;)t(a.data),a=a.next}get last(){return this.next?this.next.last:this}}class a{constructor(a){this._head=null,null!=a&&(this._head=new t(a))}get head(){return this._head}maxAvailableSpace(){if(null==this._head)return 0;let t=0;return this._head.forEach((a=>{const e=a.end-a.start;t=Math.max(t,e)})),t}firstFit(t){if(null==this._head)return null;let a=null,e=this._head;for(;e;){const n=e.data.end-e.data.start;if(n===t)return a?a.next=e.next:this._head=e.next,e.data.start;if(n>t){const a=e.data.start;return e.data.start+=t,a}a=e,e=e.next}return null}free(a,e){const n=a+e;if(null==this._head){const e=new t({start:a,end:n});return void(this._head=e)}if(n<=this._head.data.start){if(n===this._head.data.start)return void(this._head.data.start-=e);const r=new t({start:a,end:n});return r.next=this._head,void(this._head=r)}let r=this._head,d=r.next;for(;d;){if(d.data.start>=n){if(r.data.end===a){if(r.data.end+=e,r.data.end===d.data.start){const t=d.data.end-d.data.start;return r.data.end+=t,void(r.next=d.next)}return}if(d.data.start===n)return void(d.data.start-=e);const s=new t({start:a,end:n});return s.next=r.next,void(r.next=s)}r=d,d=d.next}if(a===r.data.end)return void(r.data.end+=e);const s=new t({start:a,end:n});r.next=s}clear(){this._head=null}}export{a as FreeList,t as List};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as r}from\"./sources/resolver.js\";const e={shaders:{vertexShader:r(\"background/background.vert\"),fragmentShader:r(\"background/background.frag\")},attributes:new Map([[\"a_pos\",0]])};export{e as background};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nfunction e(e,n){if(null!==n){e.push(n.length);for(const r of n)r.serialize(e);return e}e.push(0)}function n(e,n,r){const t=e.readInt32(),o=new Array(t);for(let i=0;i<o.length;i++)o[i]=n.deserialize(e,r);return o}export{n as deserializeList,e as serializeList};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{toUint16 as t,fromUint16 as e}from\"../../../number.js\";import{DataType as n}from\"../../../../../../webgl/enums.js\";function o(e,o,s,f){const r=s.packPrecisionFactor??1;switch(s.type){case n.BYTE:if(1===s.count)e.setInt8(f+s.offset,o*r);else for(let t=0;t<s.count;t++){const n=t*Int8Array.BYTES_PER_ELEMENT;e.setInt8(f+s.offset+n,o[t]*r)}break;case n.UNSIGNED_BYTE:if(1===s.count)e.setUint8(f+s.offset,o*r);else for(let t=0;t<s.count;t++){const n=t*Uint8Array.BYTES_PER_ELEMENT;e.setUint8(f+s.offset+n,o[t]*r)}break;case n.SHORT:if(1===s.count)e.setInt16(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Int16Array.BYTES_PER_ELEMENT;e.setInt16(f+s.offset+n,o[t]*r,!0)}break;case n.UNSIGNED_SHORT:if(1===s.count)e.setUint16(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Uint16Array.BYTES_PER_ELEMENT;e.setUint16(f+s.offset+n,o[t]*r,!0)}break;case n.INT:if(1===s.count)e.setInt32(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Int32Array.BYTES_PER_ELEMENT;e.setInt32(f+s.offset+n,o[t]*r,!0)}break;case n.UNSIGNED_INT:if(1===s.count)e.setUint32(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Uint32Array.BYTES_PER_ELEMENT;e.setUint32(f+s.offset+n,o[t]*r,!0)}break;case n.FLOAT:if(1===s.count)e.setFloat32(f+s.offset,o*r,!0);else for(let t=0;t<s.count;t++){const n=t*Float32Array.BYTES_PER_ELEMENT;e.setFloat32(f+s.offset+n,o[t]*r,!0)}break;case n.HALF_FLOAT:if(1===s.count)e.setUint16(f+s.offset,t(o*r),!0);else for(let n=0;n<s.count;n++){const E=n*Uint16Array.BYTES_PER_ELEMENT;e.setUint16(f+s.offset+E,t(o[n]*r),!0)}}}function s(t,o,s){switch(o.type){case n.BYTE:{if(1===o.count)return t.getInt8(s+o.offset);const e=[];for(let n=0;n<o.count;n++){const f=n*Int8Array.BYTES_PER_ELEMENT;e.push(t.getInt8(s+o.offset+f))}return e}case n.UNSIGNED_BYTE:{if(1===o.count)return t.getUint8(s+o.offset);const e=[];for(let n=0;n<o.count;n++){const f=n*Uint8Array.BYTES_PER_ELEMENT;e.push(t.getUint8(s+o.offset+f))}return e}case n.SHORT:{if(1===o.count)return t.getInt16(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Int16Array.BYTES_PER_ELEMENT;e.push(t.getInt16(s+o.offset+f,!0))}return e}case n.UNSIGNED_SHORT:{if(1===o.count)return t.getUint16(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Uint16Array.BYTES_PER_ELEMENT;e.push(t.getUint16(s+o.offset+f,!0))}return e}case n.INT:{if(1===o.count)return t.getInt32(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Int32Array.BYTES_PER_ELEMENT;e.push(t.getInt32(s+o.offset+f,!0))}return e}case n.UNSIGNED_INT:{if(1===o.count)return t.getUint32(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Uint32Array.BYTES_PER_ELEMENT;e.push(t.getUint32(s+o.offset+f,!0))}return e}case n.FLOAT:{if(1===o.count)return t.getFloat32(s+o.offset,!0);const e=[];for(let n=0;n<o.count;n++){const f=n*Float32Array.BYTES_PER_ELEMENT;e.push(t.getFloat32(s+o.offset+f,!0))}return e}case n.HALF_FLOAT:{if(1===o.count)return e(t.getUint16(s+o.offset,!0));const n=[];for(let f=0;f<o.count;f++){const r=f*Uint16Array.BYTES_PER_ELEMENT;n.push(e(t.getUint16(s+o.offset+r,!0)))}return n}}}export{o as packDataView,s as unpackDataView};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as e}from\"./sources/resolver.js\";const r={shaders:{vertexShader:e(\"tileInfo/tileInfo.vert\"),fragmentShader:e(\"tileInfo/tileInfo.frag\")},attributes:new Map([[\"a_pos\",0]])};export{r as tileInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as s}from\"../../../../core/libs/gl-matrix-2/math/mat2d.js\";import{create as i}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{set as r,multiply as e,invert as o}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{create as a}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{s as n,t as m}from\"../../../../chunks/vec32.js\";import{create as l}from\"../../../../core/libs/gl-matrix-2/factories/vec3f32.js\";import{tileSize as c}from\"./definitions.js\";import{TiledDisplayObject as h}from\"./TiledDisplayObject.js\";const f=a(),d=l();class p extends h{constructor(t,s,i,r){super(t,s,i,r,c,c)}destroy(){super.destroy()}setTransform(o){const a=this.resolution/o.resolution,n=this.transforms.tileMat3,[m,l]=o.toScreenNoRotation([0,0],[this.x,this.y]),c=this.width/this.rangeX*a,h=this.height/this.rangeY*a;r(n,c,0,0,0,h,0,m,l,1),e(this.transforms.displayViewScreenMat3,o.displayViewMat3,n);const f=this.transforms.labelMat2d,d=window.devicePixelRatio,p=t(i(),c*d,0,0,h*d,m*d,l*d);s(f,o.viewMat2d,p)}_createTransforms(){return{labelMat2d:i(),tileMat3:a(),displayViewScreenMat3:a()}}containsScreenPoint(t,s,i){const r=e(f,t.viewMat3,this.transforms.tileMat3),a=o(f,r);if(null==a)return!0;n(d,...s,1);const l=m(d,d,a),c=i*(this.resolution/t.resolution);return l[0]>=-c&&l[0]<this.width+c&&l[1]>=-c&&l[1]<this.height+c}}export{p as AFeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{CapType as r,JoinType as n}from\"../../../../symbols/cim/enums.js\";import\"../../../../core/RandomLCG.js\";import\"../../../../core/has.js\";import\"../../../webgl/checkWebGLError.js\";import{PixelType as o}from\"../../../webgl/enums.js\";import\"../../../webgl/FramebufferObject.js\";import\"../../../../chunks/builtins.js\";import\"../../../webgl/GLObjectType.js\";import{getDataTypeBytes as i}from\"../../../webgl/getDataTypeBytes.js\";import{Texture as a}from\"../../../webgl/Texture.js\";import{TextureDescriptor as s}from\"../../../webgl/TextureDescriptor.js\";import{VertexElementDescriptor as p}from\"../../../webgl/VertexElementDescriptor.js\";const u=()=>t.getLogger(\"esri.views.2d.engine.webgl.Utils\");function l(t){switch(t){case\"butt\":return r.BUTT;case\"round\":return r.ROUND;case\"square\":return r.SQUARE;default:return u().error(new e(\"mapview-invalid-type\",`Cap type ${t} is not a valid option. Defaulting to round`)),r.ROUND}}function m(t){switch(t){case\"miter\":return n.MITER;case\"bevel\":return n.BEVEL;case\"round\":return n.ROUND;default:return u().error(new e(\"mapview-invalid-type\",`Join type ${t} is not a valid option. Defaulting to round`)),n.ROUND}}function c(t){switch(t){case o.UNSIGNED_BYTE:return 1;case o.UNSIGNED_SHORT_4_4_4_4:return 2;case o.FLOAT:return 4;default:return void u().error(new e(\"webgl-utils\",`Unable to handle type ${t}`))}}function d(t){switch(t){case o.UNSIGNED_BYTE:return Uint8Array;case o.UNSIGNED_SHORT_4_4_4_4:return Uint16Array;case o.FLOAT:return Float32Array;default:return void u().error(new e(\"webgl-utils\",`Unable to handle type ${t}`))}}function f(e){const t={};for(const r in e){const n=e[r];let o=0;t[r]=n.map((e=>{const t=new p(e.name,e.count,e.type,o,0,e.normalized||!1);return o+=e.count*i(e.type),t})),t[r]?.forEach((e=>e.stride=o))}return t}const g=e=>{const t=new Map;for(const r in e)for(const n of e[r])t.set(n.name,n.location);return t},h=e=>{const t={};for(const r in e){const n=e[r];t[r]=n?.length?n[0].stride:0}return t},w=new Map,b=(e,t)=>{if(!w.has(e)){const r=f(t),n={strides:h(r),bufferLayouts:r,attributes:g(t)};w.set(e,n)}return w.get(e)},y=e=>e.includes(\"data:image/svg+xml\");function j(e){const t=[];for(let r=0;r<e.length;r++)t.push(e.charCodeAt(r));return t}const A=e=>!!e&&(e=e.trim(),!!(/^[mzlhvcsqta]\\s*[-+.0-9][^mlhvzcsqta]+/i.test(e)&&/[\\dz]$/i.test(e)&&e.length>4));function T(e,t,r){const n=new s(t.width,t.height);return n.dataType=t.dataType,t.depth&&(n.depth=t.depth),t.flipped&&(n.flipped=t.flipped),t.hasMipmap&&(n.hasMipmap=t.hasMipmap),n.internalFormat=t.internalFormat,t.isImmutable&&(n.isImmutable=t.isImmutable),t.isOpaque&&(n.isOpaque=t.isOpaque),t.maxAnisotropy&&(n.maxAnisotropy=t.maxAnisotropy),n.pixelFormat=t.pixelFormat,t.preMultiplyAlpha&&(n.preMultiplyAlpha=t.preMultiplyAlpha),t.samplingMode&&(n.samplingMode=t.samplingMode),t.target&&(n.target=t.target),n.uniform=t.uniform,t.unpackAlignment&&(n.unpackAlignment=t.unpackAlignment),t.wrapMode&&(n.wrapMode=t.wrapMode),new a(e,n,r)}function M(e){return\"url\"in e&&\"urlHash\"in e?{...e,url:\"\"}:e}export{j as charCodes,f as createAttributeLayout,b as createProgramDescriptor,T as createTexture,M as discardUrlIfHasUrlHash,l as getCapType,m as getJoinType,d as getPixelArrayCtor,c as getPixelBytes,y as isSVGImage,A as isValidSVG};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as r}from\"../DefaultVertexAttributeLayouts.js\";import t from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{BufferObject as s}from\"../../../../webgl/BufferObject.js\";import{StencilOperation as o,Face as a,CompareFunction as l,PrimitiveType as n,Usage as d}from\"../../../../webgl/enums.js\";import{createProgram as m}from\"../../../../webgl/ProgramTemplate.js\";import{VertexArrayObject as c}from\"../../../../webgl/VertexArrayObject.js\";class _ extends t{constructor(){super(...arguments),this._color=e(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e}){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),e.setStencilWriteMask(255)}draw(e,r){const{context:t,requestRender:i,allowDelayedRender:s}=e;this._initialized||this._initialize(t),!s||null==i||this._solidProgram.compiled?(t.setStencilFunctionSeparate(a.FRONT_AND_BACK,l.GREATER,r.stencilRef,255),t.bindVAO(this._solidVertexArrayObject),t.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.displayViewScreenMat3),this._solidProgram.setUniform2fv(\"u_coord_range\",[r.rangeX,r.rangeY]),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),t.drawArrays(n.TRIANGLE_STRIP,0,4),t.bindVAO()):i()}_initialize(e){if(this._initialized)return!0;const t=m(e,i);if(!t)return!1;const o=new Int8Array([0,0,1,0,0,1,1,1]),a=s.createVertex(e,d.STATIC_DRAW,o),l=new c(e,i.attributes,r,{geometry:a});return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}export{_ as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{FeatureBatchingStrategy as t,FeatureSymbologyDrawOrder as e}from\"./enums.js\";import{List as n}from\"./cpuMapped/FreeList.js\";import{isHittest as i}from\"./shaderGraph/techniques/featureTechniqueUtils.js\";import{PrimitiveType as a,DataType as s}from\"../../../webgl/enums.js\";function r(t,e){return t<<16|255&e}function d(t){return 255&t}class h{constructor(t,e,n,i,a){this.instance=t,this.materialKey=e,this.target=n,this.start=i,this.count=a}get textureKey(){return d(this.materialKey)}get indexEnd(){return this.start+this.count}extend(t){this.count+=t}render(t){this.instance.techniqueRef.render(t,this)}getStencilReference(){return this.target.stencilRef}getAttributePrecisionPackFactors(){const t=this.instance.instanceId;return this.target.getMesh(t).getAttributePrecisionPackFactors()}draw(t,e){i(t)?this.drawCompute(t.context,e):this.drawGeometry(t.context,e)}drawCompute(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getComputeVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT/3;t.bindVAO(i),t.drawElements(a.POINTS,this.count/3,s.UNSIGNED_INT,r),t.bindVAO(null)}drawGeometry(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getGeometryVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT;t.bindVAO(i),t.drawElements(a.TRIANGLES,this.count,s.UNSIGNED_INT,r),t.bindVAO(null)}}class l{constructor(){this._length=0,this._minOrderedLength=0,this._materialKeys=new Set}static fromDisplayEntities(t,e,n,i){const a=new l;for(const s of t.values())for(const t of s.records){const s=n.getInstance(t.instanceId),d=r(s.instanceId,t.textureKey);a.addRecord(s,d,t.indexStart,t.indexCount,t.vertexStart,t.vertexCount,e,i)}return a}get length(){return this._length}get minOrderedLength(){return this._minOrderedLength}get minUnorderedLength(){return this._materialKeys.size}render(t){const{drawPhase:e}=t;for(const n of this.infos())n.instance.techniqueRef.drawPhase&e&&n.render(t)}addRecord(i,a,s,r,d,l,o,c){let u=s,_=r;if(_||(u=d,_=l),!_)return;if(null==this._head){const t=new h(i,a,o,u,_);return this._head=new n(t),this._tail=this._head,this._length++,void this._minOrderedLength++}if(c===t.STRICT_ORDER)return this._insert(i,a,o,u,_,this._tail,null);let g=null,m=this._head;const f=i.instanceId,E=i.techniqueRef.symbologyPlane;if(c===t.STRICT_MARKERS_AND_TEXT&&(E===e.MARKER||E===e.TEXT))return this._insert(i,a,o,u,_,this._tail,null);for(;m;){const t=m.data.instance,e=t.instanceId,n=t.techniqueRef.symbologyPlane,s=g?.data.instance.instanceId;if(E<n||f===s&&f!==e)return this._insert(i,a,o,u,_,g,m);g=m,m=m.next}this._insert(i,a,o,u,_,g,null)}*infos(){if(null!=this._head)for(const t of this._head.values())yield t}_insert(t,e,i,a,s,r,d){if(null==r&&null==d){const r=new h(t,e,i,a,s);return this._head=new n(r),this._tail=this._head,this._length++,void this._minOrderedLength++}return e!==this._tail.data.materialKey&&this._minOrderedLength++,this._materialKeys.add(e),null==r&&null!=d?this._insertAtHead(t,e,i,a,s,d):null!=r&&null==d?this._insertAtEnd(t,e,i,a,s,r):null!=r&&null!=d?this._insertAtMiddle(t,e,i,a,s,r,d):void 0}_insertAtHead(t,e,i,a,s,r){const d=a+s;if(e===r.data.materialKey&&i===r.data.target&&d===r.data.start)r.data.start=a,r.data.count+=s;else{const d=new h(t,e,i,a,s);this._head=new n(d),this._head.next=r,this._length++}}_insertAtEnd(t,e,i,a,s,r){if(r.data.materialKey===e&&r.data.indexEnd===a)r.data.count+=s;else{const d=new h(t,e,i,a,s);this._tail=new n(d),r.next=this._tail,this._length++}}_insertAtMiddle(t,e,i,a,s,r,d){const l=a+s;if(r.data.materialKey===e&&r.data.target===i&&r.data.indexEnd===a)r.data.count+=s,r.data.materialKey===d.data.materialKey&&r.data.target===d.data.target&&r.data.indexEnd===d.data.start&&(r.data.count+=d.data.count,r.next=d.next,this._length--);else if(e===d.data.materialKey&&i===d.data.target&&l===d.data.start)d.data.start=a,d.data.count+=s;else{const l=new h(t,e,i,a,s),o=new n(l);r.next=o,o.next=d,this._length++}}}export{l as DisplayList,h as DisplayListInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._indexOnly=t,this.vertex={count:0,operations:[]},this.index={count:0,operations:[]}}copyRecord(t){let e=0;this._indexOnly||(e=this.vertex.count-t.vertexStart,this.vertex.operations.push({srcFrom:t.vertexStart,dstFrom:this.vertex.count,count:t.vertexCount,mutate:0}),t.vertexStart=this.vertex.count,this.vertex.count+=t.vertexCount);let n=!1;if(this._indexOnly&&this.index.operations.length>=1){const e=this.index.operations[this.index.operations.length-1];e.srcFrom+e.count===t.indexStart&&(e.count+=t.indexCount,n=!0)}n||this.index.operations.push({srcFrom:t.indexStart,dstFrom:this.index.count,count:t.indexCount,mutate:e}),t.indexStart=this.index.count,this.index.count+=t.indexCount}}export{t as ReshufflePlan};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport\"../../../../../core/has.js\";import{assertIsSome as t}from\"../../../../../core/maybe.js\";import{PooledUint32Array as i}from\"../PooledUint32Array.js\";import{FreeList as e}from\"./FreeList.js\";import{BufferObject as r}from\"../../../../webgl/BufferObject.js\";import{Usage as s}from\"../../../../webgl/enums.js\";const n=1.25,h=32767,a=h<<16|h;class d{constructor(t,e,r,s){this._pool=s;const n=i.create(e*r*Uint32Array.BYTES_PER_ELEMENT,this._pool);this.size=e,this.strideInt=r,this.bufferType=t,this.dirty={start:1/0,end:0},this.memoryStats={bytesUsed:0,bytesReserved:e*r*Uint32Array.BYTES_PER_ELEMENT},this._gpu=null,this._cpu=n,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}get intSize(){return this.fillPointer*this.strideInt}get byteSize(){return this.intSize*Uint32Array.BYTES_PER_ELEMENT}get invalidated(){return this.bufferSize>0&&!this._gpu}get invalidatedComputeBuffer(){return this.bufferSize>0&&!this._gpuComputeTriangles}invalidate(){this._invalidateTriangleBuffer(),this._gpu?.dispose(),this._gpu=null}_invalidateTriangleBuffer(){this._gpuComputeTriangles?.dispose(),this._gpuComputeTriangles=null}destroy(){this._gpu?.dispose(),this._gpuComputeTriangles?.dispose(),this._cpu?.destroy()}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new e({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;if(t*this.strideInt>this._cpu.length-this.fillPointer){this.invalidate();const i=this._cpu.length/this.strideInt,e=Math.round((i+t)*n),r=e*this.strideInt;this._cpu.expand(r*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(i,e-i),this.memoryStats.bytesReserved+=(e-i)*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}}set(t,i){this._cpu.array[t]!==i&&(this._cpu.array[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t+1,this.dirty.end))}getGPUBuffer(t,i=!1){if(!this.bufferSize)return null;if(i){if(\"index\"!==this.bufferType)throw new Error(\"Tired to get triangle buffer, but target is not an index buffer\");return null==this._gpuComputeTriangles&&(this._gpuComputeTriangles=this._createComputeBuffer(t)),this._gpuComputeTriangles}return null==this._gpu&&(this._gpu=this._createBuffer(t)),this._gpu}getView(t,i){return this._cpu.getUint32View(t,i/Uint32Array.BYTES_PER_ELEMENT)}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(i,e,r,s){const n=r*this.strideInt;if(!n)return 0;const h=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(i,h,n),d=this.freeList.firstFit(r);t(d,\"First fit region must be defined\");const u=d*this.strideInt,o=n;if(this._cpu.array.set(a,u),0!==s)for(let t=0;t<a.length;t++)this._cpu.array[t+u]+=s;return this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+o),this.fillPointer=Math.max(this.fillPointer,u+o),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d}copyFrom(i,e,r,s,n){const h=r*this.strideInt;if(!h)return 0;const a=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=i._cpu.getUint32View(a,h),u=this.freeList.firstFit(r);t(u,\"First fit region must be defined\");const o=u*this.strideInt,f=h;if(this._cpu.array.set(d,o),0!==s)for(let t=0;t<h;t++)this._cpu.array[o+t*this.strideInt+n]+=s;return this.dirty.start=Math.min(this.dirty.start,o),this.dirty.end=Math.max(this.dirty.end,o+f),this.fillPointer=Math.max(this.fillPointer,o+f),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,u}free(t,i,e){const r=t*this.strideInt,s=(t+i)*this.strideInt;if(!0===e)for(let n=t;n!==t+i;n++)this._cpu.array[n*this.strideInt]=a;this.dirty.start=Math.min(this.dirty.start,r),this.dirty.end=Math.max(this.dirty.end,s),this.freeList.free(t,i),this.memoryStats.bytesUsed-=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}upload(){if(this.dirty.end){if(this._invalidateTriangleBuffer(),null==this._gpu)return this.dirty.start=1/0,void(this.dirty.end=0);this._gpu.setSubData(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}reshuffle(t,e){if(0===e.length)return;const r=this.byteSize,s=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,n=r>s,h=this._cpu,a=i.create(s,this._pool);n||a.array.set(this._cpu.getUint32View(0,this.intSize));for(const i of e)if(n||i.srcFrom!==i.dstFrom||0!==i.mutate){this.dirty.start=Math.min(this.dirty.start,i.dstFrom*this.strideInt),this.dirty.end=Math.max(this.dirty.end,(i.dstFrom+i.count)*this.strideInt);for(let t=0;t<i.count;t++){const e=(i.dstFrom+t)*this.strideInt,r=(i.srcFrom+t)*this.strideInt;for(let t=0;t<this.strideInt;t++)a.array[e+t]=h.array[r+t]+i.mutate}}this._cpu.destroy(),this._cpu=a,n&&this.invalidate(),this.freeList.clear(),this.memoryStats.bytesUsed=this.memoryStats.bytesReserved=s}_createBuffer(t){const i=s.DYNAMIC_DRAW;return\"index\"===this.bufferType?r.createIndex(t,i,this._cpu.array):r.createVertex(t,i,this._cpu.array)}_createComputeBuffer(t){const i=s.DYNAMIC_DRAW,e=new Uint32Array(this.fillPointer/3);for(let r=0;r<this.fillPointer;r+=3)e[r/3]=this._cpu.array[r];return r.createIndex(t,i,e)}}export{d as MappedBuffer};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport{destroyMaybe as e}from\"../../../../../core/maybe.js\";import{i1616to32 as t}from\"../number.js\";import{MappedBuffer as r}from\"./Buffer.js\";import{unpackDataView as i}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import{PrimitiveType as s}from\"../../../../webgl/enums.js\";import{VertexArrayObject as f}from\"../../../../webgl/VertexArrayObject.js\";const o=1e3;function n(e,t){const r=[],i=e.attributes.filter((e=>t.locations.has(e.name)));for(const s of i)r.push({name:s.name,type:s.type,count:s.count,divisor:0,normalized:s.normalized??!1,offset:s.offset,stride:e.stride});return{geometry:r}}function u(e,t){const r=[],i=e.attributes.filter((e=>t.locations.has(e.name)));for(const s of i){r.push({name:s.name,type:s.type,count:s.count,divisor:0,normalized:s.normalized??!1,offset:s.offset,stride:e.stride});const i=t.computeAttributeMap[s.name];null!=i&&2===i.length&&(r.push({name:i[0],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+e.stride,stride:e.stride}),r.push({name:i[1],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+2*e.stride,stride:e.stride}))}return{geometry:r}}class a{constructor(e,t){if(this._bufferPool=e,this._layout=t,this._invalidated=!1,this._position=this._layout.attributes.find((e=>\"pos\"===e.name||\"position\"===e.name)),!this._position)throw new Error(\"InternalError: Unable to find position attribute\")}destroy(){this._indexBuffer=e(this._indexBuffer),this._vertexBuffer=e(this._vertexBuffer),this._computeVAO?.disposeVAOOnly(),this._geometryVAO?.disposeVAOOnly()}get layout(){return this._layout}getDrawArgs(e,t,r,i){return i?{primitive:s.POINTS,count:t/3,offset:r/3}:{primitive:e,count:t,offset:r}}getAttributePrecisionPackFactors(){const e={};for(const t of this.layout.attributes)t.packPrecisionFactor&&(e[t.name]=t.packPrecisionFactor);return e}getDebugVertexInfo(e=!1){if(!this._vertexBuffer)return null;const t=this._layout,r=t.stride,s=this._vertexBuffer.getView(0,this._vertexBuffer.byteSize),f=new DataView(s.slice().buffer);let o=s.byteLength/r;e&&(o=this._indexBuffer.fillPointer/3);const n=this._indexBuffer.getView(0,this._indexBuffer.byteSize);let u=0;const a=[];for(let h=0;h<o;h++){if(e){u=n[3*h]*r}const s={};for(const e of t.attributes){let t=`${e.offset} ${e.name}`,r=i(f,e,u);if(e.packPrecisionFactor)if(t+=` (precision: ${e.packPrecisionFactor})`,\"number\"==typeof r)r/=e.packPrecisionFactor;else for(let i=0;i<r.length;i++)r[i]/=e.packPrecisionFactor;s[t]=r}u+=r,a.push(s)}return{vertices:a,layout:t}}_ensure(e,t){if(this._vertexBuffer&&this._indexBuffer)this._indexBuffer.ensure(Math.max(e,1e3)),this._vertexBuffer.ensure(Math.max(t,1e3));else{const i=this._layout.stride/Uint32Array.BYTES_PER_ELEMENT;this._indexBuffer=new r(\"index\",Math.max(e,o),1,this._bufferPool),this._vertexBuffer=new r(\"vertex\",Math.max(t,o),i,this._bufferPool)}}append(e){const t=e.layout.stride,r=e.indices.byteLength/Uint32Array.BYTES_PER_ELEMENT,i=e.vertices.byteLength/t;this._ensure(r,i);const{vertices:s,indices:f}=e,o=this._vertexBuffer.insert(s,0,s.byteLength/t,0);return{vertexFrom:o,indexFrom:this._indexBuffer.insert(f,0,f.byteLength/4,o)}}copyRecordFrom(e,r,i,s){const{indexStart:f,indexCount:o,vertexStart:n,vertexCount:u}=r;this._ensure(o,u);const a=e._position,h=i*(a.packPrecisionFactor??1),d=s*(a.packPrecisionFactor??1),c=a.offset,_=t(h,d),l=this._vertexBuffer.copyFrom(e._vertexBuffer,n,u,_,c),m=this._indexBuffer.copyFrom(e._indexBuffer,f,o,l-n,0),x=r.clone();return x.vertexStart=l,x.indexStart=m,x.overlaps=0,x}remove(e,t,r,i){this._indexBuffer.free(e,t),this._vertexBuffer.free(r,i)}upload(){this._invalidated=!0}getGeometryVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidated){(this._vertexBuffer.invalidated||this._indexBuffer.invalidated)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._geometryVAO?.disposeVAOOnly(),this._geometryVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!1),i=this._vertexBuffer.getGPUBuffer(e);this._geometryVAO||(this._geometryVAO=new f(e,t.locations,n(this.layout,t),{geometry:i},r)),this._invalidated=!1}return this._geometryVAO}getComputeVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;(this._vertexBuffer.invalidated||this._indexBuffer.invalidatedComputeBuffer)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._computeVAO?.disposeVAOOnly(),this._computeVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!0),i=this._vertexBuffer.getGPUBuffer(e);return this._computeVAO||(this._computeVAO=new f(e,t.locations,u(this.layout,t),{geometry:i},r),this._invalidated=!1),this._computeVAO}get memoryStats(){return{bytesUsed:this._vertexBuffer.memoryStats.bytesUsed+this._indexBuffer.memoryStats.bytesUsed,bytesReserved:this._vertexBuffer.memoryStats.bytesReserved+this._indexBuffer.memoryStats.bytesReserved,vertex:this._vertexBuffer.memoryStats,index:this._indexBuffer.memoryStats}}reshuffle(e){this._vertexBuffer&&this._vertexBuffer.reshuffle(e.vertex.count,e.vertex.operations),this._indexBuffer&&this._indexBuffer.reshuffle(e.index.count,e.index.operations)}}export{a as MappedMesh};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._pos=0,this._buffer=t,this._i32View=new Int32Array(this._buffer),this._f32View=new Float32Array(this._buffer)}readInt32(){return this._i32View[this._pos++]}readF32(){return this._f32View[this._pos++]}}export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport t from\"../DisplayEntity.js\";import{unpackDataView as e}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import i from\"../util/Reader.js\";import{deserializeList as r}from\"../util/serializationUtils.js\";function o(e){if(!e)return null;return{entities:r(new i(e.entities),t),vertexData:e.data.map(a)}}function a(t){const i=t.layout.stride,r=new DataView(t.vertices),o=[],a=t.vertices.byteLength/i;let s=0;for(let n=0;n<a;n++){const a={};for(const i of t.layout.attributes){let t=`${i.offset} ${i.name}`,o=e(r,i,s);if(i.packPrecisionFactor)if(t+=` (precision: ${i.packPrecisionFactor})`,\"number\"==typeof o)o/=i.packPrecisionFactor;else for(let e=0;e<o.length;e++)o[e]/=i.packPrecisionFactor;a[t]=o}s+=i,o.push(a)}return{vertices:o,layout:t.layout}}export{o as debugMeshDataInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import e from\"../../../../core/Logger.js\";import{create as t}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{AFeatureTile as s}from\"./AFeatureTile.js\";import{RESHUFFLING_EXEMPT_MEMORY_BYTES as i,RESHUFFLING_TARGET_MEMORY_EFFICIENCY as r,RESHUFFLING_EXEMPT_DRAW_CALLS as o,RESHUFFLING_TARGET_DRAW_EFFICIENCY as d,tileSize as n}from\"./definitions.js\";import h from\"./DisplayEntity.js\";import{FeatureBatchingStrategy as a}from\"./enums.js\";import{DisplayList as f}from\"./FeatureDisplayList.js\";import{ReshufflePlan as l}from\"./ReshufflePlan.js\";import{LabelMetric as u}from\"./collisions/LabelMetric.js\";import{MappedMesh as m}from\"./cpuMapped/MappedMesh.js\";import{debugMeshDataInfo as p}from\"./mesh/meshDebugUtils.js\";import _ from\"./util/Reader.js\";import{deserializeList as c}from\"./util/serializationUtils.js\";const y=()=>e.getLogger(\"esri.views.2d.engine.webgl.FeatureTile\");let g=0;class b extends s{constructor(e,s,i,r,o=!1){super(e,s,i,r),this._meshes=new Map,this._entities=[],this._invalidated=!1,this._nextUploadAllowed=!1,this.tileAge=g++,this._metrics=[],this._entityIds=new Set,this._entityIdsFromBuffer=new Set,this._attributeEpoch=0,this._encounteredEnd=!1,this.visible=!0,this.transforms.labelMat2d=t(),this.enableDeferredUploads=o}destroy(){super.destroy(),this.clear()}clear(){for(const e of this._meshes.values())e.destroy();this._meshes.clear(),this._entities=[],this._metrics=[],this._displayList=null,this._invalidated=!0,this._entityIds.clear(),this._nextUploadAllowed=!0}beforeRender(e){super.beforeRender(e),this._needsReshuffle&&e.reshuffleManager.schedule(this)}tryReady(e){const t=this._invalidated&&!this._uploadAllowed;return!(this._isReady||t||!this._encounteredEnd||!(e>=this._attributeEpoch))&&(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${e}]`),this.ready(),this.requestRender(),!0)}get labelMetrics(){return this._metrics}get hasData(){return!!this._meshes.size}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||this._nextUploadAllowed}upload(){this._nextUploadAllowed=!0}getDisplayList(e,t){if(this._uploadAllowed&&this._invalidated){this._entities.sort(((e,t)=>{const s=t.sortKey,i=e.sortKey;return i===s?e.id-t.id:i-s})),t===a.BATCHING&&this.reshuffle(!0),this._displayList=f.fromDisplayEntities(this._entities,this,e,t);for(const e of this._meshes.values())e.upload();this.debugInfo.display.length=this._displayList.length,this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength,this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength,this.requestRender(),this._invalidated=!1,this._nextUploadAllowed=!1}return this._displayList}getMesh(e){if(!this._meshes.has(e))throw new Error(`InternalError: Unable to find VAO for instance: ${e}`);return this._meshes.get(e)}getSortKeys(e){const t=new Map;for(const{id:s,sortKey:i}of this._entities)if(e.has(s)&&t.set(s,i),t.size===e.size)break;return t}onMessage(e){switch(e.type){case\"append\":this._onAppendMessage(e);break;case\"update\":this._onUpdateMessage(e)}if(this._aggregateMemoryStats(),this.requestRender(),e.end){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${e.attributeEpoch}]`),!e.attributeEpoch)throw new Error(\"InternalError: Attribute epoch not defined.\");this._attributeEpoch=e.attributeEpoch,this._encounteredEnd=!0}}_onAppendMessage(e){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:p(e?.append)}),e.clear&&this.clear(),!e.append)return;const t=c(new _(e.append.entities),h);this._insert(t,e.append.data,!1)}_onUpdateMessage(e){has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:e.isPixelBuffer,modify:p(e.modify),remove:e.remove});const t=c(new _(e.modify.entities),h),s=t.map((e=>e.id)),i=e.isPixelBuffer??!1,r=[...e.remove,...s];i?this._removeByIdsFromBuffer(r):this._removeByIds(r),this._insert(t,e.modify.data,i)}reshuffle(e=!1){if(this.destroyed)return;const t=new Map;for(const s of this._entities)for(const i of s.records){const s=this._meshes.get(i.instanceId);let r=t.get(s);r||(r=new l(e),t.set(s,r)),r.copyRecord(i)}for(const[s,i]of t)s.reshuffle(i);this._invalidated=!0,this._aggregateMemoryStats(),has(\"esri-2d-update-debug\")&&y().info(`Tile ${this.key.id} was reshuffled.`)}copyPixelBufferedEntitesFrom(e,t,s,i){const r=s*n,o=i*n;for(const d of e._entities){let s=null;for(const i of d.records)if(i.overlaps&t){const t=e.getMesh(i.instanceId),n=this._ensureMesh(i.instanceId,t.layout).copyRecordFrom(t,i,r,o);s||(s=new h(d.id,d.sortKey),this._entityIdsFromBuffer.add(d.id),this._entities.push(s)),s.records.push(n)}}this._invalidated=!0}_ensureMesh(e,t){return this._meshes.has(e)||this._meshes.set(e,new m(this._stage.bufferPool,t)),this._meshes.get(e)}_insert(e,t,s){if(!e.length)return;this._removeDuplicatedBufferedEntites(e);const i=this._insertVertexData(t);for(const r of e){for(const e of r.records)e.updateBaseOffsets(i.get(e.instanceId));s?this._tryInsertBufferedEntity(r):this._insertEntity(r)}this._invalidated=!0}_insertVertexData(e){const t=new Map;for(const s of e){const{instanceId:e,layout:i}=s,r=this._ensureMesh(e,i).append(s);if(s.metrics){const e=c(new _(s.metrics),u)??[];this._metrics.push(...e)}t.set(e,r)}return t}_insertEntity(e){has(\"esri-2d-update-debug\")&&this._entityIds.has(e.id)&&console.error(`Tile ${this.key.id} insertEnitty: Already have entityId ${e.id}`),this._entityIds.add(e.id),this._entities.push(e)}_tryInsertBufferedEntity(e){this._entityIds.has(e.id)?this._removeRecordsFromMesh(e.records):(this._entityIdsFromBuffer.add(e.id),this._entities.push(e))}_removeDuplicatedBufferedEntites(e){if(!this._entityIdsFromBuffer.size)return;const t=[];for(const s of e)this._entityIdsFromBuffer.has(s.id)&&t.push(s.id);this._removeByIds(t)}_removeByIdsFromBuffer(e){this._removeByIds(e.filter((e=>this._entityIdsFromBuffer.has(e))))}_removeByIds(e){if(0===e.length)return;const t=new Set(e),s=[];for(const i of this._entities)t.has(i.id)?this._remove(i):s.push(i);this._entities=s,this._invalidated=!0}_remove(e){this._removeRecordsFromMesh(e.records),this._entityIds.delete(e.id),this._entityIdsFromBuffer.delete(e.id)}_removeRecordsFromMesh(e){for(const t of e){const{instanceId:e,indexStart:s,indexCount:i,vertexStart:r,vertexCount:o}=t;this._meshes.get(e)?.remove(s,i,r,o)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0,this.debugInfo.memory.bytesReserved=0;for(const[e,t]of this._meshes)this.debugInfo.memory.bytesUsed+=t.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=t.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const{bytesUsed:e,bytesReserved:t}=this.debugInfo.memory,s=e/t,{minOrderedLength:n,length:h}=this.debugInfo.display;return t>i&&s<r||h>o&&n/h<d}}export{b as FeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.30/esri/copyright.txt for details.\n*/\nconst n=new Float32Array(1),t=new Uint32Array(n.buffer);function r(n,t,r){return Math.round(Math.max(Math.min(n,r),t))}function u(n){return r(n,-128,127)}function o(n){return r(n,-32768,32767)}function e(n){return r(n,-2147483648,2147483647)}function c(n){return r(n,0,255)}function f(n){return r(n,0,65535)}function i(n){return r(n,0,4294967295)}function a(r){return n[0]=r,t[0]}function h(r){return t[0]=r,n[0]}function l(n){return[255&n,(65280&n)>>>8,(16711680&n)>>>16,(4278190080&n)>>>24]}function M(n,t){return 15&n|(15&t)<<4}function s(n,t){return 65535&n|t<<16}function m(n,t,r,u){return 255&n|(255&t)<<8|(255&r)<<16|u<<24}function w(n,t,r){return 255&n|(255&t)<<8|r<<16}function x(n){return 0|n}function y(n){const t=a(n),r=t>>>31;let u=t>>>23&255,o=8388607&t;return u-=127,u>15?r<<15|31744:u<-25?0:(u<-14&&(o+=8388608,o/=2**(-14-u),u=-15),u+=15,o/=8192,o=A(o,1023),r<<15|u<<10|o)}function A(n,t){const r=Math.floor(n),u=n-r;return r<t&&(u>.5||.5===u&&r%2==1)?r+1:r}function b(n){let t=n>>>15,r=n>>10&31,u=1023&n;return t=t?-1:1,r-=15,u/=1024,r>-15?u+=1:r=-14,t*2**r*u}export{b as fromUint16,o as i16,s as i1616to32,e as i32,u as i8,w as i8816to32,m as i8888to32,x as numTo32,h as toFloat32,y as toUint16,a as toUint32,f as u16,i as u32,l as u32to4Xu8,M as u4u4to8,c as u8};\n"],"names":["h","constructor","i","this","_rctx","_attributes","name","offset","type","r","SHORT","count","layout","hash","t","attributes","stride","_vertexBuffer","e","createVertex","s","STATIC_DRAW","Uint16Array","_vao","o","Map","geometry","a","_count","length","bind","bindVAO","unbind","dispose","draw","drawArrays","TRIANGLE_STRIP","p","super","arguments","_color","_program","prepareState","_ref","context","setStencilTestEnabled","setBlendingEnabled","setFaceCullingEnabled","setColorMask","setStencilOp","KEEP","REPLACE","setStencilWriteMask","setStencilFunction","ALWAYS","state","requestRender","allowDelayedRender","c","location","n","d","getVAO","bufferLayouts","indexBuffer","l","compiled","useProgram","setUniform2fv","setUniform4fv","setUniformMatrix3fv","displayMat3","drawElements","TRIANGLES","size","UNSIGNED_INT","_desc","vsPath","fsPath","setBlendFunctionSeparate","ONE","ONE_MINUS_SRC_ALPHA","GREATER","painter","isReady","computedOpacity","u","dvsMat3","isWrapAround","perspectiveTransform","m","texture","f","wrapAroundShift","timeline","begin","materialManager","getProgram","_","FLOAT","tex","UNSIGNED_SHORT","v","bindTexture","setUniform1i","setUniform1f","textureSize","end","clip","stencil","bitmap","overlay","tileDebugInfo","vtlBackground","b","vtlFill","vtlLine","vtlCircle","vtlSymbol","undefined","entityTexel","anchorX","anchorY","directionX","directionY","maxScale","minScale","referenceBounds","bounds","serialize","push","writeF32","offsetX","offsetY","deserialize","readInt32","readF32","F","shaders","vertexShader","fragmentShader","map","join","primitiveName","readWithDefault","toString","symbolLayers","lineSymbol","markerGraphics","symbol","width","effects","Math","max","id","sortKey","records","byteSizeHint","Uint32Array","BYTES_PER_ELEMENT","split","forEach","background","bitBlit","blend","debug","dot","filtering","fx","integrate","heatmap","heatmapResolve","highlight","magnifier","materials","fill","hittest","icon","heatmapAccumulate","label","line","pie","shared","text","blit","bloom","composite","gaussianBlur","luminosityHighPass","blur","dra","sobel","filterEffect","pp","raster","common","flow","imagery","particles","streamlines","hillshade","lut","magdir","reproject","rfx","aspect","bandarithmetic","compositeband","computechange","contrast","convolution","curvature","extractband","focalstatistics","grayscale","local","mask","ndvi","remap","slope","stretch","vs","scalar","test","tileInfo","util","resolveIncludes","y","x","coords","lengths","slice","g","_cache","vertices","indices","primitiveType","isMapSpace","fromPath","path","floor","fromGeometry","fromPolygon","fromMapExtent","getLogger","error","fromScreenExtent","xmin","ymin","xmax","ymax","toScreen","_ref2","destroy","vertexBuffers","elementType","UNSIGNED_BYTE","getIndexBuffer","createIndex","getVertexBuffers","Object","keys","reduce","_clip","stage","_handle","version","_invalidate","ready","fromClipArea","_destroyGL","mesh","vao","remove","_lastWidth","_lastHeight","_createMesh","_createTransforms","displayViewScreenMat3","clips","_updateClippingInfo","renderChildren","setPipelineState","_renderPasses","prepareRenderPasses","render","registerRenderPass","brushes","target","_clippingInfos","drawPhase","MAP","LABEL","LABEL_ALPHA","DEBUG","HIGHLIGHT","items","nearest","defines","samplingMode","NEAREST","mips","bilinear","LINEAR","bicubic","trilinear","LINEAR_MIPMAP_LINEAR","resolution","pixelRatio","round","rotation","isSourceScaled","_quad","renderingOptions","source","blendFunction","EQUAL","stencilRef","coordScale","transforms","M","setSamplingProfile","has","create","acquireUint32Array","_array","_pool","array","getUint32View","buffer","byteOffset","expand","byteLength","set","releaseUint32Array","_data","ArrayBuffer","BYTE_LENGTH","_freeList","start","firstFit","free","_pages","_pagesByBuffer","_bytesAllocated","_bytesTotal","console","log","_addPage","get","instanceId","textureKey","indexStart","indexCount","vertexStart","vertexCount","overlaps","updateBaseOffsets","vertexFrom","indexFrom","clone","write","_outlineProgram","_tileInfoProgram","_outlineVertexArrayObject","_tileInfoVertexArrayObject","_ctx","hasData","_loadWGLResources","setUniform2f","rangeX","rangeY","LINE_STRIP","_getTexture","height","descriptor","Int8Array","document","createElement","getContext","tileDebugInfoTexture","wrapMode","CLAMP_TO_EDGE","isImmutable","clearRect","canvas","textAlign","textBaseline","font","lineWidth","fillStyle","strokeStyle","debugSlot","key","strokeText","fillText","debugInfo","minOrderedLength","minUnorderedLength","triangleCount","display","bytesUsed","bytesReserved","memory","setData","next","Array","isArray","data","values","last","_head","head","maxAvailableSpace","clear","packPrecisionFactor","BYTE","setInt8","setUint8","Uint8Array","setInt16","Int16Array","setUint16","INT","setInt32","Int32Array","setUint32","setFloat32","Float32Array","HALF_FLOAT","E","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","setTransform","tileMat3","toScreenNoRotation","displayViewMat3","labelMat2d","window","devicePixelRatio","viewMat2d","containsScreenPoint","viewMat3","UNSIGNED_SHORT_4_4_4_4","w","normalized","strides","includes","j","charCodeAt","T","dataType","depth","flipped","hasMipmap","internalFormat","isOpaque","maxAnisotropy","pixelFormat","preMultiplyAlpha","uniform","unpackAlignment","url","_initialized","_solidProgram","_solidVertexArrayObject","setDepthWriteEnabled","setDepthTestEnabled","_initialize","setStencilFunctionSeparate","FRONT_AND_BACK","instance","materialKey","indexEnd","extend","techniqueRef","getStencilReference","getAttributePrecisionPackFactors","getMesh","drawCompute","drawGeometry","getComputeVAO","POINTS","getGeometryVAO","_length","_minOrderedLength","_materialKeys","Set","fromDisplayEntities","getInstance","addRecord","infos","_tail","STRICT_ORDER","_insert","symbologyPlane","STRICT_MARKERS_AND_TEXT","MARKER","TEXT","add","_insertAtHead","_insertAtEnd","_insertAtMiddle","_indexOnly","vertex","operations","index","copyRecord","srcFrom","dstFrom","mutate","strideInt","bufferType","dirty","memoryStats","_gpu","_cpu","elementSize","intSize","fillPointer","byteSize","invalidated","bufferSize","invalidatedComputeBuffer","_gpuComputeTriangles","invalidate","_invalidateTriangleBuffer","freeList","ensure","min","getGPUBuffer","Error","_createComputeBuffer","_createBuffer","getView","insert","copyFrom","upload","setSubData","reshuffle","DYNAMIC_DRAW","_bufferPool","_layout","_invalidated","_position","find","_indexBuffer","_computeVAO","disposeVAOOnly","_geometryVAO","getDrawArgs","primitive","getDebugVertexInfo","DataView","_ensure","append","copyRecordFrom","locations","filter","divisor","computeAttributeMap","_pos","_buffer","_i32View","_f32View","entities","vertexData","_meshes","_entities","_nextUploadAllowed","tileAge","_metrics","_entityIds","_entityIdsFromBuffer","_attributeEpoch","_encounteredEnd","visible","enableDeferredUploads","_displayList","beforeRender","_needsReshuffle","reshuffleManager","schedule","tryReady","_uploadAllowed","_isReady","labelMetrics","needsUpload","getDisplayList","sort","BATCHING","getSortKeys","onMessage","_onAppendMessage","_onUpdateMessage","_aggregateMemoryStats","attributeEpoch","isPixelBuffer","modify","_removeByIdsFromBuffer","_removeByIds","destroyed","info","copyPixelBufferedEntitesFrom","_ensureMesh","_stage","bufferPool","_removeDuplicatedBufferedEntites","_insertVertexData","_tryInsertBufferedEntity","_insertEntity","metrics","_removeRecordsFromMesh","_remove","delete","A"],"sourceRoot":""}