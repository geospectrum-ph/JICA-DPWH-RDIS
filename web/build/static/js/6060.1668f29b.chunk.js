"use strict";(self.webpackChunkRDIS_Web_Application=self.webpackChunkRDIS_Web_Application||[]).push([[6060],{26060:(e,s,t)=>{t.d(s,{uploadAssets:()=>A});var o=t(3825),r=(t(81806),t(76460)),n=t(50346),a=t(91417),i=t(90534),l=t(49723),c=t(57045),u=t(45652),p=t(53195),d=t(13096),f=t(91364);const m=1e6,h=20*m,g=2e9,w=3;async function y(e,s,t){let{data:r,name:a,description:l}=e,c=null;try{const e=(0,i.fj)(s,"uploads"),p=(0,i.fj)(e,"info"),{data:y}=await(0,o.A)(p,{query:{f:"json"},responseType:"json"});(0,n.Te)(t);const T=(0,d.Wo)(s),A=y.maxUploadFileSize*m,P=T?g:A,b=T?Math.min(h,A):h;if(r.size>P)throw new Error("Data too large");const v=(0,i.fj)(e,"register"),{data:j}=await(0,o.A)(v,{query:{f:"json",itemName:(u=a,u.replaceAll("/","_").replaceAll("\\","_")),description:l},responseType:"json",method:"post"});if((0,n.Te)(t),!j.success)throw new Error("Registration failed");const{itemID:_}=j.item;c=(0,i.fj)(e,_);const F=(0,i.fj)(c,"uploadPart"),M=Math.ceil(r.size/b),S=new Array;for(let s=0;s<M;++s)S.push(r.slice(s*b,Math.min((s+1)*b,r.size)));const N=S.slice().reverse(),E=new Array,I=(0,f.XA)(M,t?.onProgress,"uploadItem"),k=async()=>{for(;0!==N.length;){const e=S.length-N.length,s=N.pop(),r=new FormData,a=I.simulate(e,(0,f.V7)(s.size));try{r.append("f","json"),r.append("file",s),r.append("partId",`${e}`);const{data:a}=await(0,o.A)(F,{timeout:0,body:r,responseType:"json",method:"post"});if((0,n.Te)(t),!a.success)throw new Error("Part upload failed")}finally{a.remove()}}};for(let s=0;s<w&&0!==N.length;++s)E.push(k());await Promise.all(E);const D=(0,i.fj)(c,"commit"),{data:x}=await(0,o.A)(D,{query:{f:"json",parts:S.map(((e,s)=>s)).join(",")},responseType:"json",method:"post"});if((0,n.Te)(t),!x.success)throw new Error("Commit failed");return x.item}catch(p){if(null!=c){const e=(0,i.fj)(c,"delete");await(0,o.A)(e,{query:{f:"json"},responseType:"json",method:"post"})}throw p}var u}var T=t(19463);async function A(e,s,t){const o=e.length;if(!o)return t?.onProgress?.(1),[];const r=(0,f.XA)(o,t?.onProgress,"uploadAssets");return Promise.all(e.map(((e,o)=>async function(e,s,t){let{layer:o,ongoingUploads:r}=s;const a=r.get(e);if(a)return a;if(!function(e){return!!e.infoFor3D&&!!e.url}(o))throw new u.Wt;if(function(e,s){const{parsedUrl:t}=s;return null!=t&&e.metadata.externalSources.some((e=>(0,c.eN)(e,t)))}(e,o))return t?.onProgress?.(1),e;const i=async function(e,s,t){const{metadata:o}=e,{displaySource:r}=o,a=P(r?.source,s),i=!!a,c=o.externalSources.length>0,d=i?async function(e,s,t){return{source:await v(e,s,t),original:!0}}(a,s,t):c?async function(e,s,t){const o=S(s),{externalSources:r}=e.metadata,n=function(e,s){for(const t of e){const e=P(t.source,s);if(e)return e}return null}(r,s);if(!n)throw new u.xY;const a=(0,f.XA)(p.y.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),i=await v(n,s,{onProgress:a.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const l=n.reduce(((e,s)=>{let{asset:t}=s;return t instanceof File?e+t.size:e}),0),c=a.simulate("serviceAssetsToGlb",(0,f.sL)(l));try{return{source:await _(i,s,o)}}finally{c.remove()}}(e,s,t):async function(e,s,t){const o=(0,f.XA)(p.y.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),r=async function(e,s,t){const o=S(s),r=await e.load(t),a=await r.toBinaryGLTF({origin:r.origin,signal:t?.signal,ignoreLocalTransform:!0});return(0,n.Te)(t),{blob:new Blob([a],{type:"model/gltf-binary"}),assetName:`${(0,l.yS)()}.glb`,assetType:o}}(e,s,{...t,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await j([r],s,{...t,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}(e,s,t),m=await d;return(0,n.Te)(t),e.addExternalSources([m]),e}(e,o,t);r.set(e,i);try{await i}finally{r.delete(e)}return e}(e,s,{...t,onProgress:r.makeOnProgress(o)}))))}function P(e,s){if(!e)return null;const{infoFor3D:{supportedFormats:t,editFormats:o}}=s,r=(0,c.WN)(e),n=new Array;let a=!1;for(let i=0;i<r.length;++i){const e=b(r[i],t);if(!e)return null;o.includes(e.assetType)&&(a=!0),n.push(e)}return a?n:null}function b(e,s){const t=(0,c.fH)(e,s);return t?{asset:e,assetType:t}:null}async function v(e,s,t){return j(e.map((e=>async function(e,s){const{asset:t,assetType:o}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:o};const r=await t.toBlob(s);return(0,n.Te)(s),{blob:r,assetName:t.assetName,assetType:o}}(e,t))),s,t)}async function j(e,s,t){const a=(0,f.XA)(p.y.uploadAssetBlobs,t?.onProgress,"uploadAssetBlobs"),l=await function(e,s,t){const o=(0,f.XA)(e.length,t?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,a)=>{const l=async function(e,s,t){const{blob:o,assetType:a,assetName:l}=e;let c=null;try{const e=await y({data:o,name:l},s.url,t);(0,n.Te)(t),c={assetType:a,assetUploadId:e.itemID}}catch(w){(0,n.QP)(w),r.A.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!c){const e=await(0,i._0)(o);if((0,n.Te)(t),!e.isBase64)throw new u.$1;c={assetType:a,assetData:e.data}}if(!c)throw new u.WF;return{item:c,assetName:l}}(await e,s,{...t,onProgress:o.makeOnProgress(a)});return(0,n.Te)(t),l})))}(e,s,{...t,onProgress:a.makeOnProgress("prepareAssetItems")});(0,n.Te)(t);const d=l.map((e=>{let{item:s}=e;return s})),{uploadResults:m}=await async function(e,s,t){const r=(0,f.aG)(t?.onProgress);try{const r=await(0,o.A)((0,i.fj)(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if((0,n.Te)(t),r.data.uploadResults.length!==e.length)throw new u.nS(e.length,r.data.uploadResults.length);return r.data}finally{r.remove()}}(d,s,{...t,onProgress:a.makeOnProgress("uploadAssetItems")});return(0,n.Te)(t),e.map(((e,t)=>function(e,s,t){const{success:o}=s;if(!o){const{error:t}=s;throw new u.hK(e.assetName,t)}const{assetHash:r}=s,{assetName:n,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=t,l=(0,T.Fm)(a,i);if(!l)throw new u.H2(a);return new c.Qp(n,l,[new c.Bq(`${t.parsedUrl.path}/assets/${r}`,r)])}(l[t],m[t],s)))}async function _(e,s,t){const o=e.map((e=>{let{assetName:s,parts:t}=e;return{assetName:s,assetHash:t[0].partHash}})),r=s.capabilities?.operations.supportsAsyncConvert3D,n={f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:t,async:r},a=(0,i.fj)(s.parsedUrl.path,"convert3D");let l;try{l=(await(r?M:F)(a,{query:n,responseType:"json",timeout:0})).data}catch(w){throw new u.MT}const{supportedFormats:p}=s.infoFor3D;return l.assets.map((e=>{const s=(0,T.R_)(e.contentType,p);if(!s)throw new u.H2(s);return new c.Qp(e.assetName,e.contentType,[new c.Bq(e.assetURL,e.assetHash)])}))}function F(e,s){return(0,o.A)(e,s)}async function M(e,s){const t=(await(0,o.A)(e,s)).data.statusUrl;for(;;){const e=(await(0,o.A)(t,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return(0,o.A)(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,n.Pl)(N)}}function S(e){const{infoFor3D:s}=e,t=(0,T.R_)("model/gltf-binary",s.supportedFormats)??(0,T.E1)("glb",s.supportedFormats);if(!t)throw new u.uh;return t}const N=(0,a.l5)(1e3)},53195:(e,s,t)=>{t.d(s,{y:()=>o});const o={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}}},91364:(e,s,t)=>{t.d(s,{V7:()=>u,XA:()=>i,aG:()=>c,sL:()=>p});var o=t(54901),r=t(81806),n=t(87663),a=t(91417);function i(e){return new l(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>{},arguments.length>2?arguments[2]:void 0)}class l{constructor(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>{},t=arguments.length>2?arguments[2]:void 0;if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof e){this._weights={};for(let s=0;s<e;s++){const t=s,o=1/e;this._weights[t]=o,this._progressMap.set(t,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(1===e&&(0,r.A)("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[s,t]of this._timingsMap){const o=Math.round(t.end-t.start)/1e3,r=Math.round(o/e*100);console.log(this.taskName??"Task",{stepKey:s,stepTime:o,relativeTime:r})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),(0,r.A)("enable-feature:esri-3dofl-upload-timings")){const t=performance.now();this._startTime??=t;const o=(0,n.tE)(this._timingsMap,e,(()=>({start:t,end:0})));1===s&&(o.end=t)}this.emitProgress()}simulate(e,s){return c((s=>this.setProgress(e,s)),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e=>{},s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:g;const t=performance.now();e(0);const r=setInterval((()=>{const o=performance.now()-t,r=1-Math.exp(-o/s);e(r)}),h);return(0,o.hA)((()=>{clearInterval(r),e(1)}))}function u(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:d;return(0,a.gr)((0,a.Kp)(e*m/s))}function p(e){let s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:f;return(0,a.gr)((0,a.Kp)(e*m/s))}const d=10,f=10,m=8e-6,h=(0,a.l5)(50),g=(0,a.l5)(1e3)}}]);
//# sourceMappingURL=6060.1668f29b.chunk.js.map