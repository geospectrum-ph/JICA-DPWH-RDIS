{"version":3,"file":"static/js/653.eae4eb24.chunk.js","mappings":"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","sources":["../node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const orgSelectors = [];\n  if (commentOriginalSelector) {\n    const processCommentedSelector = (rule) => {\n      const placeholder = `/*!@___${orgSelectors.length}___*/`;\n      const comment = `/*!@${rule.selector}*/`;\n      orgSelectors.push({ placeholder, comment });\n      rule.selector = placeholder + rule.selector;\n      return rule;\n    };\n    cssText = processRules(cssText, (rule) => {\n      if (rule.selector[0] !== \"@\") {\n        return processCommentedSelector(rule);\n      } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n        rule.content = processRules(rule.content, processCommentedSelector);\n        return rule;\n      }\n      return rule;\n    });\n  }\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  if (commentOriginalSelector) {\n    orgSelectors.forEach(({ placeholder, comment }) => {\n      cssText = cssText.replace(placeholder, comment);\n    });\n  }\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport {\n  scopeCss\n};\n"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","arguments","length","undefined","content","suffix","contentPrefix","startsWith","blocks","substring","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","_len","m","Array","_key","parts","r","i","p","trim","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector2","re","makeScopeMatcher","test","injectScopingSelector","scopingSelector","_","applyStrictSelectorScope","hostSelector","className","_scopeSelectorPart","scopedP","applySimpleSelectorScope","lastIndex","replaceBy","selector2","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","part2","slice","restoreSafeSelector","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","scopeSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","convertColonSlotted","slotClass","selectors","_len2","_key2","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","replaceShadowCssHost","slottedSelectors","ref","scopeCss","commentsWithHash","match","stripComments","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach","_ref","regex"],"sourceRoot":""}