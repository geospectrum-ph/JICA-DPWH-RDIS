{"version":3,"file":"static/js/577.3833cb91.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/node_modules/timezone-groups/dist/index.js"],"sourcesContent":["const supportedTimeZones = (() => {\n    const platformTimeZones = Intl.supportedValuesOf('timeZone');\n    // not all browsers include these time zones, so we add them to ensure consistent groups\n    const etcTimeZones = [\n        \"Etc/GMT+1\",\n        \"Etc/GMT+10\",\n        \"Etc/GMT+11\",\n        \"Etc/GMT+12\",\n        \"Etc/GMT+2\",\n        \"Etc/GMT+3\",\n        \"Etc/GMT+4\",\n        \"Etc/GMT+5\",\n        \"Etc/GMT+6\",\n        \"Etc/GMT+7\",\n        \"Etc/GMT+8\",\n        \"Etc/GMT+9\",\n        \"Etc/GMT-1\",\n        \"Etc/GMT-10\",\n        \"Etc/GMT-11\",\n        \"Etc/GMT-12\",\n        \"Etc/GMT-13\",\n        \"Etc/GMT-14\",\n        \"Etc/GMT-2\",\n        \"Etc/GMT-3\",\n        \"Etc/GMT-4\",\n        \"Etc/GMT-5\",\n        \"Etc/GMT-6\",\n        \"Etc/GMT-7\",\n        \"Etc/GMT-8\",\n        \"Etc/GMT-9\"\n    ];\n    return [...new Set([...platformTimeZones, ...etcTimeZones])];\n})();\n\nconst now = new Date();\nconst startDate = now.toISOString();\nconst daysInYear = 365;\nconst groupDateRange = daysInYear;\nconst defaultGroupingOptions = {\n    startDate,\n    groupDateRange,\n    debug: false,\n};\n\nconst continentAllowList = new Set([\n    'Europe',\n    'Asia',\n    'America',\n    'America/Argentina',\n    'Africa',\n    'Australia',\n    'Pacific',\n    'Atlantic',\n    'Antarctica',\n    'Arctic',\n    'Indian',\n]);\nconst _getDates = (startDate, numberDays, dateEngine) => {\n    const dateArray = [];\n    let date = dateEngine.create(startDate);\n    for (let i = 0; i <= numberDays; i++) {\n        date = dateEngine.increase(date);\n        dateArray.push(dateEngine.formatToIsoDateString(date));\n    }\n    return dateArray;\n};\nconst _extractContinent = (label) => {\n    if (label.includes('Istanbul')) {\n        return 'Europe';\n    }\n    const lastIndex = label.lastIndexOf('/');\n    return lastIndex === -1 ? label : label.slice(0, lastIndex);\n};\nconst _isRegularContinent = (continent) => continentAllowList.has(continent);\nconst generateTimeZoneMetadata = (timeZoneItems, startDate, numberDays, dateEngine, debug = false) => {\n    const processedDates = new Map();\n    if (debug) {\n        console.log(`Initializing data starting ${startDate} with ${numberDays} days in the future, comparing ${timeZoneItems.length} timezones`);\n    }\n    const theDates = _getDates(startDate, numberDays, dateEngine);\n    return timeZoneItems.map((tzItem) => {\n        const label = tzItem.label;\n        const continent = _extractContinent(label);\n        const dates = theDates.map((date) => {\n            const key = `${date}-${label}`;\n            let utc = processedDates.get(key);\n            if (utc) {\n                return utc;\n            }\n            utc = dateEngine.isoToTimeZone(date, label);\n            processedDates.set(key, utc);\n            return utc;\n        });\n        return {\n            ...tzItem,\n            continent,\n            isRegularContinent: _isRegularContinent(continent),\n            dates,\n        };\n    });\n};\nconst compareDateArrs = (array1, array2, dateEngine) => array1.length === array2.length &&\n    array1.every((value, index) => dateEngine.same(value, array2[index]));\nconst getGroupLabelTimeZoneIndices = (rawTZs, max = 5) => {\n    const shrinkedTzs = rawTZs.filter(({ label }) => _isRegularContinent(_extractContinent(label)));\n    if (shrinkedTzs.length === 0) {\n        return [0];\n    }\n    const validLabels = shrinkedTzs.map((tz) => rawTZs.indexOf(tz));\n    return equallyDistributedSampling(validLabels, max);\n};\nfunction equallyDistributedSampling(items, maxItems = 5) {\n    const totalItems = items.length;\n    if (totalItems <= maxItems) {\n        return items;\n    }\n    const numberItemsToSelect = Math.min(totalItems - 2, maxItems - 2);\n    const stepSize = (totalItems - 1) / (numberItemsToSelect + 1);\n    return [\n        items[0],\n        ...Array.from({ length: numberItemsToSelect }, (_, i) => items[Math.round((i + 1) * stepSize)]),\n        items[totalItems - 1],\n    ];\n}\n\nasync function groupTimeZones(options) {\n    const { debug, groupDateRange, hooks, startDate, dateEngine } = {\n        ...defaultGroupingOptions,\n        ...options,\n    };\n    const grouping = [];\n    if (!dateEngine) {\n        throw new Error('dateEngine is required');\n    }\n    const timeZoneItems = supportedTimeZones.map((tz) => ({ label: tz }));\n    hooks?.onBeforeTimeZoneMetadataCreate?.(timeZoneItems);\n    const timeZoneMetadata = generateTimeZoneMetadata(timeZoneItems, startDate, groupDateRange, dateEngine, debug);\n    hooks?.onTimeZoneMetadataCreate?.(timeZoneMetadata);\n    // We traverse the mappedDB and see if we find matches by comparing each set\n    // of transformed date for that specific TZ.\n    for (const tzMetadatumI of timeZoneMetadata) {\n        const { label, continent, dates } = tzMetadatumI;\n        // ignore if we visited this element already\n        if (tzMetadatumI.visited) {\n            continue;\n        }\n        // Mark element as already visited\n        tzMetadatumI.visited = true;\n        // The grouped timezone that we want as a result\n        const newGroup = {\n            labelTzIndices: undefined,\n            tzs: [{ label }],\n        };\n        hooks?.onGroupCreate?.(newGroup, tzMetadatumI);\n        for (const tzMetadatumJ of timeZoneMetadata.filter((_) => !_.visited)) {\n            const { label: labelJ, continent: continentJ, isRegularContinent: isRegularContinentJ, dates: datesJ, } = tzMetadatumJ;\n            // We define a matching TZ by:\n            // 1) if both continents match (avoid grouping Antarctica with anything else)\n            // 2) if the transformed dates match in both TZs\n            if ((continent === continentJ || !isRegularContinentJ) &&\n                compareDateArrs(dates, datesJ, dateEngine)) {\n                const tzItem = { label: labelJ };\n                newGroup.tzs.push(tzItem);\n                hooks?.onGroupTimeZoneAdd?.(newGroup, tzItem, tzMetadatumJ);\n                // Mark element as already visited\n                tzMetadatumJ.visited = true;\n            }\n        }\n        grouping.push(newGroup);\n        hooks?.onGroupAdd?.(newGroup);\n    }\n    // Now that we have a group, we want an easy way to find a fitting label for the group\n    // which is defined as the list of the most-common 7 cities, shown in alphabetical order\n    const finalGrouping = grouping\n        .map((group) => {\n        hooks?.onBeforeFinalGroupCreate?.(group);\n        group.tzs = group.tzs.sort((a, b) => a.label.localeCompare(b.label));\n        const finalGrouping = {\n            labelTzIndices: getGroupLabelTimeZoneIndices(group.tzs, 7),\n            tzs: group.tzs.map((_) => _.label),\n        };\n        hooks?.onFinalGroupCreate?.(finalGrouping, group);\n        return finalGrouping;\n    })\n        .sort((a, b) => b.tzs.length - a.tzs.length);\n    if (debug) {\n        const missingTzs = supportedTimeZones\n            .map((tz) => (finalGrouping.some((y) => y.tzs.includes(tz)) ? null : tz))\n            .filter(Boolean);\n        if (missingTzs.length > 0) {\n            throw new Error(`There are ${missingTzs.length} missing timezones: ${missingTzs.toString()}`);\n        }\n    }\n    return hooks?.onFinalGroupingCreate\n        ? hooks.onFinalGroupingCreate(finalGrouping)\n        : finalGrouping;\n}\n\nexport { groupTimeZones };\n"],"names":["supportedTimeZones","platformTimeZones","Intl","supportedValuesOf","Set","defaultGroupingOptions","startDate","Date","toISOString","groupDateRange","debug","continentAllowList","_extractContinent","label","includes","lastIndex","lastIndexOf","slice","_isRegularContinent","continent","has","generateTimeZoneMetadata","timeZoneItems","numberDays","dateEngine","arguments","length","undefined","processedDates","Map","console","log","theDates","_getDates","dateArray","date","create","i","increase","push","formatToIsoDateString","map","tzItem","dates","key","utc","get","isoToTimeZone","set","isRegularContinent","compareDateArrs","array1","array2","every","value","index","same","getGroupLabelTimeZoneIndices","rawTZs","max","shrinkedTzs","filter","_ref","items","maxItems","totalItems","numberItemsToSelect","Math","min","stepSize","Array","from","_","round","equallyDistributedSampling","tz","indexOf","async","groupTimeZones","options","hooks","grouping","Error","onBeforeTimeZoneMetadataCreate","timeZoneMetadata","onTimeZoneMetadataCreate","tzMetadatumI","visited","newGroup","labelTzIndices","tzs","onGroupCreate","tzMetadatumJ","labelJ","continentJ","isRegularContinentJ","datesJ","onGroupTimeZoneAdd","onGroupAdd","finalGrouping","group","onBeforeFinalGroupCreate","sort","a","b","localeCompare","onFinalGroupCreate","missingTzs","some","y","Boolean","toString","onFinalGroupingCreate"],"sourceRoot":""}