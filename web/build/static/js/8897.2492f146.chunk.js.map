{"version":3,"file":"static/js/8897.2492f146.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/loader/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/loader/loader.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/loader/loader.scss?tag=calcite-loader&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/action/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/action/action.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/action/action.scss?tag=calcite-action&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx"],"sourcesContent":["export const CSS = {\n  loader: \"loader\",\n  loaderParts: \"loader__svgs\",\n  loaderPart: \"loader__svg\",\n  loaderPartId: (partId: number) => `${CSS.loaderPart}--${partId}` as const,\n  loaderText: \"loader__text\",\n  loaderPercentage: \"loader__percentage\",\n};\n","import { Component, Element, h, Host, Prop, VNode } from \"@stencil/core\";\nimport { guid } from \"../../utils/guid\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-loader\",\n  styleUrl: \"loader.scss\",\n  shadow: true,\n})\nexport class Loader {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** When `true`, displays smaller and appears to the left of the text. */\n  @Prop({ reflect: true }) inline = false;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies the component type.\n   *\n   * Use `\"indeterminate\"` if finding actual progress value is impossible.\n   *\n   */\n  @Prop({ reflect: true }) type: \"indeterminate\" | \"determinate\";\n\n  /** The component's value. Valid only for `\"determinate\"` indicators. Percent complete of 100. */\n  @Prop() value = 0;\n\n  /** Text that displays under the component's indicator. */\n  @Prop() text = \"\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const { el, inline, label, scale, text, type, value } = this;\n\n    const id = el.id || guid();\n    const radiusRatio = 0.45;\n    const size = inline ? this.getInlineSize(scale) : this.getSize(scale);\n    const radius = size * radiusRatio;\n    const viewbox = `0 0 ${size} ${size}`;\n    const isDeterminate = type === \"determinate\";\n    const circumference = 2 * radius * Math.PI;\n    const progress = (value / 100) * circumference;\n    const remaining = circumference - progress;\n    const valueNow = Math.floor(value);\n    const hostAttributes = {\n      \"aria-valuenow\": valueNow,\n      \"aria-valuemin\": 0,\n      \"aria-valuemax\": 100,\n      complete: valueNow === 100,\n    };\n    const svgAttributes = { r: radius, cx: size / 2, cy: size / 2 };\n    const determinateStyle = { \"stroke-dasharray\": `${progress} ${remaining}` };\n    return (\n      <Host\n        aria-label={label}\n        id={id}\n        role=\"progressbar\"\n        {...(isDeterminate ? hostAttributes : {})}\n      >\n        <div class={CSS.loaderParts}>\n          {[1, 2, 3].map((index) => (\n            <svg\n              aria-hidden=\"true\"\n              class={{\n                [CSS.loaderPart]: true,\n                [CSS.loaderPartId(index)]: true,\n              }}\n              key={index}\n              viewBox={viewbox}\n              {...(index === 3 && isDeterminate ? { style: determinateStyle } : {})}\n            >\n              <circle {...svgAttributes} />\n            </svg>\n          ))}\n        </div>\n        {text && <div class={CSS.loaderText}>{text}</div>}\n        {isDeterminate && <div class={CSS.loaderPercentage}>{value}</div>}\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteLoaderElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Return the proper sizes based on the scale property\n   *\n   * @param scale\n   */\n  private getSize(scale: string) {\n    return {\n      s: 32,\n      m: 56,\n      l: 80,\n    }[scale];\n  }\n\n  private getInlineSize(scale: string) {\n    return {\n      s: 12,\n      m: 16,\n      l: 20,\n    }[scale];\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-loader-font-size: Specifies the font size of the loading percentage when type is `\"determinate\"`.\n * @prop --calcite-loader-size: The width and height of a non-inline loader.\n * @prop --calcite-loader-size-inline: The width and height of an inline loader\n * @prop --calcite-loader-padding : Specifies the padding of the loader.\n */\n\n@import \"../../assets/styles/animation\";\n\n$stroke-width: 3;\n$loader-scale: 54;\n$loader-circumference: ($loader-scale - (2 * $stroke-width)) * 3.14159;\n\n@media (prefers-reduced-motion: reduce) {\n  :root {\n    --calcite-internal-duration-factor: 0;\n  }\n}\n\n:host {\n  @apply relative mx-auto hidden items-center justify-center opacity-100;\n  min-block-size: var(--calcite-loader-size);\n  font-size: var(--calcite-loader-font-size);\n  stroke: var(--calcite-color-brand);\n  stroke-width: $stroke-width;\n  fill: none;\n  transform: scale(1, 1);\n  animation: loader-color-shift scaleDuration(--calcite-internal-animation-timing-slow, 2) alternate-reverse infinite\n    linear;\n  padding-block: var(--calcite-loader-padding, theme(\"spacing.16\"));\n  will-change: contents;\n}\n\n:host([scale=\"s\"]) {\n  --calcite-loader-font-size: theme(\"fontSize.n2\");\n  --calcite-loader-size: theme(\"spacing.8\");\n  --calcite-loader-size-inline: theme(\"spacing.3\");\n}\n\n:host([scale=\"m\"]) {\n  --calcite-loader-font-size: theme(\"fontSize.0\");\n  --calcite-loader-size: theme(\"spacing.16\");\n  --calcite-loader-size-inline: theme(\"spacing.4\");\n}\n\n:host([scale=\"l\"]) {\n  --calcite-loader-font-size: theme(\"fontSize.2\");\n  --calcite-loader-size: theme(\"spacing.24\");\n  --calcite-loader-size-inline: theme(\"spacing.6\");\n}\n\n:host([no-padding]) {\n  @apply py-0;\n}\n\n:host {\n  @apply flex;\n}\n\n.loader__text {\n  @apply text-n2h\n  text-color-1\n  block\n  text-center;\n  margin-block-start: calc(var(--calcite-loader-size) + theme(\"spacing.6\"));\n}\n\n.loader__percentage {\n  @apply text-color-1 absolute block text-center;\n  font-size: var(--calcite-loader-font-size);\n  inline-size: var(--calcite-loader-size);\n  inset-inline-start: 50%;\n  margin-inline-start: calc(var(--calcite-loader-size) / 2 * -1);\n  line-height: 0.25;\n  transform: scale(1, 1);\n}\n\n.loader__svgs {\n  @apply absolute overflow-visible opacity-100;\n  inline-size: var(--calcite-loader-size);\n  block-size: var(--calcite-loader-size);\n  inset-inline-start: 50%;\n  margin-inline-start: calc(var(--calcite-loader-size) / 2 * -1);\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n  animation-duration: scaleDuration(--calcite-internal-animation-timing-slow, 6.66);\n  animation-name: loader-clockwise;\n}\n\n.loader__svg {\n  @apply absolute top-0 origin-center overflow-visible;\n  inset-inline-start: 0;\n  inline-size: var(--calcite-loader-size);\n  block-size: var(--calcite-loader-size);\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n\n  &--1 {\n    animation-name: loader-offset-1;\n  }\n  &--2 {\n    animation-name: loader-offset-2;\n  }\n  &--3 {\n    animation-name: loader-offset-3;\n  }\n}\n\n:host([type=\"determinate\"]) {\n  @apply animate-none;\n  stroke: var(--calcite-color-border-3);\n  .loader__svgs {\n    @apply animate-none;\n  }\n  .loader__svg--3 {\n    @apply animate-none;\n    stroke: var(--calcite-color-brand);\n    stroke-dasharray: $loader-circumference;\n    transform: rotate(-90deg);\n    transition: all var(--calcite-internal-animation-timing-fast) linear;\n  }\n}\n\n:host([inline]) {\n  @apply relative m-0 animate-none stroke-current stroke-2 py-0;\n  block-size: var(--calcite-loader-size-inline);\n  min-block-size: var(--calcite-loader-size-inline);\n  inline-size: var(--calcite-loader-size-inline);\n  margin-inline-end: calc(var(--calcite-loader-size-inline) * 0.5);\n  vertical-align: calc(var(--calcite-loader-size-inline) * -1 * 0.2);\n}\n\n:host([inline]) .loader__svgs {\n  @apply top-0 m-0;\n  inset-inline-start: 0;\n  inline-size: var(--calcite-loader-size-inline);\n  block-size: var(--calcite-loader-size-inline);\n}\n\n:host([inline]) .loader__svg {\n  inline-size: var(--calcite-loader-size-inline);\n  block-size: var(--calcite-loader-size-inline);\n}\n\n:host([complete]) {\n  @apply opacity-0;\n  transform: scale(0.75, 0.75);\n  transform-origin: center;\n  transition:\n    opacity var(--calcite-internal-animation-timing-medium) linear 1000ms,\n    transform var(--calcite-internal-animation-timing-medium) linear 1000ms;\n}\n\n:host([complete]) .loader__svgs {\n  @apply opacity-0;\n  transform: scale(0.75, 0.75);\n  transform-origin: center;\n  transition:\n    opacity calc(180ms * var(--calcite-internal-duration-factor)) linear 800ms,\n    transform calc(180ms * var(--calcite-internal-duration-factor)) linear 800ms;\n}\n\n:host([complete]) .loader__percentage {\n  color: theme(\"colors.brand\");\n  transform: scale(1.05, 1.05);\n  transform-origin: center;\n  transition:\n    color var(--calcite-internal-animation-timing-medium) linear,\n    transform var(--calcite-internal-animation-timing-medium) linear;\n}\n\n/**\n  Segment variables\n  - i         index (1-3)\n  - size      length of the segment (0 - 100)\n  - growth    how much the segment grows during the animation\n              (size + growth should not exceed 100)\n  - duration  how long the segment takes to rotate 360° (seconds)\n*/\n@mixin generateSegment($i, $size, $growth, $duration) {\n  $circumference: calc($loader-circumference / $loader-scale) * 100;\n  $length: ($size * 0.01) * $circumference;\n  $end: $length + ($growth * 0.01) * $circumference;\n\n  .loader__svg--#{$i} {\n    stroke-dasharray: $length $circumference - $end;\n    animation-duration: $duration;\n  }\n  @keyframes loader-offset-#{$i} {\n    0% {\n      stroke-dasharray: $length $circumference - $length;\n      stroke-dashoffset: 0;\n    }\n    50% {\n      stroke-dasharray: $end $circumference - $end;\n      stroke-dashoffset: -$circumference * 0.5 - ($length - $end) * 0.5;\n    }\n    100% {\n      stroke-dasharray: $length $circumference - $length;\n      stroke-dashoffset: -$circumference;\n    }\n  }\n}\n\n@include generateSegment(1, 10, 40, scaleDuration(--calcite-internal-animation-timing-slow, 4.8));\n@include generateSegment(2, 20, 30, scaleDuration(--calcite-internal-animation-timing-slow, 6.4));\n@include generateSegment(3, 05, 45, scaleDuration(--calcite-internal-animation-timing-slow, 7.734));\n\n@keyframes loader-color-shift {\n  0% {\n    stroke: var(--calcite-color-brand);\n  }\n  33% {\n    stroke: var(--calcite-color-brand-press);\n  }\n  66% {\n    stroke: var(--calcite-color-brand-hover);\n  }\n  100% {\n    stroke: var(--calcite-color-brand);\n  }\n}\n\n@keyframes loader-clockwise {\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n@include base-component();\n","export const CSS = {\n  button: \"button\",\n  buttonTextVisible: \"button--text-visible\",\n  buttonCompact: \"button--compact\",\n  indicatorText: \"indicator-text\",\n  iconContainer: \"icon-container\",\n  slotContainer: \"slot-container\",\n  slotContainerHidden: \"slot-container--hidden\",\n  textContainer: \"text-container\",\n  textContainerVisible: \"text-container--visible\",\n  indicatorWithIcon: \"indicator-with-icon\",\n  indicatorWithoutIcon: \"indicator-without-icon\",\n};\n\nexport const SLOTS = {\n  tooltip: \"tooltip\",\n};\n","import {\n  Component,\n  Element,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport { guid } from \"../../utils/guid\";\nimport {\n  connectInteractive,\n  disconnectInteractive,\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport { getIconScale } from \"../../utils/component\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Alignment, Appearance, Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { ActionMessages } from \"./assets/action/t9n\";\nimport { CSS, SLOTS } from \"./resources\";\n\n/**\n * @slot - A slot for adding a `calcite-icon`.\n * @slot tooltip - [Deprecated] Use the `calcite-tooltip` component instead.\n */\n@Component({\n  tag: \"calcite-action\",\n  styleUrl: \"action.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Action\n  implements InteractiveComponent, LocalizedComponent, T9nComponent, LoadableComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is highlighted.\n   */\n  @Prop({ reflect: true }) active = false;\n\n  /**\n   * Specifies the horizontal alignment of button elements with text content.\n   */\n  @Prop({ reflect: true }) alignment: Alignment;\n\n  /** Specifies the appearance of the component. */\n  @Prop({ reflect: true }) appearance: Extract<\"solid\" | \"transparent\", Appearance> = \"solid\";\n\n  /**\n   * When `true`, the side padding of the component is reduced.\n   *\n   * @deprecated No longer necessary.\n   */\n  @Prop({ reflect: true }) compact = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Specifies an icon to display. */\n  @Prop() icon: IconNameOrString;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /**\n   * When `true`, displays a visual indicator.\n   */\n  @Prop({ reflect: true }) indicator = false;\n\n  /**\n   * Specifies the label of the component. If no label is provided, the label inherits what's provided for the `text` prop.\n   */\n  @Prop() label: string;\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies text that accompanies the icon.\n   */\n  @Prop() text!: string;\n\n  /**\n   * Indicates whether the text is displayed.\n   */\n  @Prop({ reflect: true }) textEnabled = false;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteActionElement;\n\n  buttonEl: HTMLButtonElement;\n\n  mutationObserver = createObserver(\"mutation\", () => forceUpdate(this));\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionMessages;\n\n  guid = `calcite-action-${guid()}`;\n\n  indicatorId = `${this.guid}-indicator`;\n\n  buttonId = `${this.guid}-button`;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectInteractive(this);\n    connectLocalized(this);\n    connectMessages(this);\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    if (isBrowser()) {\n      await setUpMessages(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectInteractive(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.mutationObserver?.disconnect();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.buttonEl?.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderTextContainer(): VNode {\n    const { text, textEnabled } = this;\n\n    const textContainerClasses = {\n      [CSS.textContainer]: true,\n      [CSS.textContainerVisible]: textEnabled,\n    };\n\n    return text ? (\n      <div class={textContainerClasses} key=\"text-container\">\n        {text}\n      </div>\n    ) : null;\n  }\n\n  renderIndicatorText(): VNode {\n    const { indicator, messages, indicatorId, buttonId } = this;\n    return (\n      <div\n        aria-labelledby={buttonId}\n        aria-live=\"polite\"\n        class={CSS.indicatorText}\n        id={indicatorId}\n        role=\"region\"\n      >\n        {indicator ? messages.indicator : null}\n      </div>\n    );\n  }\n\n  renderIconContainer(): VNode {\n    const { loading, icon, scale, el, iconFlipRtl, indicator } = this;\n    const loaderScale = scale === \"l\" ? \"l\" : \"m\";\n    const calciteLoaderNode = loading ? (\n      <calcite-loader inline label={this.messages.loading} scale={loaderScale} />\n    ) : null;\n    const calciteIconNode = icon ? (\n      <calcite-icon\n        class={{ [CSS.indicatorWithIcon]: indicator }}\n        flipRtl={iconFlipRtl}\n        icon={icon}\n        scale={getIconScale(this.scale)}\n      />\n    ) : null;\n    const iconNode = calciteLoaderNode || calciteIconNode;\n    const hasIconToDisplay = iconNode || el.children?.length;\n\n    const slotContainerNode = (\n      <div\n        class={{\n          [CSS.slotContainer]: true,\n          [CSS.slotContainerHidden]: loading,\n        }}\n      >\n        <slot />\n      </div>\n    );\n\n    return hasIconToDisplay ? (\n      <div aria-hidden=\"true\" class={CSS.iconContainer} key=\"icon-container\">\n        {iconNode}\n        {slotContainerNode}\n      </div>\n    ) : null;\n  }\n\n  render(): VNode {\n    const {\n      active,\n      compact,\n      disabled,\n      icon,\n      loading,\n      textEnabled,\n      label,\n      text,\n      indicator,\n      indicatorId,\n      buttonId,\n      messages,\n    } = this;\n    const labelFallback = label || text;\n    const ariaLabel = labelFallback\n      ? `${labelFallback}${indicator ? ` (${messages.indicator})` : \"\"}`\n      : \"\";\n\n    const buttonClasses = {\n      [CSS.button]: true,\n      [CSS.buttonTextVisible]: textEnabled,\n      [CSS.buttonCompact]: compact,\n    };\n\n    return (\n      <Host>\n        <InteractiveContainer disabled={disabled}>\n          <button\n            aria-busy={toAriaBoolean(loading)}\n            aria-controls={indicator ? indicatorId : null}\n            aria-disabled={toAriaBoolean(disabled)}\n            aria-label={ariaLabel}\n            aria-pressed={toAriaBoolean(active)}\n            class={buttonClasses}\n            disabled={disabled}\n            id={buttonId}\n            ref={(buttonEl): HTMLButtonElement => (this.buttonEl = buttonEl)}\n          >\n            {this.renderIconContainer()}\n            {this.renderTextContainer()}\n            {!icon && indicator && <div class={CSS.indicatorWithoutIcon} key=\"indicator-no-icon\" />}\n          </button>\n          <slot name={SLOTS.tooltip} onSlotchange={this.handleTooltipSlotChange} />\n          {this.renderIndicatorText()}\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  handleTooltipSlotChange = (event: Event): void => {\n    const tooltips = (event.target as HTMLSlotElement)\n      .assignedElements({\n        flatten: true,\n      })\n      .filter((el) => el?.matches(\"calcite-tooltip\")) as HTMLCalciteTooltipElement[];\n\n    const tooltip = tooltips[0];\n\n    if (tooltip) {\n      tooltip.referenceElement = this.buttonEl;\n    }\n  };\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-indicator-color: Specifies the color of the component's indicator.\n */\n\n:host {\n  @extend %component-host;\n  @apply flex bg-transparent;\n  --calcite-action-indicator-color: theme(\"colors.brand\");\n  --calcite-action-color-transparent-hover: var(--calcite-color-transparent-hover);\n  --calcite-action-color-transparent-press: var(--calcite-color-transparent-press);\n}\n\n@mixin action-indicator() {\n  position: relative;\n  &::after {\n    content: \"\";\n    @apply absolute\n      h-2\n      w-2\n      rounded-full;\n    inset-block-end: calc(-0.275rem);\n    inset-inline-end: calc(-0.275rem);\n    background-color: var(--calcite-action-indicator-color);\n  }\n}\n\n@include disabled();\n\n.button {\n  @apply bg-foreground-1\n    fill-color-3\n    focus-base\n    text-n2h\n    text-color-3\n    relative\n    m-0\n    flex\n    w-auto\n    cursor-pointer\n    items-center\n    justify-start\n    border-none\n    font-medium\n    font-sans;\n\n  text-align: unset;\n  flex: 1 0 auto;\n  &:hover {\n    @apply bg-foreground-2 text-color-1 fill-color-1;\n  }\n\n  &:focus {\n    @apply bg-foreground-2 text-color-1 fill-color-1 focus-inset;\n  }\n\n  &:active {\n    @apply bg-foreground-3;\n  }\n\n  .icon-container {\n    @apply pointer-events-none\n      m-0\n      flex\n      items-center\n      justify-center;\n    min-inline-size: theme(\"spacing.4\");\n    min-block-size: theme(\"spacing.6\");\n  }\n\n  .text-container {\n    @apply m-0\n      w-0\n      truncate\n      leading-6\n      opacity-0\n      transition-opacity\n      duration-150\n      ease-in-out;\n    transition-property: margin;\n    transition-property: inline-size;\n  }\n\n  .text-container--visible {\n    @apply w-auto flex-auto opacity-100;\n  }\n}\n\n:host([data-active]) .button {\n  @apply focus-inset;\n}\n\n:host([scale=\"s\"]) {\n  .button {\n    @apply text-n2h px-2 py-1 font-normal;\n  }\n  .button--text-visible .icon-container {\n    margin-inline-end: theme(\"spacing.2\");\n  }\n}\n\n:host([scale=\"m\"]) {\n  .button {\n    @apply text-n1h px-4 py-3 font-normal;\n  }\n  .button--text-visible .icon-container {\n    margin-inline-end: theme(\"spacing.3\");\n  }\n}\n\n:host([scale=\"l\"]) {\n  .button {\n    @apply text-0h p-5 font-normal;\n  }\n  .button--text-visible .icon-container {\n    margin-inline-end: theme(\"spacing.4\");\n  }\n}\n\n:host([alignment=\"center\"]) .button {\n  @apply justify-center;\n}\n\n:host([alignment=\"end\"]) .button {\n  @apply justify-end;\n}\n\n:host([alignment=\"center\"]),\n:host([alignment=\"end\"]) {\n  .button .text-container--visible {\n    @apply flex-initial;\n  }\n}\n\n/* [Deprecated]  Compact */\n:host([scale=\"s\"][compact]) .button,\n:host([scale=\"m\"][compact]) .button,\n:host([scale=\"l\"][compact]) .button {\n  @apply px-0;\n}\n\n.slot-container {\n  @apply flex;\n}\n\n.slot-container--hidden {\n  @apply hidden;\n}\n\n.button--text-visible {\n  @apply w-full;\n}\n\n:host([active]) .button,\n:host([active]) .button:hover,\n:host([active]) .button:focus,\n:host([active][loading]) .button {\n  @apply text-color-1 fill-color-1 bg-foreground-3;\n}\n\n:host([appearance=\"transparent\"]) .button {\n  @apply bg-transparent\n    transition-shadow\n    duration-150\n    ease-in-out;\n}\n\n:host([active]) .button:active {\n  @apply bg-foreground-1;\n}\n\n:host([appearance=\"transparent\"][active]) .button,\n:host([appearance=\"transparent\"]) .button:hover,\n:host([appearance=\"transparent\"]) .button:focus {\n  background-color: var(--calcite-action-color-transparent-hover);\n}\n\n:host([appearance=\"transparent\"]) .button:active {\n  background-color: var(--calcite-action-color-transparent-press);\n}\n\n:host([appearance=\"transparent\"][disabled]) .button {\n  @apply bg-transparent;\n}\n\n:host([loading][appearance=\"solid\"]) .button,\n:host([loading][appearance=\"solid\"]) .button:hover,\n:host([loading][appearance=\"solid\"]) .button:focus {\n  @apply bg-foreground-1;\n\n  .text-container {\n    @apply opacity-disabled;\n  }\n}\n\n:host([loading]) calcite-loader[inline] {\n  @apply text-color-3;\n  margin-inline-end: theme(\"spacing.0\");\n}\n\n:host([disabled]) .button,\n:host([disabled]) .button:hover,\n:host([disabled]) .button:focus {\n  @apply opacity-disabled bg-foreground-1 cursor-default;\n}\n\n:host([disabled][active]) .button,\n:host([disabled][active]) .button:hover,\n:host([disabled][active]) .button:focus {\n  @apply opacity-disabled bg-foreground-3;\n}\n\n.indicator-with-icon {\n  @include action-indicator();\n}\n\n.indicator-without-icon {\n  @apply w-4 mx-1;\n  @include action-indicator();\n}\n\n.indicator-text {\n  @apply sr-only;\n}\n\n@include base-component();\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"./interfaces\";\n\nexport interface FetchIconProps {\n  icon: IconNameOrString;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nfunction generateIconId({ icon, scale }: FetchIconProps): string {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n\n  return `${iconName}${size}${filled ? \"F\" : \"\"}`;\n}\n\nexport async function fetchIcon(props: FetchIconProps): Promise<CalciteIconPath> {\n  const cachedIconKey = generateIconId(props);\n  const cachedIconData = getCachedIconDataByKey(cachedIconKey);\n\n  if (cachedIconData) {\n    return cachedIconData;\n  }\n\n  if (!requestCache[cachedIconKey]) {\n    requestCache[cachedIconKey] = fetch(getAssetPath(`./assets/icon/${cachedIconKey}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${cachedIconKey}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[cachedIconKey];\n  iconCache[cachedIconKey] = path;\n\n  return path;\n}\n\n/**\n * Util to retrieve cached icon data based on icon name and scale.\n *\n * @param props – icon properties\n */\nexport function getCachedIconData(props: FetchIconProps): CalciteIconPath {\n  return getCachedIconDataByKey(generateIconId(props));\n}\n\nfunction getCachedIconDataByKey(id: string): CalciteIconPath {\n  return iconCache[id];\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, getCachedIconData, scaleToPx } from \"./utils\";\nimport { IconNameOrString } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: IconNameOrString = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (!this.visible) {\n      this.waitUntilVisible(() => {\n        this.visible = true;\n        this.loadIconPathData();\n      });\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!isBrowser() || !icon || !visible) {\n      return;\n    }\n\n    const fetchIconProps = { icon, scale };\n    const pathData = getCachedIconData(fetchIconProps) || (await fetchIcon(fetchIconProps));\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n"],"names":["CSS","loader","loaderParts","loaderPart","loaderPartId","partId","loaderText","loaderPercentage","Loader","proxyCustomElement","HTMLElement","render","el","inline","label","scale","text","type","value","this","id","guid","size","getInlineSize","getSize","radius","viewbox","isDeterminate","circumference","Math","PI","progress","remaining","valueNow","floor","hostAttributes","complete","svgAttributes","r","cx","cy","determinateStyle","h","Host","key","role","class","map","index","viewBox","style","s","m","l","SLOTS","Action","mutationObserver","createObserver","forceUpdate","indicatorId","buttonId","handleTooltipSlotChange","event","tooltip","target","assignedElements","flatten","filter","matches","referenceElement","buttonEl","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectInteractive","connectLocalized","connectMessages","observe","childList","subtree","componentWillLoad","setUpLoadableComponent","isBrowser","setUpMessages","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnectInteractive","disconnectLocalized","disconnectMessages","disconnect","componentDidRender","updateHostInteraction","setFocus","componentFocusable","focus","renderTextContainer","textEnabled","textContainerClasses","renderIndicatorText","indicator","messages","renderIconContainer","loading","icon","iconFlipRtl","loaderScale","calciteLoaderNode","calciteIconNode","flipRtl","getIconScale","iconNode","hasIconToDisplay","children","length","slotContainerNode","active","compact","disabled","labelFallback","ariaLabel","buttonClasses","InteractiveContainer","toAriaBoolean","ref","name","onSlotchange","iconCache","requestCache","scaleToPx","generateIconId","_ref","numberLeadingName","isNaN","Number","charAt","parts","split","firstNonDigitInPartPattern","part","partIndex","replace","match","offset","toUpperCase","join","normalizeIconName","filled","substring","getCachedIconDataByKey","Icon","visible","waitUntilVisible","loadIconPathData","intersectionObserver","pathData","textLabel","dir","getElementDir","semantic","paths","concat","svg","fill","height","width","xmlns","path","d","opacity","fetchIconProps","async","props","cachedIconKey","cachedIconData","fetch","getAssetPath","then","resp","json","catch","console","error","fetchIcon","callback","entries","forEach","entry","isIntersecting","rootMargin"],"sourceRoot":""}