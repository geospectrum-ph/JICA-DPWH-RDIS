{"version":3,"file":"static/js/6988.b2730a89.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/utils/observers.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/key.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/number.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/locale.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/t9n.ts"],"sourcesContent":["import { isBrowser } from \"./browser\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve: (target: Node) => void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!isBrowser()) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n","export function isActivationKey(key: string): boolean {\n  return key === \"Enter\" || key === \" \";\n}\n\nexport const numberKeys = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nexport const letterKeys = [\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\",\n];\n","import { numberKeys } from \"./key\";\nimport { NumberStringFormat } from \"./locale\";\n\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n\n// adopted from https://stackoverflow.com/a/66939244\nexport class BigDecimal {\n  value: bigint;\n\n  // BigInt(\"-0\").toString() === \"0\" which removes the minus sign when typing numbers like -0.1\n  isNegative: boolean;\n\n  // Configuration: constants\n  static DECIMALS = 100; // number of decimals on all instances\n\n  static ROUNDED = true; // numbers are truncated (false) or rounded (true)\n\n  static SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\n\n  constructor(input: string | BigDecimal) {\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n      BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n\n  static _divRound = (dividend: bigint, divisor: bigint): BigDecimal =>\n    BigDecimal.fromBigInt(\n      dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)),\n    );\n\n  static fromBigInt = (bigint: bigint): BigDecimal =>\n    Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\n\n  getIntegersAndDecimals(): { integers: string; decimals: string } {\n    const s = this.value\n      .toString()\n      .replace(\"-\", \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n    return { integers, decimals };\n  }\n\n  toString(): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n\n  formatToParts(formatter: NumberStringFormat): Intl.NumberFormatPart[] {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char: string) => parts.push({ type: \"fraction\", value: char }));\n    }\n\n    return parts;\n  }\n\n  format(formatter: NumberStringFormat): string {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(\n      BigInt(integers),\n    )}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n          .split(\"\")\n          .map((char: string) => formatter.numberFormatter.format(Number(char)))\n          .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n\n  add(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n  }\n\n  subtract(n: string): BigDecimal {\n    return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n  }\n\n  multiply(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n  }\n\n  divide(n: string): BigDecimal {\n    return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n  }\n}\n\nexport function isValidNumber(numberString: string): boolean {\n  return !(!numberString || isNaN(Number(numberString)));\n}\n\nexport function parseNumberString(numberString?: string): string {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n        if (value.match(/\\./g) && !containsDecimal) {\n          containsDecimal = true;\n          return true;\n        }\n        if (value.match(/-/g) && i === 0) {\n          return true;\n        }\n        return numberKeys.includes(value);\n      })\n      .join(\"\");\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst hasTrailingDecimalZeros = /0*$/;\n\nexport const sanitizeNumberString = (numberString: string): string =>\n  sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    const sanitizedValue = nonExpoNumString\n      .replace(allHyphensExceptTheStart, \"\")\n      .replace(decimalOnlyAtEndOfString, \"\")\n      .replace(allLeadingZerosOptionallyNegative, \"$1\");\n    return isValidNumber(sanitizedValue)\n      ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n        ? sanitizedValue\n        : getBigDecimalAsString(sanitizedValue)\n      : nonExpoNumString;\n  });\n\nexport function getBigDecimalAsString(sanitizedValue: string): string {\n  const sanitizedValueDecimals = sanitizedValue.split(\".\")[1];\n  const value = new BigDecimal(sanitizedValue).toString();\n  const [bigDecimalValueInteger, bigDecimalValueDecimals] = value.split(\".\");\n\n  return sanitizedValueDecimals && bigDecimalValueDecimals !== sanitizedValueDecimals\n    ? `${bigDecimalValueInteger}.${sanitizedValueDecimals}`\n    : value;\n}\n\nexport function sanitizeExponentialNumberString(numberString: string, func: (s: string) => string): string {\n  if (!numberString) {\n    return numberString;\n  }\n\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n\n  if (!firstE) {\n    return func(numberString);\n  }\n\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\n\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nexport function expandExponentialNumberString(numberString: string): string {\n  const exponentialParts = numberString.split(/[eE]/);\n  if (exponentialParts.length === 1) {\n    return numberString;\n  }\n\n  const number = +numberString;\n  if (Number.isSafeInteger(number)) {\n    return `${number}`;\n  }\n\n  const isNegative = numberString.charAt(0) === \"-\";\n  const magnitude = +exponentialParts[1];\n  const decimalParts = exponentialParts[0].split(\".\");\n  const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n  const decimals = decimalParts[1] || \"\";\n\n  const shiftDecimalLeft = (integers: string, magnitude: number): string => {\n    const magnitudeDelta = Math.abs(magnitude) - integers.length;\n    const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n    const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const shiftDecimalRight = (decimals: string, magnitude: number): string => {\n    const rightPaddedZeros =\n      magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n    const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n\n  const expandedNumberString =\n    magnitude > 0\n      ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n      : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n\n  return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n    .replace(unnecessaryDecimal, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\n\nfunction stringContainsNumbers(string: string): boolean {\n  return numberKeys.some((number) => string.includes(number));\n}\n\n/**\n * Adds localized trailing decimals zero values to the number string.\n * BigInt conversion to string removes the trailing decimal zero values (Ex: 1.000 is returned as 1). This method helps adding them back.\n *\n * @param {string} localizedValue - localized number string value\n * @param {string} value - current value in the input field\n * @param {NumberStringFormat} formatter - numberStringFormatter instance to localize the number value\n * @returns {string} localized number string value\n */\nexport function addLocalizedTrailingDecimalZeros(\n  localizedValue: string,\n  value: string,\n  formatter: NumberStringFormat,\n): string {\n  const decimals = value.split(\".\")[1];\n  if (decimals) {\n    const trailingDecimalZeros = decimals.match(hasTrailingDecimalZeros)[0];\n    if (\n      trailingDecimalZeros &&\n      formatter.delocalize(localizedValue).length !== value.length &&\n      decimals.indexOf(\"e\") === -1\n    ) {\n      const decimalSeparator = formatter.decimal;\n      localizedValue = !localizedValue.includes(decimalSeparator)\n        ? `${localizedValue}${decimalSeparator}`\n        : localizedValue;\n      return localizedValue.padEnd(localizedValue.length + trailingDecimalZeros.length, formatter.localize(\"0\"));\n    }\n  }\n  return localizedValue;\n}\n","import { closestElementCrossShadowBoundary, containsCrossShadowBoundary } from \"./dom\";\nimport { BigDecimal, isValidNumber, sanitizeExponentialNumberString } from \"./number\";\nimport { createObserver } from \"./observers\";\n\nexport const defaultLocale = \"en\";\n\nexport const t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-AT\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\",\n];\n\nexport const numberingSystems = [\"arab\", \"arabext\", \"latn\"] as const;\n\nexport const supportedLocales = [...new Set([...t9nLocales, ...locales])] as const;\n\nexport type NumberingSystem = (typeof numberingSystems)[number];\n\nexport type SupportedLocale = (typeof supportedLocales)[number];\n\nconst isNumberingSystemSupported = (numberingSystem: string): numberingSystem is NumberingSystem =>\n  numberingSystems.includes(numberingSystem as NumberingSystem);\n\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\n\n// for consistent browser behavior, we normalize numberingSystem to prevent the browser-inferred value\n// see https://github.com/Esri/calcite-design-system/issues/3079#issuecomment-1168964195 for more info\nexport const defaultNumberingSystem =\n  browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n    ? \"latn\"\n    : browserNumberingSystem;\n\nexport const getSupportedNumberingSystem = (numberingSystem: string): NumberingSystem =>\n  isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nexport function getSupportedLocale(locale: string, context: \"cldr\" | \"t9n\" = \"cldr\"): SupportedLocale {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n\n  if (!locale) {\n    return defaultLocale;\n  }\n\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n\n  locale = locale.toLowerCase();\n\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n\n  if (!contextualLocales.includes(locale)) {\n    console.warn(\n      `Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`,\n    );\n    return defaultLocale;\n  }\n\n  return locale;\n}\n\n/**\n * This interface is for components that need to determine locale from the lang attribute.\n */\nexport interface LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * Used to store the effective locale to avoid multiple lookups.\n   *\n   * This is an internal property and should:\n   *\n   * - use the `@State` decorator\n   * - be initialized to \"\"\n   *\n   * Components should watch this prop to ensure messages are updated.\n   *\n   * @Watch(\"effectiveLocale\")\n   * effectiveLocaleChange(): void {\n   *   updateMessages(this, this.effectiveLocale);\n   * }\n   */\n  effectiveLocale: string;\n}\n\nconst connectedComponents = new Set<LocalizedComponent>();\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nexport function connectLocalized(component: LocalizedComponent): void {\n  updateEffectiveLocale(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true,\n    });\n  }\n\n  connectedComponents.add(component);\n}\n\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nexport function updateEffectiveLocale(component: LocalizedComponent): void {\n  component.effectiveLocale = getLocale(component);\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectLocalized(component: LocalizedComponent): void {\n  connectedComponents.delete(component);\n\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\n\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target as HTMLElement;\n\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n\n      if (inUnrelatedSubtree) {\n        return;\n      }\n\n      const closestLangEl = closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\");\n\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n\n      const closestLang = closestLangEl.lang;\n\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component: LocalizedComponent): string {\n  return (\n    component.el.lang ||\n    closestElementCrossShadowBoundary<HTMLElement>(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale\n  );\n}\n\nexport interface NumberStringFormatOptions extends Intl.NumberFormatOptions {\n  numberingSystem: NumberingSystem;\n  locale: string;\n}\n\n/**\n * This util formats and parses numbers for localization\n */\nexport class NumberStringFormat {\n  /**\n   * The actual group separator for the specified locale.\n   * White-space group separators are changed to the non-breaking space (nbsp) unicode character.\n   * so we replace them with a normal <SPACE>.\n   */\n  private _actualGroup: string;\n\n  /** the corrected group separator */\n  private _group: string;\n\n  get group(): string {\n    return this._group;\n  }\n\n  private _decimal: string;\n\n  get decimal(): string {\n    return this._decimal;\n  }\n\n  private _minusSign: string;\n\n  get minusSign(): string {\n    return this._minusSign;\n  }\n\n  private _digits: Array<string>;\n\n  get digits(): Array<string> {\n    return this._digits;\n  }\n\n  private _getDigitIndex;\n\n  private _numberFormatter: Intl.NumberFormat;\n\n  get numberFormatter(): Intl.NumberFormat {\n    return this._numberFormatter;\n  }\n\n  private _numberFormatOptions: NumberStringFormatOptions;\n\n  get numberFormatOptions(): NumberStringFormatOptions {\n    return this._numberFormatOptions;\n  }\n\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options: NumberStringFormatOptions) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n\n    if (\n      // No need to create the formatter if `locale` and `numberingSystem`\n      // are the default values and `numberFormatOptions` has not been set\n      (!this._numberFormatOptions &&\n        options.locale === defaultLocale &&\n        options.numberingSystem === defaultNumberingSystem &&\n        // don't skip initialization if any options besides locale/numberingSystem are set\n        Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)\n    ) {\n      return;\n    }\n\n    this._numberFormatOptions = options;\n\n    this._numberFormatter = new Intl.NumberFormat(\n      this._numberFormatOptions.locale,\n      this._numberFormatOptions as Intl.NumberFormatOptions,\n    );\n\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem,\n      } as Intl.NumberFormatOptions).format(9876543210),\n    ].reverse();\n\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n\n    // numberingSystem is parsed to return consistent decimal separator across browsers.\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale, {\n      numberingSystem: this._numberFormatOptions.numberingSystem,\n    } as Intl.NumberFormatOptions).formatToParts(-12345678.9);\n\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group separators to the unicode non-breaking space (nbsp)\n    this._group = this._actualGroup.trim().length === 0 || this._actualGroup == \" \" ? \"\\u00A0\" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d: string) => index.get(d);\n  }\n\n  delocalize = (numberString: string): string =>\n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          nonExpoNumString\n            .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n            .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n            .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n            .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex),\n        )\n      : numberString;\n\n  localize = (numberString: string): string =>\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString: string): string =>\n          isValidNumber(nonExpoNumString.trim())\n            ? new BigDecimal(nonExpoNumString.trim())\n                .format(this)\n                .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n            : nonExpoNumString,\n        )\n      : numberString;\n}\n\nexport const numberStringFormatter = new NumberStringFormat();\n\nexport type LocaleDateTimeOptionKey = string;\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport let dateTimeFormatCache: Map<LocaleDateTimeOptionKey, Intl.DateTimeFormat>;\n\n/**\n * Used to ensure all cached formats are for the same locale.\n *\n * @internal\n */\nlet previousLocaleUsedForCaching: string;\n\n/**\n * Generates a cache key for date time format lookups.\n *\n * @internal\n */\nfunction buildDateTimeFormatCacheKey(options: Intl.DateTimeFormatOptions = {}): string {\n  return Object.entries(options)\n    .sort(([key1], [key2]) => key1.localeCompare(key2))\n    .map((keyValue) => `${keyValue[0]}-${keyValue[1]}`)\n    .flat()\n    .join(\":\");\n}\n\n/**\n * Returns an instance of Intl.DateTimeFormat and reuses it if requested with the same locale and options.\n *\n * **Note**: the cache will be cleared if a different locale is provided\n *\n * @internal\n */\nexport function getDateTimeFormat(locale: string, options?: Intl.DateTimeFormatOptions): Intl.DateTimeFormat {\n  locale = getSupportedLocale(locale);\n\n  if (!dateTimeFormatCache) {\n    dateTimeFormatCache = new Map();\n  }\n\n  if (previousLocaleUsedForCaching !== locale) {\n    dateTimeFormatCache.clear();\n    previousLocaleUsedForCaching = locale;\n  }\n\n  const key = buildDateTimeFormatCacheKey(options);\n  const cached = dateTimeFormatCache.get(key);\n\n  if (cached) {\n    return cached;\n  }\n\n  const format = new Intl.DateTimeFormat(locale, options);\n  dateTimeFormatCache.set(key, format);\n\n  return format;\n}\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["createObserver","type","callback","options","isBrowser","Observer","ExtendedMutationObserver","window","MutationObserver","constructor","super","observedEntry","this","observe","target","push","unobserve","newObservedEntries","filter","observed","takeRecords","disconnect","forEach","IntersectionObserver","ResizeObserver","getObserver","isActivationKey","key","numberKeys","unnecessaryDecimal","RegExp","trailingZeros","BigDecimal","input","integers","decimals","numberString","exponentialParts","split","length","number","Number","isSafeInteger","isNegative","charAt","magnitude","decimalParts","substring","shiftDecimalLeft","magnitudeDelta","Math","abs","leftPaddedZeros","repeat","slice","shiftDecimalRight","rightPaddedZeros","expandedNumberString","replace","allLeadingZerosOptionallyNegative","expandExponentialNumberString","concat","value","BigInt","padEnd","DECIMALS","ROUNDED","getIntegersAndDecimals","s","toString","padStart","formatToParts","formatter","parts","numberFormatter","unshift","minusSign","decimal","char","format","map","join","add","n","fromBigInt","subtract","multiply","_divRound","SHIFT","divide","isValidNumber","isNaN","parseNumberString","string","some","includes","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","i","match","dividend","divisor","bigint","Object","assign","create","prototype","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","hasTrailingDecimalZeros","sanitizeNumberString","sanitizedValue","test","sanitizedValueDecimals","bigDecimalValueInteger","bigDecimalValueDecimals","getBigDecimalAsString","func","firstE","toLowerCase","indexOf","section","addLocalizedTrailingDecimalZeros","localizedValue","trailingDecimalZeros","delocalize","decimalSeparator","localize","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","arguments","undefined","contextualLocales","_match","language","region","toUpperCase","console","warn","connectedComponents","Set","connectLocalized","component","effectiveLocale","el","lang","closestElementCrossShadowBoundary","document","documentElement","getLocale","updateEffectiveLocale","size","mutationObserver","attributes","attributeFilter","subtree","disconnectLocalized","delete","records","record","containsCrossShadowBoundary","closestLangEl","closestLang","hasAttribute","numberStringFormatter","_numberFormatOptions","_minusSign","_group","_decimal","_digits","_getDigitIndex","trim","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","keys","JSON","stringify","useGrouping","reverse","index","Map","d","find","get","dateTimeFormatCache","previousLocaleUsedForCaching","getDateTimeFormat","clear","entries","sort","_ref","_ref2","key1","key2","localeCompare","keyValue","flat","buildDateTimeFormatCacheKey","cached","DateTimeFormat","set","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","messages","defaultMessages","messageOverrides","noop","async","setUpMessages","fetchMessages","componentName","tagName","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","updateMessages","connectMessages","onMessagesChange","defaultOnMessagesChange","disconnectMessages"],"sourceRoot":""}