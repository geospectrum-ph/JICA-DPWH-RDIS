{"version":3,"file":"static/js/1985.9199f7c5.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/utils/openCloseComponent.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/components/src/utils/component.ts","../node_modules/@esri/calcite-components/dist/components/src/components/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/notice/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/notice/notice.tsx","../node_modules/@esri/calcite-components/dist/components/src/components/notice/notice.scss?tag=calcite-notice&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/utils/conditionalSlot.ts"],"sourcesContent":["import { readTask } from \"@stencil/core\";\nimport { whenTransitionDone } from \"./dom\";\n\n/**\n * Exported for testing purposes only\n */\nexport const internalReadTask = readTask;\n\n/**\n * Defines interface for components with open/close public emitter.\n * All implementations of this interface must handle the following events: `beforeOpen`, `open`, `beforeClose`, `close`.\n */\nexport interface OpenCloseComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, the component opens.\n   */\n  open?: boolean;\n\n  /**\n   * When true, the component is open.\n   */\n  opened?: boolean;\n\n  /**\n   *  Specifies the name of transitionProp.\n   */\n  transitionProp?: string;\n\n  /**\n   * Specifies property on which active transition is watched for.\n   */\n  openTransitionProp: string;\n\n  /**\n   * Specifies element that the transition is allowed to emit on.\n   */\n  transitionEl: HTMLElement;\n\n  /**\n   * Defines method for `beforeOpen` event handler.\n   */\n  onBeforeOpen: () => void;\n\n  /**\n   * Defines method for `open` event handler:\n   */\n  onOpen: () => void;\n\n  /**\n   * Defines method for `beforeClose` event handler:\n   */\n  onBeforeClose: () => void;\n\n  /**\n   * Defines method for `close` event handler:\n   */\n  onClose: () => void;\n}\n\nfunction isOpen(component: OpenCloseComponent): boolean {\n  return \"opened\" in component ? component.opened : component.open;\n}\n\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @example\n * import { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\n *\n * async componentWillLoad() {\n * // When component initially renders, if `open` was set we need to trigger on load as watcher doesn't fire.\n * if (this.open) {\n *    onToggleOpenCloseComponent(this);\n * }\n * @Watch(\"open\")\n * async toggleModal(value: boolean): Promise<void> {\n *    onToggleOpenCloseComponent(this);\n * }\n *\n * @param component - OpenCloseComponent uses `open` prop to emit (before)open/close.\n */\nexport function onToggleOpenCloseComponent(component: OpenCloseComponent): void {\n  internalReadTask((): void => {\n    if (!component.transitionEl) {\n      return;\n    }\n\n    whenTransitionDone(\n      component.transitionEl,\n      component.openTransitionProp,\n      () => {\n        if (isOpen(component)) {\n          component.onBeforeOpen();\n        } else {\n          component.onBeforeClose();\n        }\n      },\n      () => {\n        if (isOpen(component)) {\n          component.onOpen();\n        } else {\n          component.onClose();\n        }\n      },\n    );\n  });\n}\n","export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"./interfaces\";\n\nexport interface FetchIconProps {\n  icon: IconNameOrString;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nfunction generateIconId({ icon, scale }: FetchIconProps): string {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n\n  return `${iconName}${size}${filled ? \"F\" : \"\"}`;\n}\n\nexport async function fetchIcon(props: FetchIconProps): Promise<CalciteIconPath> {\n  const cachedIconKey = generateIconId(props);\n  const cachedIconData = getCachedIconDataByKey(cachedIconKey);\n\n  if (cachedIconData) {\n    return cachedIconData;\n  }\n\n  if (!requestCache[cachedIconKey]) {\n    requestCache[cachedIconKey] = fetch(getAssetPath(`./assets/icon/${cachedIconKey}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${cachedIconKey}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[cachedIconKey];\n  iconCache[cachedIconKey] = path;\n\n  return path;\n}\n\n/**\n * Util to retrieve cached icon data based on icon name and scale.\n *\n * @param props – icon properties\n */\nexport function getCachedIconData(props: FetchIconProps): CalciteIconPath {\n  return getCachedIconDataByKey(generateIconId(props));\n}\n\nfunction getCachedIconDataByKey(id: string): CalciteIconPath {\n  return iconCache[id];\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name – an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { isBrowser } from \"../../utils/browser\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, getCachedIconData, scaleToPx } from \"./utils\";\nimport { IconNameOrString } from \"./interfaces\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: IconNameOrString = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    if (!this.visible) {\n      this.waitUntilVisible(() => {\n        this.visible = true;\n        this.loadIconPathData();\n      });\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!isBrowser() || !icon || !visible) {\n      return;\n    }\n\n    const fetchIconProps = { icon, scale };\n    const pathData = getCachedIconData(fetchIconProps) || (await fetchIcon(fetchIconProps));\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","import { HTMLStencilElement } from \"@stencil/core/internal\";\nimport { Scale } from \"../components/interfaces\";\n\nexport function getIconScale(componentScale: Scale): Extract<Scale, \"s\" | \"m\"> {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\n\n/**\n * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.\n *\n * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3\n *\n * @param el - the host element to wait for\n */\nexport async function componentOnReady(el: HTMLElement): Promise<void> {\n  await (isStencilEl(el)\n    ? el.componentOnReady()\n    : new Promise<void>((resolve) => requestAnimationFrame(() => resolve())));\n}\n\nfunction isStencilEl(el: HTMLElement): el is HTMLStencilElement {\n  return typeof (el as HTMLStencilElement).componentOnReady === \"function\";\n}\n","export const KindIcons = {\n  brand: \"lightbulb\",\n  danger: \"exclamationMarkTriangle\",\n  info: \"information\",\n  success: \"checkCircle\",\n  warning: \"exclamationMarkTriangle\",\n} as const;\n","export const SLOTS = {\n  title: \"title\",\n  message: \"message\",\n  link: \"link\",\n  actionsEnd: \"actions-end\",\n};\n\nexport const CSS = {\n  actionsEnd: \"actions-end\",\n  close: \"notice-close\",\n  container: \"container\",\n  content: \"notice-content\",\n  icon: \"notice-icon\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { getSlotted, setRequestedIcon } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Kind, Scale, Width } from \"../interfaces\";\nimport { KindIcons } from \"../resources\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { getIconScale } from \"../../utils/component\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { NoticeMessages } from \"./assets/notice/t9n\";\nimport { CSS, SLOTS } from \"./resources\";\n\n/**\n * Notices are intended to be used to present users with important-but-not-crucial contextual tips or copy. Because\n * notices are displayed inline, a common use case is displaying them on page-load to present users with short hints or contextual copy.\n * They are optionally closable - useful for keeping track of whether or not a user has closed the notice. You can also choose not\n * to display a notice on page load and set the \"active\" attribute as needed to contextually provide inline messaging to users.\n */\n\n/**\n * @slot title - A slot for adding the title.\n * @slot message - A slot for adding the message.\n * @slot link - A slot for adding a `calcite-action` to take, such as: \"undo\", \"try again\", \"link to page\", etc.\n * @slot actions-end - A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or less actions.\n */\n\n@Component({\n  tag: \"calcite-notice\",\n  styleUrl: \"notice.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Notice\n  implements\n    ConditionalSlotComponent,\n    LoadableComponent,\n    T9nComponent,\n    LocalizedComponent,\n    OpenCloseComponent\n{\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //---------------------------------------------------------------------------\n\n  /** When `true`, the component is visible. */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n  }\n\n  /** Specifies the kind of the component, which will apply to top border and icon. */\n  @Prop({ reflect: true }) kind: Extract<\n    \"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\",\n    Kind\n  > = \"brand\";\n\n  /** When `true`, a close button is added to the component. */\n  @Prop({ reflect: true }) closable = false;\n\n  /**\n   * When `true`, shows a default recommended icon. Alternatively, pass a Calcite UI Icon name to display a specific icon.\n   */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the width of the component. */\n  @Prop({ reflect: true }) width: Width = \"auto\";\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: NoticeMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<NoticeMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  @Watch(\"icon\")\n  @Watch(\"kind\")\n  updateRequestedIcon(): void {\n    this.requestedIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectConditionalSlotComponent(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    this.requestedIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n    await setUpMessages(this);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  render(): VNode {\n    const { el } = this;\n    const closeButton = (\n      <button\n        aria-label={this.messages.close}\n        class={CSS.close}\n        onClick={this.close}\n        ref={(el) => (this.closeButton = el)}\n      >\n        <calcite-icon icon=\"x\" scale={getIconScale(this.scale)} />\n      </button>\n    );\n\n    const hasActionEnd = getSlotted(el, SLOTS.actionsEnd);\n\n    return (\n      <div class={CSS.container} ref={this.setTransitionEl}>\n        {this.requestedIcon ? (\n          <div class={CSS.icon}>\n            <calcite-icon\n              flipRtl={this.iconFlipRtl}\n              icon={this.requestedIcon}\n              scale={getIconScale(this.scale)}\n            />\n          </div>\n        ) : null}\n        <div class={CSS.content}>\n          <slot name={SLOTS.title} />\n          <slot name={SLOTS.message} />\n          <slot name={SLOTS.link} />\n        </div>\n        {hasActionEnd ? (\n          <div class={CSS.actionsEnd}>\n            <slot name={SLOTS.actionsEnd} />\n          </div>\n        ) : null}\n        {this.closable ? closeButton : null}\n      </div>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteNoticeBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteNoticeBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteNoticeClose: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteNoticeOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    const noticeLinkEl = this.el.querySelector(\"calcite-link\");\n\n    if (!this.closeButton && !noticeLinkEl) {\n      return;\n    }\n    if (noticeLinkEl) {\n      return noticeLinkEl.setFocus();\n    } else if (this.closeButton) {\n      this.closeButton.focus();\n    }\n  }\n\n  onBeforeClose(): void {\n    this.calciteNoticeBeforeClose.emit();\n  }\n\n  onBeforeOpen(): void {\n    this.calciteNoticeBeforeOpen.emit();\n  }\n\n  onClose(): void {\n    this.calciteNoticeClose.emit();\n  }\n\n  onOpen(): void {\n    this.calciteNoticeOpen.emit();\n  }\n\n  private setTransitionEl = (el: HTMLElement): void => {\n    this.transitionEl = el;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n  private close = (): void => {\n    this.open = false;\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteNoticeElement;\n\n  /** The close button element. */\n  private closeButton?: HTMLButtonElement;\n\n  /** The computed icon to render. */\n  private requestedIcon?: IconNameOrString;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: NoticeMessages;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLElement;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-notice-width: The width of the component.\n */\n\n// scale variables\n:host([scale=\"s\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.2\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.3\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-n1-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-n2-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-n2-wrap my-0.5;\n  }\n  .notice-close {\n    // specific padding for close button to align with calcite-action small-scale spacing\n    @apply p-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.3\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.4\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-0-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-n1-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-n1-wrap my-0.5;\n  }\n}\n\n:host([scale=\"l\"]) {\n  --calcite-notice-spacing-token-small: theme(\"spacing.4\");\n  --calcite-notice-spacing-token-large: theme(\"spacing.5\");\n  @include slotted(\"title\", \"*\", \".container\") {\n    @apply text-1-wrap my-0.5;\n  }\n  @include slotted(\"message\", \"*\", \".container\") {\n    @apply text-0-wrap my-0.5;\n  }\n  ::slotted(calcite-link) {\n    @apply text-0-wrap my-0.5;\n  }\n}\n\n:host([width=\"auto\"]) {\n  --calcite-notice-width: theme(\"width.auto\");\n}\n\n:host([width=\"half\"]) {\n  --calcite-notice-width: theme(\"width[1/2]\");\n}\n\n:host([width=\"full\"]) {\n  --calcite-notice-width: theme(\"width.full\");\n}\n\n:host {\n  @apply mx-auto hidden max-w-full items-center;\n  inline-size: var(--calcite-notice-width);\n}\n\n.container {\n  @apply bg-foreground-1\n    pointer-events-none\n    my-0\n    box-border\n    hidden\n    w-full\n    opacity-0\n    transition-default;\n  max-block-size: 0;\n  text-align: start;\n  border-inline-start: 0 solid;\n  box-shadow: 0 0 0 0 transparent;\n}\n\n// focus styles\n.notice-close {\n  @apply focus-base;\n  &:focus {\n    @apply focus-inset;\n  }\n}\n\n:host {\n  @apply flex;\n}\n\n:host([open]) .container {\n  @apply shadow-1\n    pointer-events-auto\n    flex\n    max-h-full\n    items-center\n    border-2\n    opacity-100;\n}\n\n@include slotted(\"title\", \"*\", \".container\") {\n  @apply text-color-1 m-0 font-medium;\n}\n\n@include slotted(\"message\", \"*\", \".container\") {\n  @apply text-color-2 m-0 inline font-normal;\n  margin-inline-end: var(--calcite-notice-spacing-token-small);\n}\n\n@mixin notice-element-base() {\n  @apply transition-default box-border;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: var(--calcite-notice-spacing-token-large);\n  flex: 0 0 auto;\n}\n\n.notice-content {\n  @include notice-element-base;\n  @apply flex min-w-0 flex-col break-words;\n  flex: 1 1 0;\n  padding-block: var(--calcite-notice-spacing-token-small);\n  padding-inline: 0 var(--calcite-notice-spacing-token-small);\n\n  &:first-of-type:not(:only-child) {\n    padding-inline-start: var(--calcite-notice-spacing-token-large);\n  }\n  &:only-of-type {\n    padding-block: var(--calcite-notice-spacing-token-small);\n    padding-inline: var(--calcite-notice-spacing-token-large);\n  }\n}\n\n.notice-icon {\n  @apply flex items-center;\n  @include notice-element-base;\n}\n\n.notice-close {\n  @apply text-color-3 flex cursor-pointer items-center self-stretch border-none bg-transparent outline-none;\n  @include notice-element-base;\n  -webkit-appearance: none;\n\n  &:hover,\n  &:focus {\n    @apply bg-foreground-2 text-color-1;\n  }\n\n  &:active {\n    @apply bg-foreground-3;\n  }\n}\n\n.actions-end {\n  @apply flex self-stretch;\n}\n\n$noticeKinds:\n  \"brand\" var(--calcite-color-brand),\n  \"info\" var(--calcite-color-status-info),\n  \"danger\" var(--calcite-color-status-danger),\n  \"success\" var(--calcite-color-status-success),\n  \"warning\" var(--calcite-color-status-warning);\n\n@each $noticeKind in $noticeKinds {\n  $name: nth($noticeKind, 1);\n  $kind: nth($noticeKind, 2);\n\n  :host([kind=\"#{$name}\"]) .container {\n    border-color: $kind;\n    & .notice-icon {\n      color: $kind;\n    }\n  }\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver, ExtendedMutationObserver } from \"./observers\";\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: ExtendedMutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  mutationObserver.unobserve(component.el);\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n"],"names":["internalReadTask","readTask","isOpen","component","opened","open","onToggleOpenCloseComponent","transitionEl","whenTransitionDone","openTransitionProp","onBeforeOpen","onBeforeClose","onOpen","onClose","CSS","iconCache","requestCache","scaleToPx","s","m","l","generateIconId","_ref","icon","scale","size","name","numberLeadingName","isNaN","Number","charAt","parts","split","length","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","normalizeIconName","filled","substring","getCachedIconDataByKey","id","Icon","proxyCustomElement","HTMLElement","connectedCallback","this","visible","waitUntilVisible","loadIconPathData","disconnectedCallback","intersectionObserver","disconnect","render","el","flipRtl","pathData","textLabel","dir","getElementDir","semantic","paths","concat","h","Host","key","toAriaBoolean","role","class","svg","fill","height","viewBox","width","xmlns","path","d","opacity","isBrowser","fetchIconProps","async","props","cachedIconKey","cachedIconData","fetch","getAssetPath","then","resp","json","catch","console","error","fetchIcon","callback","createObserver","entries","forEach","entry","isIntersecting","rootMargin","observe","resolveMap","WeakMap","promiseMap","setUpLoadableComponent","set","Promise","resolve","setComponentLoaded","get","componentLoaded","componentFocusable","forceUpdate","requestAnimationFrame","getIconScale","componentScale","componentOnReady","isStencilEl","KindIcons","brand","danger","info","success","warning","SLOTS","Notice","setTransitionEl","close","openHandler","onMessagesChange","updateRequestedIcon","requestedIcon","setRequestedIcon","kind","connectConditionalSlotComponent","connectLocalized","connectMessages","disconnectConditionalSlotComponent","disconnectLocalized","disconnectMessages","componentWillLoad","setUpMessages","componentDidLoad","closeButton","messages","onClick","ref","hasActionEnd","getSlotted","iconFlipRtl","closable","setFocus","noticeLinkEl","querySelector","focus","calciteNoticeBeforeClose","emit","calciteNoticeBeforeOpen","calciteNoticeClose","calciteNoticeOpen","effectiveLocaleChange","updateMessages","effectiveLocale","mutationObserver","observerOptions","childList","processMutations","unobserve","mutations","target"],"sourceRoot":""}