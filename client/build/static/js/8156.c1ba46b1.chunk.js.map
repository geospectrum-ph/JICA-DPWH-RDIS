{"version":3,"file":"static/js/8156.c1ba46b1.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/components/src/components/icon/resources.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/utils.ts","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.scss?tag=calcite-icon&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/components/src/components/icon/icon.tsx","../node_modules/@esri/calcite-components/dist/components/src/utils/observers.ts"],"sourcesContent":["export const CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n","import { CalciteIconPath } from \"@esri/calcite-ui-icons\";\nimport { getAssetPath } from \"@stencil/core\";\nimport { Scale } from \"../interfaces\";\n\nexport interface FetchIconProps {\n  icon: string;\n  scale: Scale;\n}\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const iconCache: Record<string, CalciteIconPath> = {};\n\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nexport const requestCache: Record<string, Promise<CalciteIconPath>> = {};\n\nexport const scaleToPx: Record<Scale, number> = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\n\nexport async function fetchIcon({ icon, scale }: FetchIconProps): Promise<CalciteIconPath> {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n  const id = `${iconName}${size}${filled ? \"F\" : \"\"}`;\n\n  if (iconCache[id]) {\n    return iconCache[id];\n  }\n  if (!requestCache[id]) {\n    requestCache[id] = fetch(getAssetPath(`./assets/icon/${id}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n        console.error(`\"${id}\" is not a valid calcite-ui-icon name`);\n        return \"\";\n      });\n  }\n\n  const path = await requestCache[id];\n  iconCache[id] = path;\n\n  return path;\n}\n\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name â€“ an icon name that can be either kebab or camel-cased\n * @private\n */\nexport function normalizeIconName(name: string): string {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n\n    name = parts\n      .map((part, partIndex) => {\n        return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n          const isFirstCharInName = partIndex === 0 && offset === 0;\n\n          if (isFirstCharInName) {\n            return match;\n          }\n\n          return match.toUpperCase();\n        });\n      })\n      .join(\"\");\n  }\n\n  return numberLeadingName ? `i${name}` : name;\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-ui-icon-color: The component's color. Defaults to `currentColor`.\n */\n\n:host {\n  @apply text-color-icon inline-flex;\n}\n\n$icon-size-s: 16px;\n$icon-size-m: 24px;\n$icon-size-l: 32px;\n\n:host([scale=\"s\"]) {\n  inline-size: $icon-size-s;\n  block-size: $icon-size-s;\n  min-inline-size: $icon-size-s;\n  min-block-size: $icon-size-s;\n}\n\n:host([scale=\"m\"]) {\n  inline-size: $icon-size-m;\n  block-size: $icon-size-m;\n  min-inline-size: $icon-size-m;\n  min-block-size: $icon-size-m;\n}\n\n:host([scale=\"l\"]) {\n  inline-size: $icon-size-l;\n  block-size: $icon-size-l;\n  min-inline-size: $icon-size-l;\n  min-block-size: $icon-size-l;\n}\n\n.flip-rtl {\n  transform: scaleX(-1);\n}\n\n.svg {\n  @apply block;\n}\n\n@include base-component();\n","import { CalciteIconPath, CalciteMultiPathEntry } from \"@esri/calcite-ui-icons\";\nimport { Build, Component, Element, h, Host, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { getElementDir, toAriaBoolean } from \"../../utils/dom\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport { fetchIcon, scaleToPx } from \"./utils\";\n\n@Component({\n  tag: \"calcite-icon\",\n  styleUrl: \"icon.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Icon {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Displays a specific icon.\n   *\n   * @see [Icons](https://esri.github.io/calcite-ui-icons)\n   */\n  @Prop({\n    reflect: true,\n  })\n  icon: string = null;\n\n  /**\n   * When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`).\n   */\n  @Prop({\n    reflect: true,\n  })\n  flipRtl = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({\n    reflect: true,\n  })\n  scale: Scale = \"m\";\n\n  /**\n   * Accessible name for the component.\n   *\n   * It is recommended to set this value if your icon is semantic.\n   */\n  @Prop()\n  textLabel: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.waitUntilVisible(() => {\n      this.visible = true;\n      this.loadIconPathData();\n    });\n  }\n\n  disconnectedCallback(): void {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n\n  async componentWillLoad(): Promise<void> {\n    this.loadIconPathData();\n  }\n\n  render(): VNode {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(!semantic)}\n        aria-label={semantic ? textLabel : null}\n        role={semantic ? \"img\" : null}\n      >\n        <svg\n          aria-hidden=\"true\"\n          class={{\n            [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n            svg: true,\n          }}\n          fill=\"currentColor\"\n          height=\"100%\"\n          viewBox={`0 0 ${size} ${size}`}\n          width=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          {paths.map((path: string | CalciteMultiPathEntry) =>\n            typeof path === \"string\" ? (\n              <path d={path} />\n            ) : (\n              <path d={path.d} opacity={\"opacity\" in path ? path.opacity : 1} />\n            ),\n          )}\n        </svg>\n      </Host>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteIconElement;\n\n  private intersectionObserver: IntersectionObserver;\n\n  @State()\n  private pathData: CalciteIconPath;\n\n  @State()\n  private visible = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  @Watch(\"icon\")\n  @Watch(\"scale\")\n  private async loadIconPathData(): Promise<void> {\n    const { icon, scale, visible } = this;\n\n    if (!Build.isBrowser || !icon || !visible) {\n      return;\n    }\n\n    const pathData = await fetchIcon({ icon, scale });\n\n    // While the fetchIcon method is awaiting response, the icon requested can change. This check is to verify the response received belongs to the current icon.\n    if (icon !== this.icon) {\n      return;\n    }\n\n    this.pathData = pathData;\n  }\n\n  private waitUntilVisible(callback: () => void): void {\n    this.intersectionObserver = createObserver(\n      \"intersection\",\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            this.intersectionObserver.disconnect();\n            this.intersectionObserver = null;\n            callback();\n          }\n        });\n      },\n      { rootMargin: \"50px\" },\n    );\n\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n\n    this.intersectionObserver.observe(this.el);\n  }\n}\n","import { Build } from \"@stencil/core\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve(target: Node): void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!Build.isBrowser) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"names":["CSS","iconCache","requestCache","scaleToPx","s","m","l","async","fetchIcon","_ref","icon","scale","size","name","normalizeIconName","numberLeadingName","isNaN","Number","charAt","parts","split","length","firstNonDigitInPartPattern","map","part","partIndex","replace","replacer","match","offset","toUpperCase","join","concat","filled","iconName","substring","id","fetch","getAssetPath","then","resp","json","catch","console","error","path","Icon","proxyCustomElement","HTMLElement","connectedCallback","this","waitUntilVisible","visible","loadIconPathData","disconnectedCallback","_this$intersectionObs","intersectionObserver","disconnect","componentWillLoad","render","el","flipRtl","pathData","textLabel","dir","getElementDir","semantic","paths","h","Host","toAriaBoolean","role","class","svg","fill","height","viewBox","width","xmlns","d","opacity","Build","isBrowser","callback","createObserver","entries","forEach","entry","isIntersecting","rootMargin","observe","type","options","Observer","getObserver","ExtendedMutationObserver","window","MutationObserver","constructor","super","observedEntry","target","push","unobserve","newObservedEntries","filter","observed","takeRecords","IntersectionObserver","ResizeObserver"],"sourceRoot":""}